syntax = "proto3";

package datasource;

option go_package= "./datasource";

// 数据源服务，提供连接和数据读取功能
service DataSourceService {
  // 批处理读取数据
  rpc ReadBatchData (WrappedReadRequest) returns (BatchResponse);
  // 流式读取数据，使用流式响应来返回数据
  rpc ReadStreamingData(StreamReadRequest) returns (stream ArrowResponse);
  // 从客户端发送arrow数据到服务端
  rpc SendArrowData(stream WrappedWriterDataRequest) returns (Response);
  // 写入OSS数据
  rpc WriteOSSData(OSSWriteRequest) returns (Response);
  // 往内置数据库写入数据
  rpc WriteInternalData(stream WriterInternalDataRequest) returns (Response);
  // 从内置数据库读取数据
  rpc ReadInternalData(InternalReadRequest) returns (stream ArrowResponse);
}


// 连接响应，返回连接成功与否的信息
message Response {
  bool success = 1;    // 是否成功连接
  string message = 2;  // 错误或成功信息
}

message BatchResponse {
  string ObjectUrl = 1; // 下载数据的url
}

message ArrowResponse {
  bytes arrow_batch = 1;
}

message WriterDataRequest {
  bytes arrow_batch = 1;
  string assetName = 2; // 资产名称
  int32 chainInfoId = 3;
  int32 platformId = 4;
}

message WrappedWriterDataRequest {
  WriterDataRequest request = 1;
  string requestId = 2;
}

message WriterInternalDataRequest {
  bytes arrow_batch = 1;
  string dbName = 2;
  string tableName = 3;
}

message InternalReadRequest {
  string tableName = 1;
  repeated string dbFields = 2;
}

// 批处理请求，包含查询条件或读取参数
message BatchReadRequest {
  string assetName = 1; // 资产名称
  int32 chainInfoId = 2;
  repeated string dbFields = 3;  // 数据库字段名的字符串数组
  string filePath = 4; // 下载到本地的文件路径
  int32 platformId = 5; // 平台id
  string fileName = 6; // 文件名
}

message WrappedReadRequest {
  BatchReadRequest request = 1;
  string requestId = 2;
}

// 流式任务请求
message StreamReadRequest {
  string assetName = 1; // 资产名称
  int32 chainInfoId = 2;
  repeated string dbFields = 3;  // 数据库字段名的字符串数组
  string requestId = 4;
  FileType fileType = 5;
  string filePath = 6;
  int32 platformId = 7;
}

message ConnectionInfo {
  int32 dbtype = 1; //数据库类型
  string host = 2; // 数据库地址
  int32  port = 3; // 数据库端口
  string tableName = 4; // 表名
  string tls_cert = 5; // TLS证书
  string tls_cert_name = 6; // TLS文件名
  string tls_cert_ext = 7; // TLS文件名扩展
  string user = 8;
  string password = 9;
  string dbName = 10;
}

message ServerInfo {
  string namespace = 1;
  string serviceName = 2;
  string servicePort = 3;
}

// 文件类型的枚举定义
enum FileType {
  FILE_TYPE_UNKNOWN = 0;  // 默认值，表示未知类型
  FILE_TYPE_CSV = 1;      // CSV 文件
  FILE_TYPE_JSON = 2;     // JSON 文件
  FILE_TYPE_PARQUET = 3;  // Parquet 文件
  FILE_TYPE_AVRO = 4;     // Avro 文件
  FILE_TYPE_ARROW = 5;  // arrow文件
  STREAM_ARROW = 6; // arrow字节流
}

// 数据源类型
enum DataSourceType {
  DATA_SOURCE_TYPE_UNKNOWN = 0;
  DATA_SOURCE_TYPE_MYSQL = 1;
  DATA_SOURCE_TYPE_KINGBASE = 2;
  DATA_SOURCE_TYPE_HIVE = 3;
}

message OSSWriteRequest {
  string taskId = 1;
  string requestId = 2;
  string filePath = 3; // 本地文件路径
  bytes fileContent = 4; // 写入文件的内容
}

message SparkDBConnInfo {
  string dbType = 1;
  string host = 2;
  int32 port = 3;
  string database = 4;
  string username = 5;
  string password = 6;
  string query = 7; // 执行的查询语句
  string fileName = 8;
}

