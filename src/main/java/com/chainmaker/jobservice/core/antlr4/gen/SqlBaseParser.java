// Generated from D:/chainweaver/mira-job-service/src/main/java/com/chainmaker/jobservice/core/antlr4/SqlBaseParser.g4 by ANTLR 4.13.1
package com.chainmaker.jobservice.core.antlr4.gen;
import org.antlr.v4.runtime.atn.*;
import org.antlr.v4.runtime.dfa.DFA;
import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.misc.*;
import org.antlr.v4.runtime.tree.*;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

@SuppressWarnings({"all", "warnings", "unchecked", "unused", "cast", "CheckReturnValue"})
public class SqlBaseParser extends Parser {
	static { RuntimeMetaData.checkVersion("4.13.1", RuntimeMetaData.VERSION); }

	protected static final DFA[] _decisionToDFA;
	protected static final PredictionContextCache _sharedContextCache =
		new PredictionContextCache();
	public static final int
		SEMICOLON=1, LEFT_PAREN=2, RIGHT_PAREN=3, COMMA=4, DOT=5, LEFT_BRACKET=6, 
		RIGHT_BRACKET=7, SEQUENCE=8, FL=9, TRAIN=10, FE=11, EVAL=12, PREDICT=13, 
		ADD=14, AFTER=15, ALL=16, ALTER=17, ALWAYS=18, ANALYZE=19, AND=20, ANTI=21, 
		ANY=22, ANY_VALUE=23, ARCHIVE=24, ARRAY=25, AS=26, ASC=27, AT=28, AUTHORIZATION=29, 
		BETWEEN=30, BOTH=31, BUCKET=32, BUCKETS=33, BY=34, CACHE=35, CASCADE=36, 
		CASE=37, CAST=38, CATALOG=39, CATALOGS=40, CHANGE=41, CHECK=42, CLEAR=43, 
		CLUSTER=44, CLUSTERED=45, CODEGEN=46, COLLATE=47, COLLECTION=48, COLUMN=49, 
		COLUMNS=50, COMMENT=51, COMMIT=52, COMPACT=53, COMPACTIONS=54, COMPUTE=55, 
		CONCATENATE=56, CONSTRAINT=57, COST=58, CREATE=59, CROSS=60, CUBE=61, 
		CURRENT=62, CURRENT_DATE=63, CURRENT_TIME=64, CURRENT_TIMESTAMP=65, CURRENT_USER=66, 
		DAY=67, DAYS=68, DAYOFYEAR=69, DATA=70, DATABASE=71, DATABASES=72, DATEADD=73, 
		DATEDIFF=74, DBPROPERTIES=75, DEFAULT=76, DEFINED=77, DELETE=78, DELIMITED=79, 
		DESC=80, DESCRIBE=81, DFS=82, DIRECTORIES=83, DIRECTORY=84, DISTINCT=85, 
		DISTRIBUTE=86, DIV=87, DROP=88, ELSE=89, END=90, ESCAPE=91, ESCAPED=92, 
		EXCEPT=93, EXCHANGE=94, EXCLUDE=95, EXISTS=96, EXPLAIN=97, EXPORT=98, 
		EXTENDED=99, EXTERNAL=100, EXTRACT=101, FALSE=102, FETCH=103, FIELDS=104, 
		FILTER=105, FILEFORMAT=106, FIRST=107, FOLLOWING=108, FOR=109, FOREIGN=110, 
		FORMAT=111, FORMATTED=112, FROM=113, FULL=114, FUNCTION=115, FUNCTIONS=116, 
		GENERATED=117, GLOBAL=118, GRANT=119, GROUP=120, GROUPING=121, HAVING=122, 
		HOUR=123, HOURS=124, IF=125, IGNORE=126, IMPORT=127, IN=128, INCLUDE=129, 
		INDEX=130, INDEXES=131, INNER=132, INPATH=133, INPUTFORMAT=134, INSERT=135, 
		INTERSECT=136, INTERVAL=137, INTO=138, IS=139, ITEMS=140, JOIN=141, KEYS=142, 
		LAST=143, LATERAL=144, LAZY=145, LEADING=146, LEFT=147, LIKE=148, ILIKE=149, 
		LIMIT=150, LINES=151, LIST=152, LOAD=153, LOCAL=154, LOCATION=155, LOCK=156, 
		LOCKS=157, LOGICAL=158, MACRO=159, MAP=160, MATCHED=161, MERGE=162, MICROSECOND=163, 
		MICROSECONDS=164, MILLISECOND=165, MILLISECONDS=166, MINUTE=167, MINUTES=168, 
		MONTH=169, MONTHS=170, MSCK=171, NAMESPACE=172, NAMESPACES=173, NANOSECOND=174, 
		NANOSECONDS=175, NATURAL=176, NO=177, NOT=178, NULL=179, NULLS=180, OF=181, 
		OFFSET=182, ON=183, ONLY=184, OPTION=185, OPTIONS=186, OR=187, ORDER=188, 
		OUT=189, OUTER=190, OUTPUTFORMAT=191, OVER=192, OVERLAPS=193, OVERLAY=194, 
		OVERWRITE=195, PARTITION=196, PARTITIONED=197, PARTITIONS=198, PERCENTILE_CONT=199, 
		PERCENTILE_DISC=200, PERCENTLIT=201, PIVOT=202, PLACING=203, POSITION=204, 
		PRECEDING=205, PRIMARY=206, PRINCIPALS=207, PROPERTIES=208, PURGE=209, 
		QUARTER=210, QUERY=211, RANGE=212, RECORDREADER=213, RECORDWRITER=214, 
		RECOVER=215, REDUCE=216, REFERENCES=217, REFRESH=218, RENAME=219, REPAIR=220, 
		REPEATABLE=221, REPLACE=222, RESET=223, RESPECT=224, RESTRICT=225, REVOKE=226, 
		RIGHT=227, RLIKE=228, ROLE=229, ROLES=230, ROLLBACK=231, ROLLUP=232, ROW=233, 
		ROWS=234, SECOND=235, SECONDS=236, SCHEMA=237, SCHEMAS=238, SELECT=239, 
		SEMI=240, SEPARATED=241, SERDE=242, SERDEPROPERTIES=243, SESSION_USER=244, 
		SET=245, SETMINUS=246, SETS=247, SHOW=248, SKEWED=249, SOME=250, SORT=251, 
		SORTED=252, SOURCE=253, START=254, STATISTICS=255, STORED=256, STRATIFY=257, 
		STRUCT=258, SUBSTR=259, SUBSTRING=260, SYNC=261, SYSTEM_TIME=262, SYSTEM_VERSION=263, 
		TABLE=264, TABLES=265, TABLESAMPLE=266, TARGET=267, TBLPROPERTIES=268, 
		TEMPORARY=269, TERMINATED=270, THEN=271, TIME=272, TIMESTAMP=273, TIMESTAMPADD=274, 
		TIMESTAMPDIFF=275, TO=276, TOUCH=277, TRAILING=278, TRANSACTION=279, TRANSACTIONS=280, 
		TRANSFORM=281, TRIM=282, TRUE=283, TRUNCATE=284, TRY_CAST=285, TYPE=286, 
		UNARCHIVE=287, UNBOUNDED=288, UNCACHE=289, UNION=290, UNIQUE=291, UNKNOWN=292, 
		UNLOCK=293, UNPIVOT=294, UNSET=295, UPDATE=296, USE=297, USER=298, USING=299, 
		VALUES=300, VERSION=301, VIEW=302, VIEWS=303, WEEK=304, WEEKS=305, WHEN=306, 
		WHERE=307, WINDOW=308, WITH=309, WITHIN=310, YEAR=311, YEARS=312, ZONE=313, 
		EQ=314, NSEQ=315, NEQ=316, NEQJ=317, LT=318, LTE=319, GT=320, GTE=321, 
		PLUS=322, MINUS=323, ASTERISK=324, OCCULTATION=325, SLASH=326, PERCENT=327, 
		TILDE=328, AMPERSAND=329, PIPE=330, CONCAT_PIPE=331, HAT=332, COLON=333, 
		ARROW=334, HENT_START=335, HENT_END=336, STRING=337, DOUBLEQUOTED_STRING=338, 
		BIGINT_LITERAL=339, SMALLINT_LITERAL=340, TINYINT_LITERAL=341, INTEGER_VALUE=342, 
		EXPONENT_VALUE=343, DECIMAL_VALUE=344, FLOAT_LITERAL=345, DOUBLE_LITERAL=346, 
		BIGDECIMAL_LITERAL=347, IDENTIFIER=348, BACKQUOTED_IDENTIFIER=349, SIMPLE_COMMENT=350, 
		BRACKETED_COMMENT=351, WS=352, UNRECOGNIZED=353;
	public static final int
		RULE_singleStatement = 0, RULE_singleExpression = 1, RULE_singleTableIdentifier = 2, 
		RULE_singleMultipartIdentifier = 3, RULE_singleFunctionIdentifier = 4, 
		RULE_singleDataType = 5, RULE_singleTableSchema = 6, RULE_statement = 7, 
		RULE_timezone = 8, RULE_configKey = 9, RULE_configValue = 10, RULE_unsupportedHiveNativeCommands = 11, 
		RULE_createTableHeader = 12, RULE_replaceTableHeader = 13, RULE_bucketSpec = 14, 
		RULE_skewSpec = 15, RULE_locationSpec = 16, RULE_commentSpec = 17, RULE_query = 18, 
		RULE_insertInto = 19, RULE_partitionSpecLocation = 20, RULE_partitionSpec = 21, 
		RULE_partitionVal = 22, RULE_namespace = 23, RULE_namespaces = 24, RULE_describeFuncName = 25, 
		RULE_describeColName = 26, RULE_ctes = 27, RULE_namedQuery = 28, RULE_tableProvider = 29, 
		RULE_createTableClauses = 30, RULE_propertyList = 31, RULE_property = 32, 
		RULE_propertyKey = 33, RULE_propertyValue = 34, RULE_constantList = 35, 
		RULE_nestedConstantList = 36, RULE_createFileFormat = 37, RULE_fileFormat = 38, 
		RULE_storageHandler = 39, RULE_resource = 40, RULE_dmlStatementNoWith = 41, 
		RULE_queryOrganization = 42, RULE_multiInsertQueryBody = 43, RULE_queryTerm = 44, 
		RULE_queryPrimary = 45, RULE_sortItem = 46, RULE_fromStatement = 47, RULE_fromStatementBody = 48, 
		RULE_querySpecification = 49, RULE_transformClause = 50, RULE_selectClause = 51, 
		RULE_setClause = 52, RULE_matchedClause = 53, RULE_notMatchedClause = 54, 
		RULE_notMatchedBySourceClause = 55, RULE_matchedAction = 56, RULE_notMatchedAction = 57, 
		RULE_notMatchedBySourceAction = 58, RULE_assignmentList = 59, RULE_assignment = 60, 
		RULE_whereClause = 61, RULE_havingClause = 62, RULE_hint = 63, RULE_hintStatement = 64, 
		RULE_fromClause = 65, RULE_temporalClause = 66, RULE_aggregationClause = 67, 
		RULE_groupByClause = 68, RULE_groupingAnalytics = 69, RULE_groupingElement = 70, 
		RULE_groupingSet = 71, RULE_pivotClause = 72, RULE_pivotColumn = 73, RULE_pivotValue = 74, 
		RULE_unpivotClause = 75, RULE_unpivotNullClause = 76, RULE_unpivotOperator = 77, 
		RULE_unpivotSingleValueColumnClause = 78, RULE_unpivotMultiValueColumnClause = 79, 
		RULE_unpivotColumnSet = 80, RULE_unpivotValueColumn = 81, RULE_unpivotNameColumn = 82, 
		RULE_unpivotColumnAndAlias = 83, RULE_unpivotColumn = 84, RULE_unpivotAlias = 85, 
		RULE_lateralView = 86, RULE_setQuantifier = 87, RULE_relation = 88, RULE_relationExtension = 89, 
		RULE_joinRelation = 90, RULE_joinType = 91, RULE_joinCriteria = 92, RULE_sample = 93, 
		RULE_sampleMethod = 94, RULE_identifierList = 95, RULE_identifierSeq = 96, 
		RULE_orderedIdentifierList = 97, RULE_orderedIdentifier = 98, RULE_identifierCommentList = 99, 
		RULE_identifierComment = 100, RULE_relationPrimary = 101, RULE_inlineTable = 102, 
		RULE_functionTable = 103, RULE_tableAlias = 104, RULE_rowFormat = 105, 
		RULE_multipartIdentifierList = 106, RULE_multipartIdentifier = 107, RULE_multipartIdentifierPropertyList = 108, 
		RULE_multipartIdentifierProperty = 109, RULE_tableIdentifier = 110, RULE_functionIdentifier = 111, 
		RULE_namedExpression = 112, RULE_namedExpressionSeq = 113, RULE_flType = 114, 
		RULE_flStageSeq = 115, RULE_flStage = 116, RULE_flExpressionSeq = 117, 
		RULE_flExpression = 118, RULE_flOperator = 119, RULE_partitionFieldList = 120, 
		RULE_partitionField = 121, RULE_transform = 122, RULE_transformArgument = 123, 
		RULE_expression = 124, RULE_expressionSeq = 125, RULE_booleanExpression = 126, 
		RULE_predicate = 127, RULE_valueExpression = 128, RULE_datetimeUnit = 129, 
		RULE_primaryExpression = 130, RULE_featureExpression = 131, RULE_constant = 132, 
		RULE_comparisonOperator = 133, RULE_arithmeticOperator = 134, RULE_predicateOperator = 135, 
		RULE_booleanValue = 136, RULE_interval = 137, RULE_errorCapturingMultiUnitsInterval = 138, 
		RULE_multiUnitsInterval = 139, RULE_errorCapturingUnitToUnitInterval = 140, 
		RULE_unitToUnitInterval = 141, RULE_intervalValue = 142, RULE_unitInMultiUnits = 143, 
		RULE_unitInUnitToUnit = 144, RULE_colPosition = 145, RULE_dataType = 146, 
		RULE_qualifiedColTypeWithPositionList = 147, RULE_qualifiedColTypeWithPosition = 148, 
		RULE_colDefinitionDescriptorWithPosition = 149, RULE_defaultExpression = 150, 
		RULE_colTypeList = 151, RULE_colType = 152, RULE_createOrReplaceTableColTypeList = 153, 
		RULE_createOrReplaceTableColType = 154, RULE_colDefinitionOption = 155, 
		RULE_generationExpression = 156, RULE_complexColTypeList = 157, RULE_complexColType = 158, 
		RULE_whenClause = 159, RULE_windowClause = 160, RULE_namedWindow = 161, 
		RULE_windowSpec = 162, RULE_windowFrame = 163, RULE_frameBound = 164, 
		RULE_qualifiedNameList = 165, RULE_functionName = 166, RULE_qualifiedName = 167, 
		RULE_errorCapturingIdentifier = 168, RULE_errorCapturingIdentifierExtra = 169, 
		RULE_identifier = 170, RULE_strictIdentifier = 171, RULE_quotedIdentifier = 172, 
		RULE_backQuotedIdentifier = 173, RULE_number = 174, RULE_alterColumnAction = 175, 
		RULE_stringLit = 176, RULE_comment = 177, RULE_version = 178, RULE_ansiNonReserved = 179, 
		RULE_strictNonReserved = 180, RULE_nonReserved = 181;
	private static String[] makeRuleNames() {
		return new String[] {
			"singleStatement", "singleExpression", "singleTableIdentifier", "singleMultipartIdentifier", 
			"singleFunctionIdentifier", "singleDataType", "singleTableSchema", "statement", 
			"timezone", "configKey", "configValue", "unsupportedHiveNativeCommands", 
			"createTableHeader", "replaceTableHeader", "bucketSpec", "skewSpec", 
			"locationSpec", "commentSpec", "query", "insertInto", "partitionSpecLocation", 
			"partitionSpec", "partitionVal", "namespace", "namespaces", "describeFuncName", 
			"describeColName", "ctes", "namedQuery", "tableProvider", "createTableClauses", 
			"propertyList", "property", "propertyKey", "propertyValue", "constantList", 
			"nestedConstantList", "createFileFormat", "fileFormat", "storageHandler", 
			"resource", "dmlStatementNoWith", "queryOrganization", "multiInsertQueryBody", 
			"queryTerm", "queryPrimary", "sortItem", "fromStatement", "fromStatementBody", 
			"querySpecification", "transformClause", "selectClause", "setClause", 
			"matchedClause", "notMatchedClause", "notMatchedBySourceClause", "matchedAction", 
			"notMatchedAction", "notMatchedBySourceAction", "assignmentList", "assignment", 
			"whereClause", "havingClause", "hint", "hintStatement", "fromClause", 
			"temporalClause", "aggregationClause", "groupByClause", "groupingAnalytics", 
			"groupingElement", "groupingSet", "pivotClause", "pivotColumn", "pivotValue", 
			"unpivotClause", "unpivotNullClause", "unpivotOperator", "unpivotSingleValueColumnClause", 
			"unpivotMultiValueColumnClause", "unpivotColumnSet", "unpivotValueColumn", 
			"unpivotNameColumn", "unpivotColumnAndAlias", "unpivotColumn", "unpivotAlias", 
			"lateralView", "setQuantifier", "relation", "relationExtension", "joinRelation", 
			"joinType", "joinCriteria", "sample", "sampleMethod", "identifierList", 
			"identifierSeq", "orderedIdentifierList", "orderedIdentifier", "identifierCommentList", 
			"identifierComment", "relationPrimary", "inlineTable", "functionTable", 
			"tableAlias", "rowFormat", "multipartIdentifierList", "multipartIdentifier", 
			"multipartIdentifierPropertyList", "multipartIdentifierProperty", "tableIdentifier", 
			"functionIdentifier", "namedExpression", "namedExpressionSeq", "flType", 
			"flStageSeq", "flStage", "flExpressionSeq", "flExpression", "flOperator", 
			"partitionFieldList", "partitionField", "transform", "transformArgument", 
			"expression", "expressionSeq", "booleanExpression", "predicate", "valueExpression", 
			"datetimeUnit", "primaryExpression", "featureExpression", "constant", 
			"comparisonOperator", "arithmeticOperator", "predicateOperator", "booleanValue", 
			"interval", "errorCapturingMultiUnitsInterval", "multiUnitsInterval", 
			"errorCapturingUnitToUnitInterval", "unitToUnitInterval", "intervalValue", 
			"unitInMultiUnits", "unitInUnitToUnit", "colPosition", "dataType", "qualifiedColTypeWithPositionList", 
			"qualifiedColTypeWithPosition", "colDefinitionDescriptorWithPosition", 
			"defaultExpression", "colTypeList", "colType", "createOrReplaceTableColTypeList", 
			"createOrReplaceTableColType", "colDefinitionOption", "generationExpression", 
			"complexColTypeList", "complexColType", "whenClause", "windowClause", 
			"namedWindow", "windowSpec", "windowFrame", "frameBound", "qualifiedNameList", 
			"functionName", "qualifiedName", "errorCapturingIdentifier", "errorCapturingIdentifierExtra", 
			"identifier", "strictIdentifier", "quotedIdentifier", "backQuotedIdentifier", 
			"number", "alterColumnAction", "stringLit", "comment", "version", "ansiNonReserved", 
			"strictNonReserved", "nonReserved"
		};
	}
	public static final String[] ruleNames = makeRuleNames();

	private static String[] makeLiteralNames() {
		return new String[] {
			null, "';'", "'('", "')'", "','", "'.'", "'['", "']'", "'SEQUENCE'", 
			"'FL'", "'TRAIN'", "'FE'", "'EVAL'", "'PREDICT'", "'ADD'", "'AFTER'", 
			"'ALL'", "'ALTER'", "'ALWAYS'", "'ANALYZE'", "'AND'", "'ANTI'", "'ANY'", 
			"'ANY_VALUE'", "'ARCHIVE'", "'ARRAY'", "'AS'", "'ASC'", "'AT'", "'AUTHORIZATION'", 
			"'BETWEEN'", "'BOTH'", "'BUCKET'", "'BUCKETS'", "'BY'", "'CACHE'", "'CASCADE'", 
			"'CASE'", "'CAST'", "'CATALOG'", "'CATALOGS'", "'CHANGE'", "'CHECK'", 
			"'CLEAR'", "'CLUSTER'", "'CLUSTERED'", "'CODEGEN'", "'COLLATE'", "'COLLECTION'", 
			"'COLUMN'", "'COLUMNS'", "'COMMENT'", "'COMMIT'", "'COMPACT'", "'COMPACTIONS'", 
			"'COMPUTE'", "'CONCATENATE'", "'CONSTRAINT'", "'COST'", "'CREATE'", "'CROSS'", 
			"'CUBE'", "'CURRENT'", "'CURRENT_DATE'", "'CURRENT_TIME'", "'CURRENT_TIMESTAMP'", 
			"'CURRENT_USER'", "'DAY'", "'DAYS'", "'DAYOFYEAR'", "'DATA'", "'DATABASE'", 
			"'DATABASES'", "'DATEADD'", "'DATEDIFF'", "'DBPROPERTIES'", "'DEFAULT'", 
			"'DEFINED'", "'DELETE'", "'DELIMITED'", "'DESC'", "'DESCRIBE'", "'DFS'", 
			"'DIRECTORIES'", "'DIRECTORY'", "'DISTINCT'", "'DISTRIBUTE'", "'DIV'", 
			"'DROP'", "'ELSE'", "'END'", "'ESCAPE'", "'ESCAPED'", "'EXCEPT'", "'EXCHANGE'", 
			"'EXCLUDE'", "'EXISTS'", "'EXPLAIN'", "'EXPORT'", "'EXTENDED'", "'EXTERNAL'", 
			"'EXTRACT'", "'FALSE'", "'FETCH'", "'FIELDS'", "'FILTER'", "'FILEFORMAT'", 
			"'FIRST'", "'FOLLOWING'", "'FOR'", "'FOREIGN'", "'FORMAT'", "'FORMATTED'", 
			"'FROM'", "'FULL'", "'FUNCTION'", "'FUNCTIONS'", "'GENERATED'", "'GLOBAL'", 
			"'GRANT'", "'GROUP'", "'GROUPING'", "'HAVING'", "'HOUR'", "'HOURS'", 
			"'IF'", "'IGNORE'", "'IMPORT'", "'IN'", "'INCLUDE'", "'INDEX'", "'INDEXES'", 
			"'INNER'", "'INPATH'", "'INPUTFORMAT'", "'INSERT'", "'INTERSECT'", "'INTERVAL'", 
			"'INTO'", "'IS'", "'ITEMS'", "'JOIN'", "'KEYS'", "'LAST'", "'LATERAL'", 
			"'LAZY'", "'LEADING'", "'LEFT'", "'LIKE'", "'ILIKE'", "'LIMIT'", "'LINES'", 
			"'LIST'", "'LOAD'", "'LOCAL'", "'LOCATION'", "'LOCK'", "'LOCKS'", "'LOGICAL'", 
			"'MACRO'", "'MAP'", "'MATCHED'", "'MERGE'", "'MICROSECOND'", "'MICROSECONDS'", 
			"'MILLISECOND'", "'MILLISECONDS'", "'MINUTE'", "'MINUTES'", "'MONTH'", 
			"'MONTHS'", "'MSCK'", "'NAMESPACE'", "'NAMESPACES'", "'NANOSECOND'", 
			"'NANOSECONDS'", "'NATURAL'", "'NO'", null, "'NULL'", "'NULLS'", "'OF'", 
			"'OFFSET'", "'ON'", "'ONLY'", "'OPTION'", "'OPTIONS'", "'OR'", "'ORDER'", 
			"'OUT'", "'OUTER'", "'OUTPUTFORMAT'", "'OVER'", "'OVERLAPS'", "'OVERLAY'", 
			"'OVERWRITE'", "'PARTITION'", "'PARTITIONED'", "'PARTITIONS'", "'PERCENTILE_CONT'", 
			"'PERCENTILE_DISC'", "'PERCENT'", "'PIVOT'", "'PLACING'", "'POSITION'", 
			"'PRECEDING'", "'PRIMARY'", "'PRINCIPALS'", "'PROPERTIES'", "'PURGE'", 
			"'QUARTER'", "'QUERY'", "'RANGE'", "'RECORDREADER'", "'RECORDWRITER'", 
			"'RECOVER'", "'REDUCE'", "'REFERENCES'", "'REFRESH'", "'RENAME'", "'REPAIR'", 
			"'REPEATABLE'", "'REPLACE'", "'RESET'", "'RESPECT'", "'RESTRICT'", "'REVOKE'", 
			"'RIGHT'", null, "'ROLE'", "'ROLES'", "'ROLLBACK'", "'ROLLUP'", "'ROW'", 
			"'ROWS'", "'SECOND'", "'SECONDS'", "'SCHEMA'", "'SCHEMAS'", "'SELECT'", 
			"'SEMI'", "'SEPARATED'", "'SERDE'", "'SERDEPROPERTIES'", "'SESSION_USER'", 
			"'SET'", "'MINUS'", "'SETS'", "'SHOW'", "'SKEWED'", "'SOME'", "'SORT'", 
			"'SORTED'", "'SOURCE'", "'START'", "'STATISTICS'", "'STORED'", "'STRATIFY'", 
			"'STRUCT'", "'SUBSTR'", "'SUBSTRING'", "'SYNC'", "'SYSTEM_TIME'", "'SYSTEM_VERSION'", 
			"'TABLE'", "'TABLES'", "'TABLESAMPLE'", "'TARGET'", "'TBLPROPERTIES'", 
			null, "'TERMINATED'", "'THEN'", "'TIME'", "'TIMESTAMP'", "'TIMESTAMPADD'", 
			"'TIMESTAMPDIFF'", "'TO'", "'TOUCH'", "'TRAILING'", "'TRANSACTION'", 
			"'TRANSACTIONS'", "'TRANSFORM'", "'TRIM'", "'TRUE'", "'TRUNCATE'", "'TRY_CAST'", 
			"'TYPE'", "'UNARCHIVE'", "'UNBOUNDED'", "'UNCACHE'", "'UNION'", "'UNIQUE'", 
			"'UNKNOWN'", "'UNLOCK'", "'UNPIVOT'", "'UNSET'", "'UPDATE'", "'USE'", 
			"'USER'", "'USING'", "'VALUES'", "'VERSION'", "'VIEW'", "'VIEWS'", "'WEEK'", 
			"'WEEKS'", "'WHEN'", "'WHERE'", "'WINDOW'", "'WITH'", "'WITHIN'", "'YEAR'", 
			"'YEARS'", "'ZONE'", null, "'<=>'", "'<>'", "'!='", "'<'", null, "'>'", 
			null, "'+'", "'-'", "'*'", "'?'", "'/'", "'%'", "'~'", "'&'", "'|'", 
			"'||'", "'^'", "':'", "'->'", "'/*+'", "'*/'"
		};
	}
	private static final String[] _LITERAL_NAMES = makeLiteralNames();
	private static String[] makeSymbolicNames() {
		return new String[] {
			null, "SEMICOLON", "LEFT_PAREN", "RIGHT_PAREN", "COMMA", "DOT", "LEFT_BRACKET", 
			"RIGHT_BRACKET", "SEQUENCE", "FL", "TRAIN", "FE", "EVAL", "PREDICT", 
			"ADD", "AFTER", "ALL", "ALTER", "ALWAYS", "ANALYZE", "AND", "ANTI", "ANY", 
			"ANY_VALUE", "ARCHIVE", "ARRAY", "AS", "ASC", "AT", "AUTHORIZATION", 
			"BETWEEN", "BOTH", "BUCKET", "BUCKETS", "BY", "CACHE", "CASCADE", "CASE", 
			"CAST", "CATALOG", "CATALOGS", "CHANGE", "CHECK", "CLEAR", "CLUSTER", 
			"CLUSTERED", "CODEGEN", "COLLATE", "COLLECTION", "COLUMN", "COLUMNS", 
			"COMMENT", "COMMIT", "COMPACT", "COMPACTIONS", "COMPUTE", "CONCATENATE", 
			"CONSTRAINT", "COST", "CREATE", "CROSS", "CUBE", "CURRENT", "CURRENT_DATE", 
			"CURRENT_TIME", "CURRENT_TIMESTAMP", "CURRENT_USER", "DAY", "DAYS", "DAYOFYEAR", 
			"DATA", "DATABASE", "DATABASES", "DATEADD", "DATEDIFF", "DBPROPERTIES", 
			"DEFAULT", "DEFINED", "DELETE", "DELIMITED", "DESC", "DESCRIBE", "DFS", 
			"DIRECTORIES", "DIRECTORY", "DISTINCT", "DISTRIBUTE", "DIV", "DROP", 
			"ELSE", "END", "ESCAPE", "ESCAPED", "EXCEPT", "EXCHANGE", "EXCLUDE", 
			"EXISTS", "EXPLAIN", "EXPORT", "EXTENDED", "EXTERNAL", "EXTRACT", "FALSE", 
			"FETCH", "FIELDS", "FILTER", "FILEFORMAT", "FIRST", "FOLLOWING", "FOR", 
			"FOREIGN", "FORMAT", "FORMATTED", "FROM", "FULL", "FUNCTION", "FUNCTIONS", 
			"GENERATED", "GLOBAL", "GRANT", "GROUP", "GROUPING", "HAVING", "HOUR", 
			"HOURS", "IF", "IGNORE", "IMPORT", "IN", "INCLUDE", "INDEX", "INDEXES", 
			"INNER", "INPATH", "INPUTFORMAT", "INSERT", "INTERSECT", "INTERVAL", 
			"INTO", "IS", "ITEMS", "JOIN", "KEYS", "LAST", "LATERAL", "LAZY", "LEADING", 
			"LEFT", "LIKE", "ILIKE", "LIMIT", "LINES", "LIST", "LOAD", "LOCAL", "LOCATION", 
			"LOCK", "LOCKS", "LOGICAL", "MACRO", "MAP", "MATCHED", "MERGE", "MICROSECOND", 
			"MICROSECONDS", "MILLISECOND", "MILLISECONDS", "MINUTE", "MINUTES", "MONTH", 
			"MONTHS", "MSCK", "NAMESPACE", "NAMESPACES", "NANOSECOND", "NANOSECONDS", 
			"NATURAL", "NO", "NOT", "NULL", "NULLS", "OF", "OFFSET", "ON", "ONLY", 
			"OPTION", "OPTIONS", "OR", "ORDER", "OUT", "OUTER", "OUTPUTFORMAT", "OVER", 
			"OVERLAPS", "OVERLAY", "OVERWRITE", "PARTITION", "PARTITIONED", "PARTITIONS", 
			"PERCENTILE_CONT", "PERCENTILE_DISC", "PERCENTLIT", "PIVOT", "PLACING", 
			"POSITION", "PRECEDING", "PRIMARY", "PRINCIPALS", "PROPERTIES", "PURGE", 
			"QUARTER", "QUERY", "RANGE", "RECORDREADER", "RECORDWRITER", "RECOVER", 
			"REDUCE", "REFERENCES", "REFRESH", "RENAME", "REPAIR", "REPEATABLE", 
			"REPLACE", "RESET", "RESPECT", "RESTRICT", "REVOKE", "RIGHT", "RLIKE", 
			"ROLE", "ROLES", "ROLLBACK", "ROLLUP", "ROW", "ROWS", "SECOND", "SECONDS", 
			"SCHEMA", "SCHEMAS", "SELECT", "SEMI", "SEPARATED", "SERDE", "SERDEPROPERTIES", 
			"SESSION_USER", "SET", "SETMINUS", "SETS", "SHOW", "SKEWED", "SOME", 
			"SORT", "SORTED", "SOURCE", "START", "STATISTICS", "STORED", "STRATIFY", 
			"STRUCT", "SUBSTR", "SUBSTRING", "SYNC", "SYSTEM_TIME", "SYSTEM_VERSION", 
			"TABLE", "TABLES", "TABLESAMPLE", "TARGET", "TBLPROPERTIES", "TEMPORARY", 
			"TERMINATED", "THEN", "TIME", "TIMESTAMP", "TIMESTAMPADD", "TIMESTAMPDIFF", 
			"TO", "TOUCH", "TRAILING", "TRANSACTION", "TRANSACTIONS", "TRANSFORM", 
			"TRIM", "TRUE", "TRUNCATE", "TRY_CAST", "TYPE", "UNARCHIVE", "UNBOUNDED", 
			"UNCACHE", "UNION", "UNIQUE", "UNKNOWN", "UNLOCK", "UNPIVOT", "UNSET", 
			"UPDATE", "USE", "USER", "USING", "VALUES", "VERSION", "VIEW", "VIEWS", 
			"WEEK", "WEEKS", "WHEN", "WHERE", "WINDOW", "WITH", "WITHIN", "YEAR", 
			"YEARS", "ZONE", "EQ", "NSEQ", "NEQ", "NEQJ", "LT", "LTE", "GT", "GTE", 
			"PLUS", "MINUS", "ASTERISK", "OCCULTATION", "SLASH", "PERCENT", "TILDE", 
			"AMPERSAND", "PIPE", "CONCAT_PIPE", "HAT", "COLON", "ARROW", "HENT_START", 
			"HENT_END", "STRING", "DOUBLEQUOTED_STRING", "BIGINT_LITERAL", "SMALLINT_LITERAL", 
			"TINYINT_LITERAL", "INTEGER_VALUE", "EXPONENT_VALUE", "DECIMAL_VALUE", 
			"FLOAT_LITERAL", "DOUBLE_LITERAL", "BIGDECIMAL_LITERAL", "IDENTIFIER", 
			"BACKQUOTED_IDENTIFIER", "SIMPLE_COMMENT", "BRACKETED_COMMENT", "WS", 
			"UNRECOGNIZED"
		};
	}
	private static final String[] _SYMBOLIC_NAMES = makeSymbolicNames();
	public static final Vocabulary VOCABULARY = new VocabularyImpl(_LITERAL_NAMES, _SYMBOLIC_NAMES);

	/**
	 * @deprecated Use {@link #VOCABULARY} instead.
	 */
	@Deprecated
	public static final String[] tokenNames;
	static {
		tokenNames = new String[_SYMBOLIC_NAMES.length];
		for (int i = 0; i < tokenNames.length; i++) {
			tokenNames[i] = VOCABULARY.getLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = VOCABULARY.getSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}
	}

	@Override
	@Deprecated
	public String[] getTokenNames() {
		return tokenNames;
	}

	@Override

	public Vocabulary getVocabulary() {
		return VOCABULARY;
	}

	@Override
	public String getGrammarFileName() { return "SqlBaseParser.g4"; }

	@Override
	public String[] getRuleNames() { return ruleNames; }

	@Override
	public String getSerializedATN() { return _serializedATN; }

	@Override
	public ATN getATN() { return _ATN; }


	  /**
	   * When false, INTERSECT is given the greater precedence over the other set
	   * operations (UNION, EXCEPT and MINUS) as per the SQL standard.
	   */
	  public boolean legacy_setops_precedence_enabled = false;

	  /**
	   * When false, a literal with an exponent would be converted into
	   * double type rather than decimal type.
	   */
	  public boolean legacy_exponent_literal_as_decimal_enabled = false;

	  /**
	   * When true, the behavior of keywords follows ANSI SQL standard.
	   */
	  public boolean SQL_standard_keyword_behavior = false;

	  /**
	   * When true, double quoted literals are identifiers rather than STRINGs.
	   */
	  public boolean double_quoted_identifiers = false;

	public SqlBaseParser(TokenStream input) {
		super(input);
		_interp = new ParserATNSimulator(this,_ATN,_decisionToDFA,_sharedContextCache);
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SingleStatementContext extends ParserRuleContext {
		public StatementContext statement() {
			return getRuleContext(StatementContext.class,0);
		}
		public TerminalNode EOF() { return getToken(SqlBaseParser.EOF, 0); }
		public List<TerminalNode> SEMICOLON() { return getTokens(SqlBaseParser.SEMICOLON); }
		public TerminalNode SEMICOLON(int i) {
			return getToken(SqlBaseParser.SEMICOLON, i);
		}
		public SingleStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_singleStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterSingleStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitSingleStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitSingleStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SingleStatementContext singleStatement() throws RecognitionException {
		SingleStatementContext _localctx = new SingleStatementContext(_ctx, getState());
		enterRule(_localctx, 0, RULE_singleStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(364);
			statement();
			setState(368);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==SEMICOLON) {
				{
				{
				setState(365);
				match(SEMICOLON);
				}
				}
				setState(370);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(371);
			match(EOF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SingleExpressionContext extends ParserRuleContext {
		public NamedExpressionContext namedExpression() {
			return getRuleContext(NamedExpressionContext.class,0);
		}
		public TerminalNode EOF() { return getToken(SqlBaseParser.EOF, 0); }
		public SingleExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_singleExpression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterSingleExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitSingleExpression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitSingleExpression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SingleExpressionContext singleExpression() throws RecognitionException {
		SingleExpressionContext _localctx = new SingleExpressionContext(_ctx, getState());
		enterRule(_localctx, 2, RULE_singleExpression);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(373);
			namedExpression();
			setState(374);
			match(EOF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SingleTableIdentifierContext extends ParserRuleContext {
		public TableIdentifierContext tableIdentifier() {
			return getRuleContext(TableIdentifierContext.class,0);
		}
		public TerminalNode EOF() { return getToken(SqlBaseParser.EOF, 0); }
		public SingleTableIdentifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_singleTableIdentifier; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterSingleTableIdentifier(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitSingleTableIdentifier(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitSingleTableIdentifier(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SingleTableIdentifierContext singleTableIdentifier() throws RecognitionException {
		SingleTableIdentifierContext _localctx = new SingleTableIdentifierContext(_ctx, getState());
		enterRule(_localctx, 4, RULE_singleTableIdentifier);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(376);
			tableIdentifier();
			setState(377);
			match(EOF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SingleMultipartIdentifierContext extends ParserRuleContext {
		public MultipartIdentifierContext multipartIdentifier() {
			return getRuleContext(MultipartIdentifierContext.class,0);
		}
		public TerminalNode EOF() { return getToken(SqlBaseParser.EOF, 0); }
		public SingleMultipartIdentifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_singleMultipartIdentifier; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterSingleMultipartIdentifier(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitSingleMultipartIdentifier(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitSingleMultipartIdentifier(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SingleMultipartIdentifierContext singleMultipartIdentifier() throws RecognitionException {
		SingleMultipartIdentifierContext _localctx = new SingleMultipartIdentifierContext(_ctx, getState());
		enterRule(_localctx, 6, RULE_singleMultipartIdentifier);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(379);
			multipartIdentifier();
			setState(380);
			match(EOF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SingleFunctionIdentifierContext extends ParserRuleContext {
		public FunctionIdentifierContext functionIdentifier() {
			return getRuleContext(FunctionIdentifierContext.class,0);
		}
		public TerminalNode EOF() { return getToken(SqlBaseParser.EOF, 0); }
		public SingleFunctionIdentifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_singleFunctionIdentifier; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterSingleFunctionIdentifier(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitSingleFunctionIdentifier(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitSingleFunctionIdentifier(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SingleFunctionIdentifierContext singleFunctionIdentifier() throws RecognitionException {
		SingleFunctionIdentifierContext _localctx = new SingleFunctionIdentifierContext(_ctx, getState());
		enterRule(_localctx, 8, RULE_singleFunctionIdentifier);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(382);
			functionIdentifier();
			setState(383);
			match(EOF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SingleDataTypeContext extends ParserRuleContext {
		public DataTypeContext dataType() {
			return getRuleContext(DataTypeContext.class,0);
		}
		public TerminalNode EOF() { return getToken(SqlBaseParser.EOF, 0); }
		public SingleDataTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_singleDataType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterSingleDataType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitSingleDataType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitSingleDataType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SingleDataTypeContext singleDataType() throws RecognitionException {
		SingleDataTypeContext _localctx = new SingleDataTypeContext(_ctx, getState());
		enterRule(_localctx, 10, RULE_singleDataType);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(385);
			dataType();
			setState(386);
			match(EOF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SingleTableSchemaContext extends ParserRuleContext {
		public ColTypeListContext colTypeList() {
			return getRuleContext(ColTypeListContext.class,0);
		}
		public TerminalNode EOF() { return getToken(SqlBaseParser.EOF, 0); }
		public SingleTableSchemaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_singleTableSchema; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterSingleTableSchema(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitSingleTableSchema(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitSingleTableSchema(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SingleTableSchemaContext singleTableSchema() throws RecognitionException {
		SingleTableSchemaContext _localctx = new SingleTableSchemaContext(_ctx, getState());
		enterRule(_localctx, 12, RULE_singleTableSchema);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(388);
			colTypeList();
			setState(389);
			match(EOF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class StatementContext extends ParserRuleContext {
		public StatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_statement; }
	 
		public StatementContext() { }
		public void copyFrom(StatementContext ctx) {
			super.copyFrom(ctx);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class ExplainContext extends StatementContext {
		public TerminalNode EXPLAIN() { return getToken(SqlBaseParser.EXPLAIN, 0); }
		public StatementContext statement() {
			return getRuleContext(StatementContext.class,0);
		}
		public TerminalNode LOGICAL() { return getToken(SqlBaseParser.LOGICAL, 0); }
		public TerminalNode FORMATTED() { return getToken(SqlBaseParser.FORMATTED, 0); }
		public TerminalNode EXTENDED() { return getToken(SqlBaseParser.EXTENDED, 0); }
		public TerminalNode CODEGEN() { return getToken(SqlBaseParser.CODEGEN, 0); }
		public TerminalNode COST() { return getToken(SqlBaseParser.COST, 0); }
		public ExplainContext(StatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterExplain(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitExplain(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitExplain(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class ResetConfigurationContext extends StatementContext {
		public TerminalNode RESET() { return getToken(SqlBaseParser.RESET, 0); }
		public ResetConfigurationContext(StatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterResetConfiguration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitResetConfiguration(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitResetConfiguration(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class AlterViewQueryContext extends StatementContext {
		public TerminalNode ALTER() { return getToken(SqlBaseParser.ALTER, 0); }
		public TerminalNode VIEW() { return getToken(SqlBaseParser.VIEW, 0); }
		public MultipartIdentifierContext multipartIdentifier() {
			return getRuleContext(MultipartIdentifierContext.class,0);
		}
		public QueryContext query() {
			return getRuleContext(QueryContext.class,0);
		}
		public TerminalNode AS() { return getToken(SqlBaseParser.AS, 0); }
		public AlterViewQueryContext(StatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterAlterViewQuery(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitAlterViewQuery(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitAlterViewQuery(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class UseContext extends StatementContext {
		public TerminalNode USE() { return getToken(SqlBaseParser.USE, 0); }
		public MultipartIdentifierContext multipartIdentifier() {
			return getRuleContext(MultipartIdentifierContext.class,0);
		}
		public UseContext(StatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterUse(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitUse(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitUse(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class DropNamespaceContext extends StatementContext {
		public TerminalNode DROP() { return getToken(SqlBaseParser.DROP, 0); }
		public NamespaceContext namespace() {
			return getRuleContext(NamespaceContext.class,0);
		}
		public MultipartIdentifierContext multipartIdentifier() {
			return getRuleContext(MultipartIdentifierContext.class,0);
		}
		public TerminalNode IF() { return getToken(SqlBaseParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(SqlBaseParser.EXISTS, 0); }
		public TerminalNode RESTRICT() { return getToken(SqlBaseParser.RESTRICT, 0); }
		public TerminalNode CASCADE() { return getToken(SqlBaseParser.CASCADE, 0); }
		public DropNamespaceContext(StatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterDropNamespace(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitDropNamespace(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitDropNamespace(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class CreateTempViewUsingContext extends StatementContext {
		public TerminalNode CREATE() { return getToken(SqlBaseParser.CREATE, 0); }
		public TerminalNode TEMPORARY() { return getToken(SqlBaseParser.TEMPORARY, 0); }
		public TerminalNode VIEW() { return getToken(SqlBaseParser.VIEW, 0); }
		public TableIdentifierContext tableIdentifier() {
			return getRuleContext(TableIdentifierContext.class,0);
		}
		public TableProviderContext tableProvider() {
			return getRuleContext(TableProviderContext.class,0);
		}
		public TerminalNode OR() { return getToken(SqlBaseParser.OR, 0); }
		public TerminalNode REPLACE() { return getToken(SqlBaseParser.REPLACE, 0); }
		public TerminalNode GLOBAL() { return getToken(SqlBaseParser.GLOBAL, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(SqlBaseParser.LEFT_PAREN, 0); }
		public ColTypeListContext colTypeList() {
			return getRuleContext(ColTypeListContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(SqlBaseParser.RIGHT_PAREN, 0); }
		public TerminalNode OPTIONS() { return getToken(SqlBaseParser.OPTIONS, 0); }
		public PropertyListContext propertyList() {
			return getRuleContext(PropertyListContext.class,0);
		}
		public CreateTempViewUsingContext(StatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterCreateTempViewUsing(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitCreateTempViewUsing(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitCreateTempViewUsing(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class RenameTableContext extends StatementContext {
		public MultipartIdentifierContext from;
		public MultipartIdentifierContext to;
		public TerminalNode ALTER() { return getToken(SqlBaseParser.ALTER, 0); }
		public TerminalNode RENAME() { return getToken(SqlBaseParser.RENAME, 0); }
		public TerminalNode TO() { return getToken(SqlBaseParser.TO, 0); }
		public TerminalNode TABLE() { return getToken(SqlBaseParser.TABLE, 0); }
		public TerminalNode VIEW() { return getToken(SqlBaseParser.VIEW, 0); }
		public List<MultipartIdentifierContext> multipartIdentifier() {
			return getRuleContexts(MultipartIdentifierContext.class);
		}
		public MultipartIdentifierContext multipartIdentifier(int i) {
			return getRuleContext(MultipartIdentifierContext.class,i);
		}
		public RenameTableContext(StatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterRenameTable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitRenameTable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitRenameTable(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class FailNativeCommandContext extends StatementContext {
		public TerminalNode SET() { return getToken(SqlBaseParser.SET, 0); }
		public TerminalNode ROLE() { return getToken(SqlBaseParser.ROLE, 0); }
		public UnsupportedHiveNativeCommandsContext unsupportedHiveNativeCommands() {
			return getRuleContext(UnsupportedHiveNativeCommandsContext.class,0);
		}
		public FailNativeCommandContext(StatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterFailNativeCommand(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitFailNativeCommand(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitFailNativeCommand(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class SetCatalogContext extends StatementContext {
		public TerminalNode SET() { return getToken(SqlBaseParser.SET, 0); }
		public TerminalNode CATALOG() { return getToken(SqlBaseParser.CATALOG, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public StringLitContext stringLit() {
			return getRuleContext(StringLitContext.class,0);
		}
		public SetCatalogContext(StatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterSetCatalog(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitSetCatalog(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitSetCatalog(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class ClearCacheContext extends StatementContext {
		public TerminalNode CLEAR() { return getToken(SqlBaseParser.CLEAR, 0); }
		public TerminalNode CACHE() { return getToken(SqlBaseParser.CACHE, 0); }
		public ClearCacheContext(StatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterClearCache(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitClearCache(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitClearCache(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class DropViewContext extends StatementContext {
		public TerminalNode DROP() { return getToken(SqlBaseParser.DROP, 0); }
		public TerminalNode VIEW() { return getToken(SqlBaseParser.VIEW, 0); }
		public MultipartIdentifierContext multipartIdentifier() {
			return getRuleContext(MultipartIdentifierContext.class,0);
		}
		public TerminalNode IF() { return getToken(SqlBaseParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(SqlBaseParser.EXISTS, 0); }
		public DropViewContext(StatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterDropView(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitDropView(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitDropView(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class ShowTablesContext extends StatementContext {
		public StringLitContext pattern;
		public TerminalNode SHOW() { return getToken(SqlBaseParser.SHOW, 0); }
		public TerminalNode TABLES() { return getToken(SqlBaseParser.TABLES, 0); }
		public MultipartIdentifierContext multipartIdentifier() {
			return getRuleContext(MultipartIdentifierContext.class,0);
		}
		public TerminalNode FROM() { return getToken(SqlBaseParser.FROM, 0); }
		public TerminalNode IN() { return getToken(SqlBaseParser.IN, 0); }
		public StringLitContext stringLit() {
			return getRuleContext(StringLitContext.class,0);
		}
		public TerminalNode LIKE() { return getToken(SqlBaseParser.LIKE, 0); }
		public ShowTablesContext(StatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterShowTables(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitShowTables(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitShowTables(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class RecoverPartitionsContext extends StatementContext {
		public TerminalNode ALTER() { return getToken(SqlBaseParser.ALTER, 0); }
		public TerminalNode TABLE() { return getToken(SqlBaseParser.TABLE, 0); }
		public MultipartIdentifierContext multipartIdentifier() {
			return getRuleContext(MultipartIdentifierContext.class,0);
		}
		public TerminalNode RECOVER() { return getToken(SqlBaseParser.RECOVER, 0); }
		public TerminalNode PARTITIONS() { return getToken(SqlBaseParser.PARTITIONS, 0); }
		public RecoverPartitionsContext(StatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterRecoverPartitions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitRecoverPartitions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitRecoverPartitions(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class DropIndexContext extends StatementContext {
		public TerminalNode DROP() { return getToken(SqlBaseParser.DROP, 0); }
		public TerminalNode INDEX() { return getToken(SqlBaseParser.INDEX, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode ON() { return getToken(SqlBaseParser.ON, 0); }
		public MultipartIdentifierContext multipartIdentifier() {
			return getRuleContext(MultipartIdentifierContext.class,0);
		}
		public TerminalNode IF() { return getToken(SqlBaseParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(SqlBaseParser.EXISTS, 0); }
		public TerminalNode TABLE() { return getToken(SqlBaseParser.TABLE, 0); }
		public DropIndexContext(StatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterDropIndex(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitDropIndex(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitDropIndex(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class ShowCatalogsContext extends StatementContext {
		public StringLitContext pattern;
		public TerminalNode SHOW() { return getToken(SqlBaseParser.SHOW, 0); }
		public TerminalNode CATALOGS() { return getToken(SqlBaseParser.CATALOGS, 0); }
		public StringLitContext stringLit() {
			return getRuleContext(StringLitContext.class,0);
		}
		public TerminalNode LIKE() { return getToken(SqlBaseParser.LIKE, 0); }
		public ShowCatalogsContext(StatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterShowCatalogs(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitShowCatalogs(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitShowCatalogs(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class ShowCurrentNamespaceContext extends StatementContext {
		public TerminalNode SHOW() { return getToken(SqlBaseParser.SHOW, 0); }
		public TerminalNode CURRENT() { return getToken(SqlBaseParser.CURRENT, 0); }
		public NamespaceContext namespace() {
			return getRuleContext(NamespaceContext.class,0);
		}
		public ShowCurrentNamespaceContext(StatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterShowCurrentNamespace(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitShowCurrentNamespace(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitShowCurrentNamespace(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class RenameTablePartitionContext extends StatementContext {
		public PartitionSpecContext from;
		public PartitionSpecContext to;
		public TerminalNode ALTER() { return getToken(SqlBaseParser.ALTER, 0); }
		public TerminalNode TABLE() { return getToken(SqlBaseParser.TABLE, 0); }
		public MultipartIdentifierContext multipartIdentifier() {
			return getRuleContext(MultipartIdentifierContext.class,0);
		}
		public TerminalNode RENAME() { return getToken(SqlBaseParser.RENAME, 0); }
		public TerminalNode TO() { return getToken(SqlBaseParser.TO, 0); }
		public List<PartitionSpecContext> partitionSpec() {
			return getRuleContexts(PartitionSpecContext.class);
		}
		public PartitionSpecContext partitionSpec(int i) {
			return getRuleContext(PartitionSpecContext.class,i);
		}
		public RenameTablePartitionContext(StatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterRenameTablePartition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitRenameTablePartition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitRenameTablePartition(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class RepairTableContext extends StatementContext {
		public Token option;
		public TerminalNode REPAIR() { return getToken(SqlBaseParser.REPAIR, 0); }
		public TerminalNode TABLE() { return getToken(SqlBaseParser.TABLE, 0); }
		public MultipartIdentifierContext multipartIdentifier() {
			return getRuleContext(MultipartIdentifierContext.class,0);
		}
		public TerminalNode MSCK() { return getToken(SqlBaseParser.MSCK, 0); }
		public TerminalNode PARTITIONS() { return getToken(SqlBaseParser.PARTITIONS, 0); }
		public TerminalNode ADD() { return getToken(SqlBaseParser.ADD, 0); }
		public TerminalNode DROP() { return getToken(SqlBaseParser.DROP, 0); }
		public TerminalNode SYNC() { return getToken(SqlBaseParser.SYNC, 0); }
		public RepairTableContext(StatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterRepairTable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitRepairTable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitRepairTable(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class RefreshResourceContext extends StatementContext {
		public TerminalNode REFRESH() { return getToken(SqlBaseParser.REFRESH, 0); }
		public StringLitContext stringLit() {
			return getRuleContext(StringLitContext.class,0);
		}
		public RefreshResourceContext(StatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterRefreshResource(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitRefreshResource(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitRefreshResource(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class ShowCreateTableContext extends StatementContext {
		public TerminalNode SHOW() { return getToken(SqlBaseParser.SHOW, 0); }
		public TerminalNode CREATE() { return getToken(SqlBaseParser.CREATE, 0); }
		public TerminalNode TABLE() { return getToken(SqlBaseParser.TABLE, 0); }
		public MultipartIdentifierContext multipartIdentifier() {
			return getRuleContext(MultipartIdentifierContext.class,0);
		}
		public TerminalNode AS() { return getToken(SqlBaseParser.AS, 0); }
		public TerminalNode SERDE() { return getToken(SqlBaseParser.SERDE, 0); }
		public ShowCreateTableContext(StatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterShowCreateTable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitShowCreateTable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitShowCreateTable(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class ShowNamespacesContext extends StatementContext {
		public StringLitContext pattern;
		public TerminalNode SHOW() { return getToken(SqlBaseParser.SHOW, 0); }
		public NamespacesContext namespaces() {
			return getRuleContext(NamespacesContext.class,0);
		}
		public MultipartIdentifierContext multipartIdentifier() {
			return getRuleContext(MultipartIdentifierContext.class,0);
		}
		public TerminalNode FROM() { return getToken(SqlBaseParser.FROM, 0); }
		public TerminalNode IN() { return getToken(SqlBaseParser.IN, 0); }
		public StringLitContext stringLit() {
			return getRuleContext(StringLitContext.class,0);
		}
		public TerminalNode LIKE() { return getToken(SqlBaseParser.LIKE, 0); }
		public ShowNamespacesContext(StatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterShowNamespaces(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitShowNamespaces(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitShowNamespaces(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class ShowColumnsContext extends StatementContext {
		public MultipartIdentifierContext table;
		public MultipartIdentifierContext ns;
		public TerminalNode SHOW() { return getToken(SqlBaseParser.SHOW, 0); }
		public TerminalNode COLUMNS() { return getToken(SqlBaseParser.COLUMNS, 0); }
		public List<TerminalNode> FROM() { return getTokens(SqlBaseParser.FROM); }
		public TerminalNode FROM(int i) {
			return getToken(SqlBaseParser.FROM, i);
		}
		public List<TerminalNode> IN() { return getTokens(SqlBaseParser.IN); }
		public TerminalNode IN(int i) {
			return getToken(SqlBaseParser.IN, i);
		}
		public List<MultipartIdentifierContext> multipartIdentifier() {
			return getRuleContexts(MultipartIdentifierContext.class);
		}
		public MultipartIdentifierContext multipartIdentifier(int i) {
			return getRuleContext(MultipartIdentifierContext.class,i);
		}
		public ShowColumnsContext(StatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterShowColumns(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitShowColumns(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitShowColumns(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class ReplaceTableContext extends StatementContext {
		public ReplaceTableHeaderContext replaceTableHeader() {
			return getRuleContext(ReplaceTableHeaderContext.class,0);
		}
		public CreateTableClausesContext createTableClauses() {
			return getRuleContext(CreateTableClausesContext.class,0);
		}
		public TerminalNode LEFT_PAREN() { return getToken(SqlBaseParser.LEFT_PAREN, 0); }
		public CreateOrReplaceTableColTypeListContext createOrReplaceTableColTypeList() {
			return getRuleContext(CreateOrReplaceTableColTypeListContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(SqlBaseParser.RIGHT_PAREN, 0); }
		public TableProviderContext tableProvider() {
			return getRuleContext(TableProviderContext.class,0);
		}
		public QueryContext query() {
			return getRuleContext(QueryContext.class,0);
		}
		public TerminalNode AS() { return getToken(SqlBaseParser.AS, 0); }
		public ReplaceTableContext(StatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterReplaceTable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitReplaceTable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitReplaceTable(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class AnalyzeTablesContext extends StatementContext {
		public TerminalNode ANALYZE() { return getToken(SqlBaseParser.ANALYZE, 0); }
		public TerminalNode TABLES() { return getToken(SqlBaseParser.TABLES, 0); }
		public TerminalNode COMPUTE() { return getToken(SqlBaseParser.COMPUTE, 0); }
		public TerminalNode STATISTICS() { return getToken(SqlBaseParser.STATISTICS, 0); }
		public MultipartIdentifierContext multipartIdentifier() {
			return getRuleContext(MultipartIdentifierContext.class,0);
		}
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode FROM() { return getToken(SqlBaseParser.FROM, 0); }
		public TerminalNode IN() { return getToken(SqlBaseParser.IN, 0); }
		public AnalyzeTablesContext(StatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterAnalyzeTables(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitAnalyzeTables(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitAnalyzeTables(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class AddTablePartitionContext extends StatementContext {
		public TerminalNode ALTER() { return getToken(SqlBaseParser.ALTER, 0); }
		public MultipartIdentifierContext multipartIdentifier() {
			return getRuleContext(MultipartIdentifierContext.class,0);
		}
		public TerminalNode ADD() { return getToken(SqlBaseParser.ADD, 0); }
		public TerminalNode TABLE() { return getToken(SqlBaseParser.TABLE, 0); }
		public TerminalNode VIEW() { return getToken(SqlBaseParser.VIEW, 0); }
		public TerminalNode IF() { return getToken(SqlBaseParser.IF, 0); }
		public TerminalNode NOT() { return getToken(SqlBaseParser.NOT, 0); }
		public TerminalNode EXISTS() { return getToken(SqlBaseParser.EXISTS, 0); }
		public List<PartitionSpecLocationContext> partitionSpecLocation() {
			return getRuleContexts(PartitionSpecLocationContext.class);
		}
		public PartitionSpecLocationContext partitionSpecLocation(int i) {
			return getRuleContext(PartitionSpecLocationContext.class,i);
		}
		public AddTablePartitionContext(StatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterAddTablePartition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitAddTablePartition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitAddTablePartition(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class SetNamespaceLocationContext extends StatementContext {
		public TerminalNode ALTER() { return getToken(SqlBaseParser.ALTER, 0); }
		public NamespaceContext namespace() {
			return getRuleContext(NamespaceContext.class,0);
		}
		public MultipartIdentifierContext multipartIdentifier() {
			return getRuleContext(MultipartIdentifierContext.class,0);
		}
		public TerminalNode SET() { return getToken(SqlBaseParser.SET, 0); }
		public LocationSpecContext locationSpec() {
			return getRuleContext(LocationSpecContext.class,0);
		}
		public SetNamespaceLocationContext(StatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterSetNamespaceLocation(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitSetNamespaceLocation(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitSetNamespaceLocation(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class RefreshTableContext extends StatementContext {
		public TerminalNode REFRESH() { return getToken(SqlBaseParser.REFRESH, 0); }
		public TerminalNode TABLE() { return getToken(SqlBaseParser.TABLE, 0); }
		public MultipartIdentifierContext multipartIdentifier() {
			return getRuleContext(MultipartIdentifierContext.class,0);
		}
		public RefreshTableContext(StatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterRefreshTable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitRefreshTable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitRefreshTable(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class SetNamespacePropertiesContext extends StatementContext {
		public TerminalNode ALTER() { return getToken(SqlBaseParser.ALTER, 0); }
		public NamespaceContext namespace() {
			return getRuleContext(NamespaceContext.class,0);
		}
		public MultipartIdentifierContext multipartIdentifier() {
			return getRuleContext(MultipartIdentifierContext.class,0);
		}
		public TerminalNode SET() { return getToken(SqlBaseParser.SET, 0); }
		public PropertyListContext propertyList() {
			return getRuleContext(PropertyListContext.class,0);
		}
		public TerminalNode DBPROPERTIES() { return getToken(SqlBaseParser.DBPROPERTIES, 0); }
		public TerminalNode PROPERTIES() { return getToken(SqlBaseParser.PROPERTIES, 0); }
		public SetNamespacePropertiesContext(StatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterSetNamespaceProperties(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitSetNamespaceProperties(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitSetNamespaceProperties(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class ManageResourceContext extends StatementContext {
		public Token op;
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode ADD() { return getToken(SqlBaseParser.ADD, 0); }
		public TerminalNode LIST() { return getToken(SqlBaseParser.LIST, 0); }
		public ManageResourceContext(StatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterManageResource(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitManageResource(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitManageResource(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class SetQuotedConfigurationContext extends StatementContext {
		public TerminalNode SET() { return getToken(SqlBaseParser.SET, 0); }
		public ConfigKeyContext configKey() {
			return getRuleContext(ConfigKeyContext.class,0);
		}
		public TerminalNode EQ() { return getToken(SqlBaseParser.EQ, 0); }
		public ConfigValueContext configValue() {
			return getRuleContext(ConfigValueContext.class,0);
		}
		public SetQuotedConfigurationContext(StatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterSetQuotedConfiguration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitSetQuotedConfiguration(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitSetQuotedConfiguration(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class AnalyzeContext extends StatementContext {
		public TerminalNode ANALYZE() { return getToken(SqlBaseParser.ANALYZE, 0); }
		public TerminalNode TABLE() { return getToken(SqlBaseParser.TABLE, 0); }
		public MultipartIdentifierContext multipartIdentifier() {
			return getRuleContext(MultipartIdentifierContext.class,0);
		}
		public TerminalNode COMPUTE() { return getToken(SqlBaseParser.COMPUTE, 0); }
		public TerminalNode STATISTICS() { return getToken(SqlBaseParser.STATISTICS, 0); }
		public PartitionSpecContext partitionSpec() {
			return getRuleContext(PartitionSpecContext.class,0);
		}
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode FOR() { return getToken(SqlBaseParser.FOR, 0); }
		public TerminalNode COLUMNS() { return getToken(SqlBaseParser.COLUMNS, 0); }
		public IdentifierSeqContext identifierSeq() {
			return getRuleContext(IdentifierSeqContext.class,0);
		}
		public TerminalNode ALL() { return getToken(SqlBaseParser.ALL, 0); }
		public AnalyzeContext(StatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterAnalyze(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitAnalyze(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitAnalyze(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class CreateFunctionContext extends StatementContext {
		public StringLitContext className;
		public TerminalNode CREATE() { return getToken(SqlBaseParser.CREATE, 0); }
		public TerminalNode FUNCTION() { return getToken(SqlBaseParser.FUNCTION, 0); }
		public MultipartIdentifierContext multipartIdentifier() {
			return getRuleContext(MultipartIdentifierContext.class,0);
		}
		public TerminalNode AS() { return getToken(SqlBaseParser.AS, 0); }
		public StringLitContext stringLit() {
			return getRuleContext(StringLitContext.class,0);
		}
		public TerminalNode OR() { return getToken(SqlBaseParser.OR, 0); }
		public TerminalNode REPLACE() { return getToken(SqlBaseParser.REPLACE, 0); }
		public TerminalNode TEMPORARY() { return getToken(SqlBaseParser.TEMPORARY, 0); }
		public TerminalNode IF() { return getToken(SqlBaseParser.IF, 0); }
		public TerminalNode NOT() { return getToken(SqlBaseParser.NOT, 0); }
		public TerminalNode EXISTS() { return getToken(SqlBaseParser.EXISTS, 0); }
		public TerminalNode USING() { return getToken(SqlBaseParser.USING, 0); }
		public List<ResourceContext> resource() {
			return getRuleContexts(ResourceContext.class);
		}
		public ResourceContext resource(int i) {
			return getRuleContext(ResourceContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SqlBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SqlBaseParser.COMMA, i);
		}
		public CreateFunctionContext(StatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterCreateFunction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitCreateFunction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitCreateFunction(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class HiveReplaceColumnsContext extends StatementContext {
		public MultipartIdentifierContext table;
		public QualifiedColTypeWithPositionListContext columns;
		public TerminalNode ALTER() { return getToken(SqlBaseParser.ALTER, 0); }
		public TerminalNode TABLE() { return getToken(SqlBaseParser.TABLE, 0); }
		public TerminalNode REPLACE() { return getToken(SqlBaseParser.REPLACE, 0); }
		public TerminalNode COLUMNS() { return getToken(SqlBaseParser.COLUMNS, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(SqlBaseParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(SqlBaseParser.RIGHT_PAREN, 0); }
		public MultipartIdentifierContext multipartIdentifier() {
			return getRuleContext(MultipartIdentifierContext.class,0);
		}
		public QualifiedColTypeWithPositionListContext qualifiedColTypeWithPositionList() {
			return getRuleContext(QualifiedColTypeWithPositionListContext.class,0);
		}
		public PartitionSpecContext partitionSpec() {
			return getRuleContext(PartitionSpecContext.class,0);
		}
		public HiveReplaceColumnsContext(StatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterHiveReplaceColumns(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitHiveReplaceColumns(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitHiveReplaceColumns(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class CommentNamespaceContext extends StatementContext {
		public TerminalNode COMMENT() { return getToken(SqlBaseParser.COMMENT, 0); }
		public TerminalNode ON() { return getToken(SqlBaseParser.ON, 0); }
		public NamespaceContext namespace() {
			return getRuleContext(NamespaceContext.class,0);
		}
		public MultipartIdentifierContext multipartIdentifier() {
			return getRuleContext(MultipartIdentifierContext.class,0);
		}
		public TerminalNode IS() { return getToken(SqlBaseParser.IS, 0); }
		public CommentContext comment() {
			return getRuleContext(CommentContext.class,0);
		}
		public CommentNamespaceContext(StatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterCommentNamespace(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitCommentNamespace(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitCommentNamespace(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class ResetQuotedConfigurationContext extends StatementContext {
		public TerminalNode RESET() { return getToken(SqlBaseParser.RESET, 0); }
		public ConfigKeyContext configKey() {
			return getRuleContext(ConfigKeyContext.class,0);
		}
		public ResetQuotedConfigurationContext(StatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterResetQuotedConfiguration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitResetQuotedConfiguration(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitResetQuotedConfiguration(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class CreateTableContext extends StatementContext {
		public CreateTableHeaderContext createTableHeader() {
			return getRuleContext(CreateTableHeaderContext.class,0);
		}
		public CreateTableClausesContext createTableClauses() {
			return getRuleContext(CreateTableClausesContext.class,0);
		}
		public TerminalNode LEFT_PAREN() { return getToken(SqlBaseParser.LEFT_PAREN, 0); }
		public CreateOrReplaceTableColTypeListContext createOrReplaceTableColTypeList() {
			return getRuleContext(CreateOrReplaceTableColTypeListContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(SqlBaseParser.RIGHT_PAREN, 0); }
		public TableProviderContext tableProvider() {
			return getRuleContext(TableProviderContext.class,0);
		}
		public QueryContext query() {
			return getRuleContext(QueryContext.class,0);
		}
		public TerminalNode AS() { return getToken(SqlBaseParser.AS, 0); }
		public CreateTableContext(StatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterCreateTable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitCreateTable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitCreateTable(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class DmlStatementContext extends StatementContext {
		public DmlStatementNoWithContext dmlStatementNoWith() {
			return getRuleContext(DmlStatementNoWithContext.class,0);
		}
		public CtesContext ctes() {
			return getRuleContext(CtesContext.class,0);
		}
		public DmlStatementContext(StatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterDmlStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitDmlStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitDmlStatement(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class CreateTableLikeContext extends StatementContext {
		public TableIdentifierContext target;
		public TableIdentifierContext source;
		public PropertyListContext tableProps;
		public TerminalNode CREATE() { return getToken(SqlBaseParser.CREATE, 0); }
		public TerminalNode TABLE() { return getToken(SqlBaseParser.TABLE, 0); }
		public TerminalNode LIKE() { return getToken(SqlBaseParser.LIKE, 0); }
		public List<TableIdentifierContext> tableIdentifier() {
			return getRuleContexts(TableIdentifierContext.class);
		}
		public TableIdentifierContext tableIdentifier(int i) {
			return getRuleContext(TableIdentifierContext.class,i);
		}
		public TerminalNode IF() { return getToken(SqlBaseParser.IF, 0); }
		public TerminalNode NOT() { return getToken(SqlBaseParser.NOT, 0); }
		public TerminalNode EXISTS() { return getToken(SqlBaseParser.EXISTS, 0); }
		public List<TableProviderContext> tableProvider() {
			return getRuleContexts(TableProviderContext.class);
		}
		public TableProviderContext tableProvider(int i) {
			return getRuleContext(TableProviderContext.class,i);
		}
		public List<RowFormatContext> rowFormat() {
			return getRuleContexts(RowFormatContext.class);
		}
		public RowFormatContext rowFormat(int i) {
			return getRuleContext(RowFormatContext.class,i);
		}
		public List<CreateFileFormatContext> createFileFormat() {
			return getRuleContexts(CreateFileFormatContext.class);
		}
		public CreateFileFormatContext createFileFormat(int i) {
			return getRuleContext(CreateFileFormatContext.class,i);
		}
		public List<LocationSpecContext> locationSpec() {
			return getRuleContexts(LocationSpecContext.class);
		}
		public LocationSpecContext locationSpec(int i) {
			return getRuleContext(LocationSpecContext.class,i);
		}
		public List<TerminalNode> TBLPROPERTIES() { return getTokens(SqlBaseParser.TBLPROPERTIES); }
		public TerminalNode TBLPROPERTIES(int i) {
			return getToken(SqlBaseParser.TBLPROPERTIES, i);
		}
		public List<PropertyListContext> propertyList() {
			return getRuleContexts(PropertyListContext.class);
		}
		public PropertyListContext propertyList(int i) {
			return getRuleContext(PropertyListContext.class,i);
		}
		public CreateTableLikeContext(StatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterCreateTableLike(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitCreateTableLike(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitCreateTableLike(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class UncacheTableContext extends StatementContext {
		public TerminalNode UNCACHE() { return getToken(SqlBaseParser.UNCACHE, 0); }
		public TerminalNode TABLE() { return getToken(SqlBaseParser.TABLE, 0); }
		public MultipartIdentifierContext multipartIdentifier() {
			return getRuleContext(MultipartIdentifierContext.class,0);
		}
		public TerminalNode IF() { return getToken(SqlBaseParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(SqlBaseParser.EXISTS, 0); }
		public UncacheTableContext(StatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterUncacheTable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitUncacheTable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitUncacheTable(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class DropFunctionContext extends StatementContext {
		public TerminalNode DROP() { return getToken(SqlBaseParser.DROP, 0); }
		public TerminalNode FUNCTION() { return getToken(SqlBaseParser.FUNCTION, 0); }
		public MultipartIdentifierContext multipartIdentifier() {
			return getRuleContext(MultipartIdentifierContext.class,0);
		}
		public TerminalNode TEMPORARY() { return getToken(SqlBaseParser.TEMPORARY, 0); }
		public TerminalNode IF() { return getToken(SqlBaseParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(SqlBaseParser.EXISTS, 0); }
		public DropFunctionContext(StatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterDropFunction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitDropFunction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitDropFunction(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class DescribeRelationContext extends StatementContext {
		public Token option;
		public MultipartIdentifierContext multipartIdentifier() {
			return getRuleContext(MultipartIdentifierContext.class,0);
		}
		public TerminalNode DESC() { return getToken(SqlBaseParser.DESC, 0); }
		public TerminalNode DESCRIBE() { return getToken(SqlBaseParser.DESCRIBE, 0); }
		public TerminalNode TABLE() { return getToken(SqlBaseParser.TABLE, 0); }
		public PartitionSpecContext partitionSpec() {
			return getRuleContext(PartitionSpecContext.class,0);
		}
		public DescribeColNameContext describeColName() {
			return getRuleContext(DescribeColNameContext.class,0);
		}
		public TerminalNode EXTENDED() { return getToken(SqlBaseParser.EXTENDED, 0); }
		public TerminalNode FORMATTED() { return getToken(SqlBaseParser.FORMATTED, 0); }
		public DescribeRelationContext(StatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterDescribeRelation(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitDescribeRelation(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitDescribeRelation(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class LoadDataContext extends StatementContext {
		public StringLitContext path;
		public TerminalNode LOAD() { return getToken(SqlBaseParser.LOAD, 0); }
		public TerminalNode DATA() { return getToken(SqlBaseParser.DATA, 0); }
		public TerminalNode INPATH() { return getToken(SqlBaseParser.INPATH, 0); }
		public TerminalNode INTO() { return getToken(SqlBaseParser.INTO, 0); }
		public TerminalNode TABLE() { return getToken(SqlBaseParser.TABLE, 0); }
		public MultipartIdentifierContext multipartIdentifier() {
			return getRuleContext(MultipartIdentifierContext.class,0);
		}
		public StringLitContext stringLit() {
			return getRuleContext(StringLitContext.class,0);
		}
		public TerminalNode LOCAL() { return getToken(SqlBaseParser.LOCAL, 0); }
		public TerminalNode OVERWRITE() { return getToken(SqlBaseParser.OVERWRITE, 0); }
		public PartitionSpecContext partitionSpec() {
			return getRuleContext(PartitionSpecContext.class,0);
		}
		public LoadDataContext(StatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterLoadData(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitLoadData(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitLoadData(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class ShowPartitionsContext extends StatementContext {
		public TerminalNode SHOW() { return getToken(SqlBaseParser.SHOW, 0); }
		public TerminalNode PARTITIONS() { return getToken(SqlBaseParser.PARTITIONS, 0); }
		public MultipartIdentifierContext multipartIdentifier() {
			return getRuleContext(MultipartIdentifierContext.class,0);
		}
		public PartitionSpecContext partitionSpec() {
			return getRuleContext(PartitionSpecContext.class,0);
		}
		public ShowPartitionsContext(StatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterShowPartitions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitShowPartitions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitShowPartitions(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class DescribeFunctionContext extends StatementContext {
		public TerminalNode FUNCTION() { return getToken(SqlBaseParser.FUNCTION, 0); }
		public DescribeFuncNameContext describeFuncName() {
			return getRuleContext(DescribeFuncNameContext.class,0);
		}
		public TerminalNode DESC() { return getToken(SqlBaseParser.DESC, 0); }
		public TerminalNode DESCRIBE() { return getToken(SqlBaseParser.DESCRIBE, 0); }
		public TerminalNode EXTENDED() { return getToken(SqlBaseParser.EXTENDED, 0); }
		public DescribeFunctionContext(StatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterDescribeFunction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitDescribeFunction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitDescribeFunction(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class RenameTableColumnContext extends StatementContext {
		public MultipartIdentifierContext table;
		public MultipartIdentifierContext from;
		public ErrorCapturingIdentifierContext to;
		public TerminalNode ALTER() { return getToken(SqlBaseParser.ALTER, 0); }
		public TerminalNode TABLE() { return getToken(SqlBaseParser.TABLE, 0); }
		public TerminalNode RENAME() { return getToken(SqlBaseParser.RENAME, 0); }
		public TerminalNode COLUMN() { return getToken(SqlBaseParser.COLUMN, 0); }
		public TerminalNode TO() { return getToken(SqlBaseParser.TO, 0); }
		public List<MultipartIdentifierContext> multipartIdentifier() {
			return getRuleContexts(MultipartIdentifierContext.class);
		}
		public MultipartIdentifierContext multipartIdentifier(int i) {
			return getRuleContext(MultipartIdentifierContext.class,i);
		}
		public ErrorCapturingIdentifierContext errorCapturingIdentifier() {
			return getRuleContext(ErrorCapturingIdentifierContext.class,0);
		}
		public RenameTableColumnContext(StatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterRenameTableColumn(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitRenameTableColumn(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitRenameTableColumn(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class StatementDefaultContext extends StatementContext {
		public QueryContext query() {
			return getRuleContext(QueryContext.class,0);
		}
		public StatementDefaultContext(StatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterStatementDefault(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitStatementDefault(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitStatementDefault(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class HiveChangeColumnContext extends StatementContext {
		public MultipartIdentifierContext table;
		public MultipartIdentifierContext colName;
		public TerminalNode ALTER() { return getToken(SqlBaseParser.ALTER, 0); }
		public TerminalNode TABLE() { return getToken(SqlBaseParser.TABLE, 0); }
		public TerminalNode CHANGE() { return getToken(SqlBaseParser.CHANGE, 0); }
		public ColTypeContext colType() {
			return getRuleContext(ColTypeContext.class,0);
		}
		public List<MultipartIdentifierContext> multipartIdentifier() {
			return getRuleContexts(MultipartIdentifierContext.class);
		}
		public MultipartIdentifierContext multipartIdentifier(int i) {
			return getRuleContext(MultipartIdentifierContext.class,i);
		}
		public PartitionSpecContext partitionSpec() {
			return getRuleContext(PartitionSpecContext.class,0);
		}
		public TerminalNode COLUMN() { return getToken(SqlBaseParser.COLUMN, 0); }
		public ColPositionContext colPosition() {
			return getRuleContext(ColPositionContext.class,0);
		}
		public HiveChangeColumnContext(StatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterHiveChangeColumn(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitHiveChangeColumn(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitHiveChangeColumn(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class SetTimeZoneContext extends StatementContext {
		public TerminalNode SET() { return getToken(SqlBaseParser.SET, 0); }
		public TerminalNode TIME() { return getToken(SqlBaseParser.TIME, 0); }
		public TerminalNode ZONE() { return getToken(SqlBaseParser.ZONE, 0); }
		public IntervalContext interval() {
			return getRuleContext(IntervalContext.class,0);
		}
		public TimezoneContext timezone() {
			return getRuleContext(TimezoneContext.class,0);
		}
		public SetTimeZoneContext(StatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterSetTimeZone(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitSetTimeZone(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitSetTimeZone(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class DescribeQueryContext extends StatementContext {
		public QueryContext query() {
			return getRuleContext(QueryContext.class,0);
		}
		public TerminalNode DESC() { return getToken(SqlBaseParser.DESC, 0); }
		public TerminalNode DESCRIBE() { return getToken(SqlBaseParser.DESCRIBE, 0); }
		public TerminalNode QUERY() { return getToken(SqlBaseParser.QUERY, 0); }
		public DescribeQueryContext(StatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterDescribeQuery(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitDescribeQuery(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitDescribeQuery(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class TruncateTableContext extends StatementContext {
		public TerminalNode TRUNCATE() { return getToken(SqlBaseParser.TRUNCATE, 0); }
		public TerminalNode TABLE() { return getToken(SqlBaseParser.TABLE, 0); }
		public MultipartIdentifierContext multipartIdentifier() {
			return getRuleContext(MultipartIdentifierContext.class,0);
		}
		public PartitionSpecContext partitionSpec() {
			return getRuleContext(PartitionSpecContext.class,0);
		}
		public TruncateTableContext(StatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterTruncateTable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitTruncateTable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitTruncateTable(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class SetTableSerDeContext extends StatementContext {
		public TerminalNode ALTER() { return getToken(SqlBaseParser.ALTER, 0); }
		public TerminalNode TABLE() { return getToken(SqlBaseParser.TABLE, 0); }
		public MultipartIdentifierContext multipartIdentifier() {
			return getRuleContext(MultipartIdentifierContext.class,0);
		}
		public TerminalNode SET() { return getToken(SqlBaseParser.SET, 0); }
		public TerminalNode SERDE() { return getToken(SqlBaseParser.SERDE, 0); }
		public StringLitContext stringLit() {
			return getRuleContext(StringLitContext.class,0);
		}
		public PartitionSpecContext partitionSpec() {
			return getRuleContext(PartitionSpecContext.class,0);
		}
		public TerminalNode WITH() { return getToken(SqlBaseParser.WITH, 0); }
		public TerminalNode SERDEPROPERTIES() { return getToken(SqlBaseParser.SERDEPROPERTIES, 0); }
		public PropertyListContext propertyList() {
			return getRuleContext(PropertyListContext.class,0);
		}
		public SetTableSerDeContext(StatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterSetTableSerDe(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitSetTableSerDe(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitSetTableSerDe(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class CreateViewContext extends StatementContext {
		public TerminalNode CREATE() { return getToken(SqlBaseParser.CREATE, 0); }
		public TerminalNode VIEW() { return getToken(SqlBaseParser.VIEW, 0); }
		public MultipartIdentifierContext multipartIdentifier() {
			return getRuleContext(MultipartIdentifierContext.class,0);
		}
		public TerminalNode AS() { return getToken(SqlBaseParser.AS, 0); }
		public QueryContext query() {
			return getRuleContext(QueryContext.class,0);
		}
		public TerminalNode OR() { return getToken(SqlBaseParser.OR, 0); }
		public TerminalNode REPLACE() { return getToken(SqlBaseParser.REPLACE, 0); }
		public TerminalNode TEMPORARY() { return getToken(SqlBaseParser.TEMPORARY, 0); }
		public TerminalNode IF() { return getToken(SqlBaseParser.IF, 0); }
		public TerminalNode NOT() { return getToken(SqlBaseParser.NOT, 0); }
		public TerminalNode EXISTS() { return getToken(SqlBaseParser.EXISTS, 0); }
		public IdentifierCommentListContext identifierCommentList() {
			return getRuleContext(IdentifierCommentListContext.class,0);
		}
		public List<CommentSpecContext> commentSpec() {
			return getRuleContexts(CommentSpecContext.class);
		}
		public CommentSpecContext commentSpec(int i) {
			return getRuleContext(CommentSpecContext.class,i);
		}
		public List<TerminalNode> PARTITIONED() { return getTokens(SqlBaseParser.PARTITIONED); }
		public TerminalNode PARTITIONED(int i) {
			return getToken(SqlBaseParser.PARTITIONED, i);
		}
		public List<TerminalNode> ON() { return getTokens(SqlBaseParser.ON); }
		public TerminalNode ON(int i) {
			return getToken(SqlBaseParser.ON, i);
		}
		public List<IdentifierListContext> identifierList() {
			return getRuleContexts(IdentifierListContext.class);
		}
		public IdentifierListContext identifierList(int i) {
			return getRuleContext(IdentifierListContext.class,i);
		}
		public List<TerminalNode> TBLPROPERTIES() { return getTokens(SqlBaseParser.TBLPROPERTIES); }
		public TerminalNode TBLPROPERTIES(int i) {
			return getToken(SqlBaseParser.TBLPROPERTIES, i);
		}
		public List<PropertyListContext> propertyList() {
			return getRuleContexts(PropertyListContext.class);
		}
		public PropertyListContext propertyList(int i) {
			return getRuleContext(PropertyListContext.class,i);
		}
		public TerminalNode GLOBAL() { return getToken(SqlBaseParser.GLOBAL, 0); }
		public CreateViewContext(StatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterCreateView(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitCreateView(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitCreateView(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class DropTablePartitionsContext extends StatementContext {
		public TerminalNode ALTER() { return getToken(SqlBaseParser.ALTER, 0); }
		public MultipartIdentifierContext multipartIdentifier() {
			return getRuleContext(MultipartIdentifierContext.class,0);
		}
		public TerminalNode DROP() { return getToken(SqlBaseParser.DROP, 0); }
		public List<PartitionSpecContext> partitionSpec() {
			return getRuleContexts(PartitionSpecContext.class);
		}
		public PartitionSpecContext partitionSpec(int i) {
			return getRuleContext(PartitionSpecContext.class,i);
		}
		public TerminalNode TABLE() { return getToken(SqlBaseParser.TABLE, 0); }
		public TerminalNode VIEW() { return getToken(SqlBaseParser.VIEW, 0); }
		public TerminalNode IF() { return getToken(SqlBaseParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(SqlBaseParser.EXISTS, 0); }
		public List<TerminalNode> COMMA() { return getTokens(SqlBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SqlBaseParser.COMMA, i);
		}
		public TerminalNode PURGE() { return getToken(SqlBaseParser.PURGE, 0); }
		public DropTablePartitionsContext(StatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterDropTablePartitions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitDropTablePartitions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitDropTablePartitions(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class SetConfigurationContext extends StatementContext {
		public TerminalNode SET() { return getToken(SqlBaseParser.SET, 0); }
		public ConfigKeyContext configKey() {
			return getRuleContext(ConfigKeyContext.class,0);
		}
		public TerminalNode EQ() { return getToken(SqlBaseParser.EQ, 0); }
		public SetConfigurationContext(StatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterSetConfiguration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitSetConfiguration(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitSetConfiguration(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class DropTableContext extends StatementContext {
		public TerminalNode DROP() { return getToken(SqlBaseParser.DROP, 0); }
		public TerminalNode TABLE() { return getToken(SqlBaseParser.TABLE, 0); }
		public MultipartIdentifierContext multipartIdentifier() {
			return getRuleContext(MultipartIdentifierContext.class,0);
		}
		public TerminalNode IF() { return getToken(SqlBaseParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(SqlBaseParser.EXISTS, 0); }
		public TerminalNode PURGE() { return getToken(SqlBaseParser.PURGE, 0); }
		public DropTableContext(StatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterDropTable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitDropTable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitDropTable(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class ShowTableExtendedContext extends StatementContext {
		public MultipartIdentifierContext ns;
		public StringLitContext pattern;
		public TerminalNode SHOW() { return getToken(SqlBaseParser.SHOW, 0); }
		public TerminalNode TABLE() { return getToken(SqlBaseParser.TABLE, 0); }
		public TerminalNode EXTENDED() { return getToken(SqlBaseParser.EXTENDED, 0); }
		public TerminalNode LIKE() { return getToken(SqlBaseParser.LIKE, 0); }
		public StringLitContext stringLit() {
			return getRuleContext(StringLitContext.class,0);
		}
		public PartitionSpecContext partitionSpec() {
			return getRuleContext(PartitionSpecContext.class,0);
		}
		public TerminalNode FROM() { return getToken(SqlBaseParser.FROM, 0); }
		public TerminalNode IN() { return getToken(SqlBaseParser.IN, 0); }
		public MultipartIdentifierContext multipartIdentifier() {
			return getRuleContext(MultipartIdentifierContext.class,0);
		}
		public ShowTableExtendedContext(StatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterShowTableExtended(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitShowTableExtended(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitShowTableExtended(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class DescribeNamespaceContext extends StatementContext {
		public NamespaceContext namespace() {
			return getRuleContext(NamespaceContext.class,0);
		}
		public MultipartIdentifierContext multipartIdentifier() {
			return getRuleContext(MultipartIdentifierContext.class,0);
		}
		public TerminalNode DESC() { return getToken(SqlBaseParser.DESC, 0); }
		public TerminalNode DESCRIBE() { return getToken(SqlBaseParser.DESCRIBE, 0); }
		public TerminalNode EXTENDED() { return getToken(SqlBaseParser.EXTENDED, 0); }
		public DescribeNamespaceContext(StatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterDescribeNamespace(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitDescribeNamespace(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitDescribeNamespace(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class AlterTableAlterColumnContext extends StatementContext {
		public MultipartIdentifierContext table;
		public MultipartIdentifierContext column;
		public List<TerminalNode> ALTER() { return getTokens(SqlBaseParser.ALTER); }
		public TerminalNode ALTER(int i) {
			return getToken(SqlBaseParser.ALTER, i);
		}
		public TerminalNode TABLE() { return getToken(SqlBaseParser.TABLE, 0); }
		public List<MultipartIdentifierContext> multipartIdentifier() {
			return getRuleContexts(MultipartIdentifierContext.class);
		}
		public MultipartIdentifierContext multipartIdentifier(int i) {
			return getRuleContext(MultipartIdentifierContext.class,i);
		}
		public TerminalNode CHANGE() { return getToken(SqlBaseParser.CHANGE, 0); }
		public TerminalNode COLUMN() { return getToken(SqlBaseParser.COLUMN, 0); }
		public AlterColumnActionContext alterColumnAction() {
			return getRuleContext(AlterColumnActionContext.class,0);
		}
		public AlterTableAlterColumnContext(StatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterAlterTableAlterColumn(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitAlterTableAlterColumn(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitAlterTableAlterColumn(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class RefreshFunctionContext extends StatementContext {
		public TerminalNode REFRESH() { return getToken(SqlBaseParser.REFRESH, 0); }
		public TerminalNode FUNCTION() { return getToken(SqlBaseParser.FUNCTION, 0); }
		public MultipartIdentifierContext multipartIdentifier() {
			return getRuleContext(MultipartIdentifierContext.class,0);
		}
		public RefreshFunctionContext(StatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterRefreshFunction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitRefreshFunction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitRefreshFunction(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class CommentTableContext extends StatementContext {
		public TerminalNode COMMENT() { return getToken(SqlBaseParser.COMMENT, 0); }
		public TerminalNode ON() { return getToken(SqlBaseParser.ON, 0); }
		public TerminalNode TABLE() { return getToken(SqlBaseParser.TABLE, 0); }
		public MultipartIdentifierContext multipartIdentifier() {
			return getRuleContext(MultipartIdentifierContext.class,0);
		}
		public TerminalNode IS() { return getToken(SqlBaseParser.IS, 0); }
		public CommentContext comment() {
			return getRuleContext(CommentContext.class,0);
		}
		public CommentTableContext(StatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterCommentTable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitCommentTable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitCommentTable(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class CreateIndexContext extends StatementContext {
		public IdentifierContext indexType;
		public MultipartIdentifierPropertyListContext columns;
		public PropertyListContext options;
		public TerminalNode CREATE() { return getToken(SqlBaseParser.CREATE, 0); }
		public TerminalNode INDEX() { return getToken(SqlBaseParser.INDEX, 0); }
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public TerminalNode ON() { return getToken(SqlBaseParser.ON, 0); }
		public MultipartIdentifierContext multipartIdentifier() {
			return getRuleContext(MultipartIdentifierContext.class,0);
		}
		public TerminalNode LEFT_PAREN() { return getToken(SqlBaseParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(SqlBaseParser.RIGHT_PAREN, 0); }
		public MultipartIdentifierPropertyListContext multipartIdentifierPropertyList() {
			return getRuleContext(MultipartIdentifierPropertyListContext.class,0);
		}
		public TerminalNode IF() { return getToken(SqlBaseParser.IF, 0); }
		public TerminalNode NOT() { return getToken(SqlBaseParser.NOT, 0); }
		public TerminalNode EXISTS() { return getToken(SqlBaseParser.EXISTS, 0); }
		public TerminalNode TABLE() { return getToken(SqlBaseParser.TABLE, 0); }
		public TerminalNode USING() { return getToken(SqlBaseParser.USING, 0); }
		public TerminalNode OPTIONS() { return getToken(SqlBaseParser.OPTIONS, 0); }
		public PropertyListContext propertyList() {
			return getRuleContext(PropertyListContext.class,0);
		}
		public CreateIndexContext(StatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterCreateIndex(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitCreateIndex(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitCreateIndex(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class UseNamespaceContext extends StatementContext {
		public TerminalNode USE() { return getToken(SqlBaseParser.USE, 0); }
		public NamespaceContext namespace() {
			return getRuleContext(NamespaceContext.class,0);
		}
		public MultipartIdentifierContext multipartIdentifier() {
			return getRuleContext(MultipartIdentifierContext.class,0);
		}
		public UseNamespaceContext(StatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterUseNamespace(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitUseNamespace(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitUseNamespace(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class CreateNamespaceContext extends StatementContext {
		public TerminalNode CREATE() { return getToken(SqlBaseParser.CREATE, 0); }
		public NamespaceContext namespace() {
			return getRuleContext(NamespaceContext.class,0);
		}
		public MultipartIdentifierContext multipartIdentifier() {
			return getRuleContext(MultipartIdentifierContext.class,0);
		}
		public TerminalNode IF() { return getToken(SqlBaseParser.IF, 0); }
		public TerminalNode NOT() { return getToken(SqlBaseParser.NOT, 0); }
		public TerminalNode EXISTS() { return getToken(SqlBaseParser.EXISTS, 0); }
		public List<CommentSpecContext> commentSpec() {
			return getRuleContexts(CommentSpecContext.class);
		}
		public CommentSpecContext commentSpec(int i) {
			return getRuleContext(CommentSpecContext.class,i);
		}
		public List<LocationSpecContext> locationSpec() {
			return getRuleContexts(LocationSpecContext.class);
		}
		public LocationSpecContext locationSpec(int i) {
			return getRuleContext(LocationSpecContext.class,i);
		}
		public List<TerminalNode> WITH() { return getTokens(SqlBaseParser.WITH); }
		public TerminalNode WITH(int i) {
			return getToken(SqlBaseParser.WITH, i);
		}
		public List<PropertyListContext> propertyList() {
			return getRuleContexts(PropertyListContext.class);
		}
		public PropertyListContext propertyList(int i) {
			return getRuleContext(PropertyListContext.class,i);
		}
		public List<TerminalNode> DBPROPERTIES() { return getTokens(SqlBaseParser.DBPROPERTIES); }
		public TerminalNode DBPROPERTIES(int i) {
			return getToken(SqlBaseParser.DBPROPERTIES, i);
		}
		public List<TerminalNode> PROPERTIES() { return getTokens(SqlBaseParser.PROPERTIES); }
		public TerminalNode PROPERTIES(int i) {
			return getToken(SqlBaseParser.PROPERTIES, i);
		}
		public CreateNamespaceContext(StatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterCreateNamespace(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitCreateNamespace(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitCreateNamespace(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class ShowTblPropertiesContext extends StatementContext {
		public MultipartIdentifierContext table;
		public PropertyKeyContext key;
		public TerminalNode SHOW() { return getToken(SqlBaseParser.SHOW, 0); }
		public TerminalNode TBLPROPERTIES() { return getToken(SqlBaseParser.TBLPROPERTIES, 0); }
		public MultipartIdentifierContext multipartIdentifier() {
			return getRuleContext(MultipartIdentifierContext.class,0);
		}
		public TerminalNode LEFT_PAREN() { return getToken(SqlBaseParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(SqlBaseParser.RIGHT_PAREN, 0); }
		public PropertyKeyContext propertyKey() {
			return getRuleContext(PropertyKeyContext.class,0);
		}
		public ShowTblPropertiesContext(StatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterShowTblProperties(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitShowTblProperties(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitShowTblProperties(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class UnsetTablePropertiesContext extends StatementContext {
		public TerminalNode ALTER() { return getToken(SqlBaseParser.ALTER, 0); }
		public MultipartIdentifierContext multipartIdentifier() {
			return getRuleContext(MultipartIdentifierContext.class,0);
		}
		public TerminalNode UNSET() { return getToken(SqlBaseParser.UNSET, 0); }
		public TerminalNode TBLPROPERTIES() { return getToken(SqlBaseParser.TBLPROPERTIES, 0); }
		public PropertyListContext propertyList() {
			return getRuleContext(PropertyListContext.class,0);
		}
		public TerminalNode TABLE() { return getToken(SqlBaseParser.TABLE, 0); }
		public TerminalNode VIEW() { return getToken(SqlBaseParser.VIEW, 0); }
		public TerminalNode IF() { return getToken(SqlBaseParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(SqlBaseParser.EXISTS, 0); }
		public UnsetTablePropertiesContext(StatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterUnsetTableProperties(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitUnsetTableProperties(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitUnsetTableProperties(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class SetTableLocationContext extends StatementContext {
		public TerminalNode ALTER() { return getToken(SqlBaseParser.ALTER, 0); }
		public TerminalNode TABLE() { return getToken(SqlBaseParser.TABLE, 0); }
		public MultipartIdentifierContext multipartIdentifier() {
			return getRuleContext(MultipartIdentifierContext.class,0);
		}
		public TerminalNode SET() { return getToken(SqlBaseParser.SET, 0); }
		public LocationSpecContext locationSpec() {
			return getRuleContext(LocationSpecContext.class,0);
		}
		public PartitionSpecContext partitionSpec() {
			return getRuleContext(PartitionSpecContext.class,0);
		}
		public SetTableLocationContext(StatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterSetTableLocation(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitSetTableLocation(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitSetTableLocation(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class DropTableColumnsContext extends StatementContext {
		public MultipartIdentifierListContext columns;
		public TerminalNode ALTER() { return getToken(SqlBaseParser.ALTER, 0); }
		public TerminalNode TABLE() { return getToken(SqlBaseParser.TABLE, 0); }
		public MultipartIdentifierContext multipartIdentifier() {
			return getRuleContext(MultipartIdentifierContext.class,0);
		}
		public TerminalNode DROP() { return getToken(SqlBaseParser.DROP, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(SqlBaseParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(SqlBaseParser.RIGHT_PAREN, 0); }
		public TerminalNode COLUMN() { return getToken(SqlBaseParser.COLUMN, 0); }
		public TerminalNode COLUMNS() { return getToken(SqlBaseParser.COLUMNS, 0); }
		public MultipartIdentifierListContext multipartIdentifierList() {
			return getRuleContext(MultipartIdentifierListContext.class,0);
		}
		public TerminalNode IF() { return getToken(SqlBaseParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(SqlBaseParser.EXISTS, 0); }
		public DropTableColumnsContext(StatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterDropTableColumns(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitDropTableColumns(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitDropTableColumns(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class ShowViewsContext extends StatementContext {
		public StringLitContext pattern;
		public TerminalNode SHOW() { return getToken(SqlBaseParser.SHOW, 0); }
		public TerminalNode VIEWS() { return getToken(SqlBaseParser.VIEWS, 0); }
		public MultipartIdentifierContext multipartIdentifier() {
			return getRuleContext(MultipartIdentifierContext.class,0);
		}
		public TerminalNode FROM() { return getToken(SqlBaseParser.FROM, 0); }
		public TerminalNode IN() { return getToken(SqlBaseParser.IN, 0); }
		public StringLitContext stringLit() {
			return getRuleContext(StringLitContext.class,0);
		}
		public TerminalNode LIKE() { return getToken(SqlBaseParser.LIKE, 0); }
		public ShowViewsContext(StatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterShowViews(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitShowViews(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitShowViews(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class ShowFunctionsContext extends StatementContext {
		public MultipartIdentifierContext ns;
		public MultipartIdentifierContext legacy;
		public StringLitContext pattern;
		public TerminalNode SHOW() { return getToken(SqlBaseParser.SHOW, 0); }
		public TerminalNode FUNCTIONS() { return getToken(SqlBaseParser.FUNCTIONS, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode FROM() { return getToken(SqlBaseParser.FROM, 0); }
		public TerminalNode IN() { return getToken(SqlBaseParser.IN, 0); }
		public List<MultipartIdentifierContext> multipartIdentifier() {
			return getRuleContexts(MultipartIdentifierContext.class);
		}
		public MultipartIdentifierContext multipartIdentifier(int i) {
			return getRuleContext(MultipartIdentifierContext.class,i);
		}
		public TerminalNode LIKE() { return getToken(SqlBaseParser.LIKE, 0); }
		public StringLitContext stringLit() {
			return getRuleContext(StringLitContext.class,0);
		}
		public ShowFunctionsContext(StatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterShowFunctions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitShowFunctions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitShowFunctions(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class CacheTableContext extends StatementContext {
		public PropertyListContext options;
		public TerminalNode CACHE() { return getToken(SqlBaseParser.CACHE, 0); }
		public TerminalNode TABLE() { return getToken(SqlBaseParser.TABLE, 0); }
		public MultipartIdentifierContext multipartIdentifier() {
			return getRuleContext(MultipartIdentifierContext.class,0);
		}
		public TerminalNode LAZY() { return getToken(SqlBaseParser.LAZY, 0); }
		public TerminalNode OPTIONS() { return getToken(SqlBaseParser.OPTIONS, 0); }
		public QueryContext query() {
			return getRuleContext(QueryContext.class,0);
		}
		public PropertyListContext propertyList() {
			return getRuleContext(PropertyListContext.class,0);
		}
		public TerminalNode AS() { return getToken(SqlBaseParser.AS, 0); }
		public CacheTableContext(StatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterCacheTable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitCacheTable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitCacheTable(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class AddTableColumnsContext extends StatementContext {
		public QualifiedColTypeWithPositionListContext columns;
		public TerminalNode ALTER() { return getToken(SqlBaseParser.ALTER, 0); }
		public TerminalNode TABLE() { return getToken(SqlBaseParser.TABLE, 0); }
		public MultipartIdentifierContext multipartIdentifier() {
			return getRuleContext(MultipartIdentifierContext.class,0);
		}
		public TerminalNode ADD() { return getToken(SqlBaseParser.ADD, 0); }
		public TerminalNode COLUMN() { return getToken(SqlBaseParser.COLUMN, 0); }
		public TerminalNode COLUMNS() { return getToken(SqlBaseParser.COLUMNS, 0); }
		public QualifiedColTypeWithPositionListContext qualifiedColTypeWithPositionList() {
			return getRuleContext(QualifiedColTypeWithPositionListContext.class,0);
		}
		public TerminalNode LEFT_PAREN() { return getToken(SqlBaseParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(SqlBaseParser.RIGHT_PAREN, 0); }
		public AddTableColumnsContext(StatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterAddTableColumns(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitAddTableColumns(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitAddTableColumns(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class SetTablePropertiesContext extends StatementContext {
		public TerminalNode ALTER() { return getToken(SqlBaseParser.ALTER, 0); }
		public MultipartIdentifierContext multipartIdentifier() {
			return getRuleContext(MultipartIdentifierContext.class,0);
		}
		public TerminalNode SET() { return getToken(SqlBaseParser.SET, 0); }
		public TerminalNode TBLPROPERTIES() { return getToken(SqlBaseParser.TBLPROPERTIES, 0); }
		public PropertyListContext propertyList() {
			return getRuleContext(PropertyListContext.class,0);
		}
		public TerminalNode TABLE() { return getToken(SqlBaseParser.TABLE, 0); }
		public TerminalNode VIEW() { return getToken(SqlBaseParser.VIEW, 0); }
		public SetTablePropertiesContext(StatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterSetTableProperties(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitSetTableProperties(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitSetTableProperties(this);
			else return visitor.visitChildren(this);
		}
	}

	public final StatementContext statement() throws RecognitionException {
		StatementContext _localctx = new StatementContext(_ctx, getState());
		enterRule(_localctx, 14, RULE_statement);
		int _la;
		try {
			int _alt;
			setState(1194);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,121,_ctx) ) {
			case 1:
				_localctx = new StatementDefaultContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(391);
				query();
				}
				break;
			case 2:
				_localctx = new DmlStatementContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(393);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(392);
					ctes();
					}
				}

				setState(395);
				dmlStatementNoWith();
				}
				break;
			case 3:
				_localctx = new UseContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(396);
				match(USE);
				setState(397);
				multipartIdentifier();
				}
				break;
			case 4:
				_localctx = new UseNamespaceContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(398);
				match(USE);
				setState(399);
				namespace();
				setState(400);
				multipartIdentifier();
				}
				break;
			case 5:
				_localctx = new SetCatalogContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(402);
				match(SET);
				setState(403);
				match(CATALOG);
				setState(406);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,2,_ctx) ) {
				case 1:
					{
					setState(404);
					identifier();
					}
					break;
				case 2:
					{
					setState(405);
					stringLit();
					}
					break;
				}
				}
				break;
			case 6:
				_localctx = new CreateNamespaceContext(_localctx);
				enterOuterAlt(_localctx, 6);
				{
				setState(408);
				match(CREATE);
				setState(409);
				namespace();
				setState(413);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,3,_ctx) ) {
				case 1:
					{
					setState(410);
					match(IF);
					setState(411);
					match(NOT);
					setState(412);
					match(EXISTS);
					}
					break;
				}
				setState(415);
				multipartIdentifier();
				setState(423);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMENT || _la==LOCATION || _la==WITH) {
					{
					setState(421);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case COMMENT:
						{
						setState(416);
						commentSpec();
						}
						break;
					case LOCATION:
						{
						setState(417);
						locationSpec();
						}
						break;
					case WITH:
						{
						{
						setState(418);
						match(WITH);
						setState(419);
						_la = _input.LA(1);
						if ( !(_la==DBPROPERTIES || _la==PROPERTIES) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						setState(420);
						propertyList();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					setState(425);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 7:
				_localctx = new SetNamespacePropertiesContext(_localctx);
				enterOuterAlt(_localctx, 7);
				{
				setState(426);
				match(ALTER);
				setState(427);
				namespace();
				setState(428);
				multipartIdentifier();
				setState(429);
				match(SET);
				setState(430);
				_la = _input.LA(1);
				if ( !(_la==DBPROPERTIES || _la==PROPERTIES) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(431);
				propertyList();
				}
				break;
			case 8:
				_localctx = new SetNamespaceLocationContext(_localctx);
				enterOuterAlt(_localctx, 8);
				{
				setState(433);
				match(ALTER);
				setState(434);
				namespace();
				setState(435);
				multipartIdentifier();
				setState(436);
				match(SET);
				setState(437);
				locationSpec();
				}
				break;
			case 9:
				_localctx = new DropNamespaceContext(_localctx);
				enterOuterAlt(_localctx, 9);
				{
				setState(439);
				match(DROP);
				setState(440);
				namespace();
				setState(443);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,6,_ctx) ) {
				case 1:
					{
					setState(441);
					match(IF);
					setState(442);
					match(EXISTS);
					}
					break;
				}
				setState(445);
				multipartIdentifier();
				setState(447);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CASCADE || _la==RESTRICT) {
					{
					setState(446);
					_la = _input.LA(1);
					if ( !(_la==CASCADE || _la==RESTRICT) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				}
				break;
			case 10:
				_localctx = new ShowNamespacesContext(_localctx);
				enterOuterAlt(_localctx, 10);
				{
				setState(449);
				match(SHOW);
				setState(450);
				namespaces();
				setState(453);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,8,_ctx) ) {
				case 1:
					{
					setState(451);
					_la = _input.LA(1);
					if ( !(_la==FROM || _la==IN) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(452);
					multipartIdentifier();
					}
					break;
				}
				setState(459);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,10,_ctx) ) {
				case 1:
					{
					setState(456);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,9,_ctx) ) {
					case 1:
						{
						setState(455);
						match(LIKE);
						}
						break;
					}
					setState(458);
					((ShowNamespacesContext)_localctx).pattern = stringLit();
					}
					break;
				}
				}
				break;
			case 11:
				_localctx = new CreateTableContext(_localctx);
				enterOuterAlt(_localctx, 11);
				{
				setState(461);
				createTableHeader();
				setState(466);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,11,_ctx) ) {
				case 1:
					{
					setState(462);
					match(LEFT_PAREN);
					setState(463);
					createOrReplaceTableColTypeList();
					setState(464);
					match(RIGHT_PAREN);
					}
					break;
				}
				setState(469);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==USING) {
					{
					setState(468);
					tableProvider();
					}
				}

				setState(471);
				createTableClauses();
				setState(476);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LEFT_PAREN || _la==AS || _la==FROM || _la==MAP || ((((_la - 216)) & ~0x3f) == 0 && ((1L << (_la - 216)) & 281474985099265L) != 0) || _la==VALUES || _la==WITH) {
					{
					setState(473);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==AS) {
						{
						setState(472);
						match(AS);
						}
					}

					setState(475);
					query();
					}
				}

				}
				break;
			case 12:
				_localctx = new CreateTableLikeContext(_localctx);
				enterOuterAlt(_localctx, 12);
				{
				setState(478);
				match(CREATE);
				setState(479);
				match(TABLE);
				setState(483);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,15,_ctx) ) {
				case 1:
					{
					setState(480);
					match(IF);
					setState(481);
					match(NOT);
					setState(482);
					match(EXISTS);
					}
					break;
				}
				setState(485);
				((CreateTableLikeContext)_localctx).target = tableIdentifier();
				setState(486);
				match(LIKE);
				setState(487);
				((CreateTableLikeContext)_localctx).source = tableIdentifier();
				setState(496);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==LOCATION || ((((_la - 233)) & ~0x3f) == 0 && ((1L << (_la - 233)) & 34368126977L) != 0) || _la==USING) {
					{
					setState(494);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case USING:
						{
						setState(488);
						tableProvider();
						}
						break;
					case ROW:
						{
						setState(489);
						rowFormat();
						}
						break;
					case STORED:
						{
						setState(490);
						createFileFormat();
						}
						break;
					case LOCATION:
						{
						setState(491);
						locationSpec();
						}
						break;
					case TBLPROPERTIES:
						{
						{
						setState(492);
						match(TBLPROPERTIES);
						setState(493);
						((CreateTableLikeContext)_localctx).tableProps = propertyList();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					setState(498);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 13:
				_localctx = new ReplaceTableContext(_localctx);
				enterOuterAlt(_localctx, 13);
				{
				setState(499);
				replaceTableHeader();
				setState(504);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,18,_ctx) ) {
				case 1:
					{
					setState(500);
					match(LEFT_PAREN);
					setState(501);
					createOrReplaceTableColTypeList();
					setState(502);
					match(RIGHT_PAREN);
					}
					break;
				}
				setState(507);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==USING) {
					{
					setState(506);
					tableProvider();
					}
				}

				setState(509);
				createTableClauses();
				setState(514);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LEFT_PAREN || _la==AS || _la==FROM || _la==MAP || ((((_la - 216)) & ~0x3f) == 0 && ((1L << (_la - 216)) & 281474985099265L) != 0) || _la==VALUES || _la==WITH) {
					{
					setState(511);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==AS) {
						{
						setState(510);
						match(AS);
						}
					}

					setState(513);
					query();
					}
				}

				}
				break;
			case 14:
				_localctx = new AnalyzeContext(_localctx);
				enterOuterAlt(_localctx, 14);
				{
				setState(516);
				match(ANALYZE);
				setState(517);
				match(TABLE);
				setState(518);
				multipartIdentifier();
				setState(520);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PARTITION) {
					{
					setState(519);
					partitionSpec();
					}
				}

				setState(522);
				match(COMPUTE);
				setState(523);
				match(STATISTICS);
				setState(531);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,23,_ctx) ) {
				case 1:
					{
					setState(524);
					identifier();
					}
					break;
				case 2:
					{
					setState(525);
					match(FOR);
					setState(526);
					match(COLUMNS);
					setState(527);
					identifierSeq();
					}
					break;
				case 3:
					{
					setState(528);
					match(FOR);
					setState(529);
					match(ALL);
					setState(530);
					match(COLUMNS);
					}
					break;
				}
				}
				break;
			case 15:
				_localctx = new AnalyzeTablesContext(_localctx);
				enterOuterAlt(_localctx, 15);
				{
				setState(533);
				match(ANALYZE);
				setState(534);
				match(TABLES);
				setState(537);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FROM || _la==IN) {
					{
					setState(535);
					_la = _input.LA(1);
					if ( !(_la==FROM || _la==IN) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(536);
					multipartIdentifier();
					}
				}

				setState(539);
				match(COMPUTE);
				setState(540);
				match(STATISTICS);
				setState(542);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,25,_ctx) ) {
				case 1:
					{
					setState(541);
					identifier();
					}
					break;
				}
				}
				break;
			case 16:
				_localctx = new AddTableColumnsContext(_localctx);
				enterOuterAlt(_localctx, 16);
				{
				setState(544);
				match(ALTER);
				setState(545);
				match(TABLE);
				setState(546);
				multipartIdentifier();
				setState(547);
				match(ADD);
				setState(548);
				_la = _input.LA(1);
				if ( !(_la==COLUMN || _la==COLUMNS) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(549);
				((AddTableColumnsContext)_localctx).columns = qualifiedColTypeWithPositionList();
				}
				break;
			case 17:
				_localctx = new AddTableColumnsContext(_localctx);
				enterOuterAlt(_localctx, 17);
				{
				setState(551);
				match(ALTER);
				setState(552);
				match(TABLE);
				setState(553);
				multipartIdentifier();
				setState(554);
				match(ADD);
				setState(555);
				_la = _input.LA(1);
				if ( !(_la==COLUMN || _la==COLUMNS) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(556);
				match(LEFT_PAREN);
				setState(557);
				((AddTableColumnsContext)_localctx).columns = qualifiedColTypeWithPositionList();
				setState(558);
				match(RIGHT_PAREN);
				}
				break;
			case 18:
				_localctx = new RenameTableColumnContext(_localctx);
				enterOuterAlt(_localctx, 18);
				{
				setState(560);
				match(ALTER);
				setState(561);
				match(TABLE);
				setState(562);
				((RenameTableColumnContext)_localctx).table = multipartIdentifier();
				setState(563);
				match(RENAME);
				setState(564);
				match(COLUMN);
				setState(565);
				((RenameTableColumnContext)_localctx).from = multipartIdentifier();
				setState(566);
				match(TO);
				setState(567);
				((RenameTableColumnContext)_localctx).to = errorCapturingIdentifier();
				}
				break;
			case 19:
				_localctx = new DropTableColumnsContext(_localctx);
				enterOuterAlt(_localctx, 19);
				{
				setState(569);
				match(ALTER);
				setState(570);
				match(TABLE);
				setState(571);
				multipartIdentifier();
				setState(572);
				match(DROP);
				setState(573);
				_la = _input.LA(1);
				if ( !(_la==COLUMN || _la==COLUMNS) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(576);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IF) {
					{
					setState(574);
					match(IF);
					setState(575);
					match(EXISTS);
					}
				}

				setState(578);
				match(LEFT_PAREN);
				setState(579);
				((DropTableColumnsContext)_localctx).columns = multipartIdentifierList();
				setState(580);
				match(RIGHT_PAREN);
				}
				break;
			case 20:
				_localctx = new DropTableColumnsContext(_localctx);
				enterOuterAlt(_localctx, 20);
				{
				setState(582);
				match(ALTER);
				setState(583);
				match(TABLE);
				setState(584);
				multipartIdentifier();
				setState(585);
				match(DROP);
				setState(586);
				_la = _input.LA(1);
				if ( !(_la==COLUMN || _la==COLUMNS) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(589);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,27,_ctx) ) {
				case 1:
					{
					setState(587);
					match(IF);
					setState(588);
					match(EXISTS);
					}
					break;
				}
				setState(591);
				((DropTableColumnsContext)_localctx).columns = multipartIdentifierList();
				}
				break;
			case 21:
				_localctx = new RenameTableContext(_localctx);
				enterOuterAlt(_localctx, 21);
				{
				setState(593);
				match(ALTER);
				setState(594);
				_la = _input.LA(1);
				if ( !(_la==TABLE || _la==VIEW) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(595);
				((RenameTableContext)_localctx).from = multipartIdentifier();
				setState(596);
				match(RENAME);
				setState(597);
				match(TO);
				setState(598);
				((RenameTableContext)_localctx).to = multipartIdentifier();
				}
				break;
			case 22:
				_localctx = new SetTablePropertiesContext(_localctx);
				enterOuterAlt(_localctx, 22);
				{
				setState(600);
				match(ALTER);
				setState(601);
				_la = _input.LA(1);
				if ( !(_la==TABLE || _la==VIEW) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(602);
				multipartIdentifier();
				setState(603);
				match(SET);
				setState(604);
				match(TBLPROPERTIES);
				setState(605);
				propertyList();
				}
				break;
			case 23:
				_localctx = new UnsetTablePropertiesContext(_localctx);
				enterOuterAlt(_localctx, 23);
				{
				setState(607);
				match(ALTER);
				setState(608);
				_la = _input.LA(1);
				if ( !(_la==TABLE || _la==VIEW) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(609);
				multipartIdentifier();
				setState(610);
				match(UNSET);
				setState(611);
				match(TBLPROPERTIES);
				setState(614);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IF) {
					{
					setState(612);
					match(IF);
					setState(613);
					match(EXISTS);
					}
				}

				setState(616);
				propertyList();
				}
				break;
			case 24:
				_localctx = new AlterTableAlterColumnContext(_localctx);
				enterOuterAlt(_localctx, 24);
				{
				setState(618);
				match(ALTER);
				setState(619);
				match(TABLE);
				setState(620);
				((AlterTableAlterColumnContext)_localctx).table = multipartIdentifier();
				setState(621);
				_la = _input.LA(1);
				if ( !(_la==ALTER || _la==CHANGE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(623);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,29,_ctx) ) {
				case 1:
					{
					setState(622);
					match(COLUMN);
					}
					break;
				}
				setState(625);
				((AlterTableAlterColumnContext)_localctx).column = multipartIdentifier();
				setState(627);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AFTER || _la==COMMENT || _la==DROP || _la==FIRST || _la==SET || _la==TYPE) {
					{
					setState(626);
					alterColumnAction();
					}
				}

				}
				break;
			case 25:
				_localctx = new HiveChangeColumnContext(_localctx);
				enterOuterAlt(_localctx, 25);
				{
				setState(629);
				match(ALTER);
				setState(630);
				match(TABLE);
				setState(631);
				((HiveChangeColumnContext)_localctx).table = multipartIdentifier();
				setState(633);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PARTITION) {
					{
					setState(632);
					partitionSpec();
					}
				}

				setState(635);
				match(CHANGE);
				setState(637);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,32,_ctx) ) {
				case 1:
					{
					setState(636);
					match(COLUMN);
					}
					break;
				}
				setState(639);
				((HiveChangeColumnContext)_localctx).colName = multipartIdentifier();
				setState(640);
				colType();
				setState(642);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AFTER || _la==FIRST) {
					{
					setState(641);
					colPosition();
					}
				}

				}
				break;
			case 26:
				_localctx = new HiveReplaceColumnsContext(_localctx);
				enterOuterAlt(_localctx, 26);
				{
				setState(644);
				match(ALTER);
				setState(645);
				match(TABLE);
				setState(646);
				((HiveReplaceColumnsContext)_localctx).table = multipartIdentifier();
				setState(648);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PARTITION) {
					{
					setState(647);
					partitionSpec();
					}
				}

				setState(650);
				match(REPLACE);
				setState(651);
				match(COLUMNS);
				setState(652);
				match(LEFT_PAREN);
				setState(653);
				((HiveReplaceColumnsContext)_localctx).columns = qualifiedColTypeWithPositionList();
				setState(654);
				match(RIGHT_PAREN);
				}
				break;
			case 27:
				_localctx = new SetTableSerDeContext(_localctx);
				enterOuterAlt(_localctx, 27);
				{
				setState(656);
				match(ALTER);
				setState(657);
				match(TABLE);
				setState(658);
				multipartIdentifier();
				setState(660);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PARTITION) {
					{
					setState(659);
					partitionSpec();
					}
				}

				setState(662);
				match(SET);
				setState(663);
				match(SERDE);
				setState(664);
				stringLit();
				setState(668);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(665);
					match(WITH);
					setState(666);
					match(SERDEPROPERTIES);
					setState(667);
					propertyList();
					}
				}

				}
				break;
			case 28:
				_localctx = new SetTableSerDeContext(_localctx);
				enterOuterAlt(_localctx, 28);
				{
				setState(670);
				match(ALTER);
				setState(671);
				match(TABLE);
				setState(672);
				multipartIdentifier();
				setState(674);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PARTITION) {
					{
					setState(673);
					partitionSpec();
					}
				}

				setState(676);
				match(SET);
				setState(677);
				match(SERDEPROPERTIES);
				setState(678);
				propertyList();
				}
				break;
			case 29:
				_localctx = new AddTablePartitionContext(_localctx);
				enterOuterAlt(_localctx, 29);
				{
				setState(680);
				match(ALTER);
				setState(681);
				_la = _input.LA(1);
				if ( !(_la==TABLE || _la==VIEW) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(682);
				multipartIdentifier();
				setState(683);
				match(ADD);
				setState(687);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IF) {
					{
					setState(684);
					match(IF);
					setState(685);
					match(NOT);
					setState(686);
					match(EXISTS);
					}
				}

				setState(690); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(689);
					partitionSpecLocation();
					}
					}
					setState(692); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==PARTITION );
				}
				break;
			case 30:
				_localctx = new RenameTablePartitionContext(_localctx);
				enterOuterAlt(_localctx, 30);
				{
				setState(694);
				match(ALTER);
				setState(695);
				match(TABLE);
				setState(696);
				multipartIdentifier();
				setState(697);
				((RenameTablePartitionContext)_localctx).from = partitionSpec();
				setState(698);
				match(RENAME);
				setState(699);
				match(TO);
				setState(700);
				((RenameTablePartitionContext)_localctx).to = partitionSpec();
				}
				break;
			case 31:
				_localctx = new DropTablePartitionsContext(_localctx);
				enterOuterAlt(_localctx, 31);
				{
				setState(702);
				match(ALTER);
				setState(703);
				_la = _input.LA(1);
				if ( !(_la==TABLE || _la==VIEW) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(704);
				multipartIdentifier();
				setState(705);
				match(DROP);
				setState(708);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IF) {
					{
					setState(706);
					match(IF);
					setState(707);
					match(EXISTS);
					}
				}

				setState(710);
				partitionSpec();
				setState(715);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(711);
					match(COMMA);
					setState(712);
					partitionSpec();
					}
					}
					setState(717);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(719);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PURGE) {
					{
					setState(718);
					match(PURGE);
					}
				}

				}
				break;
			case 32:
				_localctx = new SetTableLocationContext(_localctx);
				enterOuterAlt(_localctx, 32);
				{
				setState(721);
				match(ALTER);
				setState(722);
				match(TABLE);
				setState(723);
				multipartIdentifier();
				setState(725);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PARTITION) {
					{
					setState(724);
					partitionSpec();
					}
				}

				setState(727);
				match(SET);
				setState(728);
				locationSpec();
				}
				break;
			case 33:
				_localctx = new RecoverPartitionsContext(_localctx);
				enterOuterAlt(_localctx, 33);
				{
				setState(730);
				match(ALTER);
				setState(731);
				match(TABLE);
				setState(732);
				multipartIdentifier();
				setState(733);
				match(RECOVER);
				setState(734);
				match(PARTITIONS);
				}
				break;
			case 34:
				_localctx = new DropTableContext(_localctx);
				enterOuterAlt(_localctx, 34);
				{
				setState(736);
				match(DROP);
				setState(737);
				match(TABLE);
				setState(740);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,44,_ctx) ) {
				case 1:
					{
					setState(738);
					match(IF);
					setState(739);
					match(EXISTS);
					}
					break;
				}
				setState(742);
				multipartIdentifier();
				setState(744);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PURGE) {
					{
					setState(743);
					match(PURGE);
					}
				}

				}
				break;
			case 35:
				_localctx = new DropViewContext(_localctx);
				enterOuterAlt(_localctx, 35);
				{
				setState(746);
				match(DROP);
				setState(747);
				match(VIEW);
				setState(750);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,46,_ctx) ) {
				case 1:
					{
					setState(748);
					match(IF);
					setState(749);
					match(EXISTS);
					}
					break;
				}
				setState(752);
				multipartIdentifier();
				}
				break;
			case 36:
				_localctx = new CreateViewContext(_localctx);
				enterOuterAlt(_localctx, 36);
				{
				setState(753);
				match(CREATE);
				setState(756);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OR) {
					{
					setState(754);
					match(OR);
					setState(755);
					match(REPLACE);
					}
				}

				setState(762);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==GLOBAL || _la==TEMPORARY) {
					{
					setState(759);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==GLOBAL) {
						{
						setState(758);
						match(GLOBAL);
						}
					}

					setState(761);
					match(TEMPORARY);
					}
				}

				setState(764);
				match(VIEW);
				setState(768);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,50,_ctx) ) {
				case 1:
					{
					setState(765);
					match(IF);
					setState(766);
					match(NOT);
					setState(767);
					match(EXISTS);
					}
					break;
				}
				setState(770);
				multipartIdentifier();
				setState(772);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LEFT_PAREN) {
					{
					setState(771);
					identifierCommentList();
					}
				}

				setState(782);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMENT || _la==PARTITIONED || _la==TBLPROPERTIES) {
					{
					setState(780);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case COMMENT:
						{
						setState(774);
						commentSpec();
						}
						break;
					case PARTITIONED:
						{
						{
						setState(775);
						match(PARTITIONED);
						setState(776);
						match(ON);
						setState(777);
						identifierList();
						}
						}
						break;
					case TBLPROPERTIES:
						{
						{
						setState(778);
						match(TBLPROPERTIES);
						setState(779);
						propertyList();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					setState(784);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(785);
				match(AS);
				setState(786);
				query();
				}
				break;
			case 37:
				_localctx = new CreateTempViewUsingContext(_localctx);
				enterOuterAlt(_localctx, 37);
				{
				setState(788);
				match(CREATE);
				setState(791);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OR) {
					{
					setState(789);
					match(OR);
					setState(790);
					match(REPLACE);
					}
				}

				setState(794);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==GLOBAL) {
					{
					setState(793);
					match(GLOBAL);
					}
				}

				setState(796);
				match(TEMPORARY);
				setState(797);
				match(VIEW);
				setState(798);
				tableIdentifier();
				setState(803);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LEFT_PAREN) {
					{
					setState(799);
					match(LEFT_PAREN);
					setState(800);
					colTypeList();
					setState(801);
					match(RIGHT_PAREN);
					}
				}

				setState(805);
				tableProvider();
				setState(808);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OPTIONS) {
					{
					setState(806);
					match(OPTIONS);
					setState(807);
					propertyList();
					}
				}

				}
				break;
			case 38:
				_localctx = new AlterViewQueryContext(_localctx);
				enterOuterAlt(_localctx, 38);
				{
				setState(810);
				match(ALTER);
				setState(811);
				match(VIEW);
				setState(812);
				multipartIdentifier();
				setState(814);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AS) {
					{
					setState(813);
					match(AS);
					}
				}

				setState(816);
				query();
				}
				break;
			case 39:
				_localctx = new CreateFunctionContext(_localctx);
				enterOuterAlt(_localctx, 39);
				{
				setState(818);
				match(CREATE);
				setState(821);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OR) {
					{
					setState(819);
					match(OR);
					setState(820);
					match(REPLACE);
					}
				}

				setState(824);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==TEMPORARY) {
					{
					setState(823);
					match(TEMPORARY);
					}
				}

				setState(826);
				match(FUNCTION);
				setState(830);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,61,_ctx) ) {
				case 1:
					{
					setState(827);
					match(IF);
					setState(828);
					match(NOT);
					setState(829);
					match(EXISTS);
					}
					break;
				}
				setState(832);
				multipartIdentifier();
				setState(833);
				match(AS);
				setState(834);
				((CreateFunctionContext)_localctx).className = stringLit();
				setState(844);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==USING) {
					{
					setState(835);
					match(USING);
					setState(836);
					resource();
					setState(841);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(837);
						match(COMMA);
						setState(838);
						resource();
						}
						}
						setState(843);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
				}

				}
				break;
			case 40:
				_localctx = new DropFunctionContext(_localctx);
				enterOuterAlt(_localctx, 40);
				{
				setState(846);
				match(DROP);
				setState(848);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==TEMPORARY) {
					{
					setState(847);
					match(TEMPORARY);
					}
				}

				setState(850);
				match(FUNCTION);
				setState(853);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,65,_ctx) ) {
				case 1:
					{
					setState(851);
					match(IF);
					setState(852);
					match(EXISTS);
					}
					break;
				}
				setState(855);
				multipartIdentifier();
				}
				break;
			case 41:
				_localctx = new ExplainContext(_localctx);
				enterOuterAlt(_localctx, 41);
				{
				setState(856);
				match(EXPLAIN);
				setState(858);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CODEGEN || _la==COST || ((((_la - 99)) & ~0x3f) == 0 && ((1L << (_la - 99)) & 576460752303431681L) != 0)) {
					{
					setState(857);
					_la = _input.LA(1);
					if ( !(_la==CODEGEN || _la==COST || ((((_la - 99)) & ~0x3f) == 0 && ((1L << (_la - 99)) & 576460752303431681L) != 0)) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(860);
				statement();
				}
				break;
			case 42:
				_localctx = new ShowTablesContext(_localctx);
				enterOuterAlt(_localctx, 42);
				{
				setState(861);
				match(SHOW);
				setState(862);
				match(TABLES);
				setState(865);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,67,_ctx) ) {
				case 1:
					{
					setState(863);
					_la = _input.LA(1);
					if ( !(_la==FROM || _la==IN) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(864);
					multipartIdentifier();
					}
					break;
				}
				setState(871);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,69,_ctx) ) {
				case 1:
					{
					setState(868);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,68,_ctx) ) {
					case 1:
						{
						setState(867);
						match(LIKE);
						}
						break;
					}
					setState(870);
					((ShowTablesContext)_localctx).pattern = stringLit();
					}
					break;
				}
				}
				break;
			case 43:
				_localctx = new ShowTableExtendedContext(_localctx);
				enterOuterAlt(_localctx, 43);
				{
				setState(873);
				match(SHOW);
				setState(874);
				match(TABLE);
				setState(875);
				match(EXTENDED);
				setState(878);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FROM || _la==IN) {
					{
					setState(876);
					_la = _input.LA(1);
					if ( !(_la==FROM || _la==IN) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(877);
					((ShowTableExtendedContext)_localctx).ns = multipartIdentifier();
					}
				}

				setState(880);
				match(LIKE);
				setState(881);
				((ShowTableExtendedContext)_localctx).pattern = stringLit();
				setState(883);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PARTITION) {
					{
					setState(882);
					partitionSpec();
					}
				}

				}
				break;
			case 44:
				_localctx = new ShowTblPropertiesContext(_localctx);
				enterOuterAlt(_localctx, 44);
				{
				setState(885);
				match(SHOW);
				setState(886);
				match(TBLPROPERTIES);
				setState(887);
				((ShowTblPropertiesContext)_localctx).table = multipartIdentifier();
				setState(892);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LEFT_PAREN) {
					{
					setState(888);
					match(LEFT_PAREN);
					setState(889);
					((ShowTblPropertiesContext)_localctx).key = propertyKey();
					setState(890);
					match(RIGHT_PAREN);
					}
				}

				}
				break;
			case 45:
				_localctx = new ShowColumnsContext(_localctx);
				enterOuterAlt(_localctx, 45);
				{
				setState(894);
				match(SHOW);
				setState(895);
				match(COLUMNS);
				setState(896);
				_la = _input.LA(1);
				if ( !(_la==FROM || _la==IN) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(897);
				((ShowColumnsContext)_localctx).table = multipartIdentifier();
				setState(900);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FROM || _la==IN) {
					{
					setState(898);
					_la = _input.LA(1);
					if ( !(_la==FROM || _la==IN) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(899);
					((ShowColumnsContext)_localctx).ns = multipartIdentifier();
					}
				}

				}
				break;
			case 46:
				_localctx = new ShowViewsContext(_localctx);
				enterOuterAlt(_localctx, 46);
				{
				setState(902);
				match(SHOW);
				setState(903);
				match(VIEWS);
				setState(906);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,74,_ctx) ) {
				case 1:
					{
					setState(904);
					_la = _input.LA(1);
					if ( !(_la==FROM || _la==IN) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(905);
					multipartIdentifier();
					}
					break;
				}
				setState(912);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,76,_ctx) ) {
				case 1:
					{
					setState(909);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,75,_ctx) ) {
					case 1:
						{
						setState(908);
						match(LIKE);
						}
						break;
					}
					setState(911);
					((ShowViewsContext)_localctx).pattern = stringLit();
					}
					break;
				}
				}
				break;
			case 47:
				_localctx = new ShowPartitionsContext(_localctx);
				enterOuterAlt(_localctx, 47);
				{
				setState(914);
				match(SHOW);
				setState(915);
				match(PARTITIONS);
				setState(916);
				multipartIdentifier();
				setState(918);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PARTITION) {
					{
					setState(917);
					partitionSpec();
					}
				}

				}
				break;
			case 48:
				_localctx = new ShowFunctionsContext(_localctx);
				enterOuterAlt(_localctx, 48);
				{
				setState(920);
				match(SHOW);
				setState(922);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,78,_ctx) ) {
				case 1:
					{
					setState(921);
					identifier();
					}
					break;
				}
				setState(924);
				match(FUNCTIONS);
				setState(927);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,79,_ctx) ) {
				case 1:
					{
					setState(925);
					_la = _input.LA(1);
					if ( !(_la==FROM || _la==IN) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(926);
					((ShowFunctionsContext)_localctx).ns = multipartIdentifier();
					}
					break;
				}
				setState(936);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,82,_ctx) ) {
				case 1:
					{
					setState(930);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,80,_ctx) ) {
					case 1:
						{
						setState(929);
						match(LIKE);
						}
						break;
					}
					setState(934);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,81,_ctx) ) {
					case 1:
						{
						setState(932);
						((ShowFunctionsContext)_localctx).legacy = multipartIdentifier();
						}
						break;
					case 2:
						{
						setState(933);
						((ShowFunctionsContext)_localctx).pattern = stringLit();
						}
						break;
					}
					}
					break;
				}
				}
				break;
			case 49:
				_localctx = new ShowCreateTableContext(_localctx);
				enterOuterAlt(_localctx, 49);
				{
				setState(938);
				match(SHOW);
				setState(939);
				match(CREATE);
				setState(940);
				match(TABLE);
				setState(941);
				multipartIdentifier();
				setState(944);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AS) {
					{
					setState(942);
					match(AS);
					setState(943);
					match(SERDE);
					}
				}

				}
				break;
			case 50:
				_localctx = new ShowCurrentNamespaceContext(_localctx);
				enterOuterAlt(_localctx, 50);
				{
				setState(946);
				match(SHOW);
				setState(947);
				match(CURRENT);
				setState(948);
				namespace();
				}
				break;
			case 51:
				_localctx = new ShowCatalogsContext(_localctx);
				enterOuterAlt(_localctx, 51);
				{
				setState(949);
				match(SHOW);
				setState(950);
				match(CATALOGS);
				setState(955);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,85,_ctx) ) {
				case 1:
					{
					setState(952);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,84,_ctx) ) {
					case 1:
						{
						setState(951);
						match(LIKE);
						}
						break;
					}
					setState(954);
					((ShowCatalogsContext)_localctx).pattern = stringLit();
					}
					break;
				}
				}
				break;
			case 52:
				_localctx = new DescribeFunctionContext(_localctx);
				enterOuterAlt(_localctx, 52);
				{
				setState(957);
				_la = _input.LA(1);
				if ( !(_la==DESC || _la==DESCRIBE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(958);
				match(FUNCTION);
				setState(960);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,86,_ctx) ) {
				case 1:
					{
					setState(959);
					match(EXTENDED);
					}
					break;
				}
				setState(962);
				describeFuncName();
				}
				break;
			case 53:
				_localctx = new DescribeNamespaceContext(_localctx);
				enterOuterAlt(_localctx, 53);
				{
				setState(963);
				_la = _input.LA(1);
				if ( !(_la==DESC || _la==DESCRIBE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(964);
				namespace();
				setState(966);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,87,_ctx) ) {
				case 1:
					{
					setState(965);
					match(EXTENDED);
					}
					break;
				}
				setState(968);
				multipartIdentifier();
				}
				break;
			case 54:
				_localctx = new DescribeRelationContext(_localctx);
				enterOuterAlt(_localctx, 54);
				{
				setState(970);
				_la = _input.LA(1);
				if ( !(_la==DESC || _la==DESCRIBE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(972);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,88,_ctx) ) {
				case 1:
					{
					setState(971);
					match(TABLE);
					}
					break;
				}
				setState(975);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,89,_ctx) ) {
				case 1:
					{
					setState(974);
					((DescribeRelationContext)_localctx).option = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==EXTENDED || _la==FORMATTED) ) {
						((DescribeRelationContext)_localctx).option = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				}
				setState(977);
				multipartIdentifier();
				setState(979);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,90,_ctx) ) {
				case 1:
					{
					setState(978);
					partitionSpec();
					}
					break;
				}
				setState(982);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,91,_ctx) ) {
				case 1:
					{
					setState(981);
					describeColName();
					}
					break;
				}
				}
				break;
			case 55:
				_localctx = new DescribeQueryContext(_localctx);
				enterOuterAlt(_localctx, 55);
				{
				setState(984);
				_la = _input.LA(1);
				if ( !(_la==DESC || _la==DESCRIBE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(986);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==QUERY) {
					{
					setState(985);
					match(QUERY);
					}
				}

				setState(988);
				query();
				}
				break;
			case 56:
				_localctx = new CommentNamespaceContext(_localctx);
				enterOuterAlt(_localctx, 56);
				{
				setState(989);
				match(COMMENT);
				setState(990);
				match(ON);
				setState(991);
				namespace();
				setState(992);
				multipartIdentifier();
				setState(993);
				match(IS);
				setState(994);
				comment();
				}
				break;
			case 57:
				_localctx = new CommentTableContext(_localctx);
				enterOuterAlt(_localctx, 57);
				{
				setState(996);
				match(COMMENT);
				setState(997);
				match(ON);
				setState(998);
				match(TABLE);
				setState(999);
				multipartIdentifier();
				setState(1000);
				match(IS);
				setState(1001);
				comment();
				}
				break;
			case 58:
				_localctx = new RefreshTableContext(_localctx);
				enterOuterAlt(_localctx, 58);
				{
				setState(1003);
				match(REFRESH);
				setState(1004);
				match(TABLE);
				setState(1005);
				multipartIdentifier();
				}
				break;
			case 59:
				_localctx = new RefreshFunctionContext(_localctx);
				enterOuterAlt(_localctx, 59);
				{
				setState(1006);
				match(REFRESH);
				setState(1007);
				match(FUNCTION);
				setState(1008);
				multipartIdentifier();
				}
				break;
			case 60:
				_localctx = new RefreshResourceContext(_localctx);
				enterOuterAlt(_localctx, 60);
				{
				setState(1009);
				match(REFRESH);
				setState(1017);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,94,_ctx) ) {
				case 1:
					{
					setState(1010);
					stringLit();
					}
					break;
				case 2:
					{
					setState(1014);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,93,_ctx);
					while ( _alt!=1 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1+1 ) {
							{
							{
							setState(1011);
							matchWildcard();
							}
							} 
						}
						setState(1016);
						_errHandler.sync(this);
						_alt = getInterpreter().adaptivePredict(_input,93,_ctx);
					}
					}
					break;
				}
				}
				break;
			case 61:
				_localctx = new CacheTableContext(_localctx);
				enterOuterAlt(_localctx, 61);
				{
				setState(1019);
				match(CACHE);
				setState(1021);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LAZY) {
					{
					setState(1020);
					match(LAZY);
					}
				}

				setState(1023);
				match(TABLE);
				setState(1024);
				multipartIdentifier();
				setState(1027);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OPTIONS) {
					{
					setState(1025);
					match(OPTIONS);
					setState(1026);
					((CacheTableContext)_localctx).options = propertyList();
					}
				}

				setState(1033);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LEFT_PAREN || _la==AS || _la==FROM || _la==MAP || ((((_la - 216)) & ~0x3f) == 0 && ((1L << (_la - 216)) & 281474985099265L) != 0) || _la==VALUES || _la==WITH) {
					{
					setState(1030);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==AS) {
						{
						setState(1029);
						match(AS);
						}
					}

					setState(1032);
					query();
					}
				}

				}
				break;
			case 62:
				_localctx = new UncacheTableContext(_localctx);
				enterOuterAlt(_localctx, 62);
				{
				setState(1035);
				match(UNCACHE);
				setState(1036);
				match(TABLE);
				setState(1039);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,99,_ctx) ) {
				case 1:
					{
					setState(1037);
					match(IF);
					setState(1038);
					match(EXISTS);
					}
					break;
				}
				setState(1041);
				multipartIdentifier();
				}
				break;
			case 63:
				_localctx = new ClearCacheContext(_localctx);
				enterOuterAlt(_localctx, 63);
				{
				setState(1042);
				match(CLEAR);
				setState(1043);
				match(CACHE);
				}
				break;
			case 64:
				_localctx = new LoadDataContext(_localctx);
				enterOuterAlt(_localctx, 64);
				{
				setState(1044);
				match(LOAD);
				setState(1045);
				match(DATA);
				setState(1047);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LOCAL) {
					{
					setState(1046);
					match(LOCAL);
					}
				}

				setState(1049);
				match(INPATH);
				setState(1050);
				((LoadDataContext)_localctx).path = stringLit();
				setState(1052);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OVERWRITE) {
					{
					setState(1051);
					match(OVERWRITE);
					}
				}

				setState(1054);
				match(INTO);
				setState(1055);
				match(TABLE);
				setState(1056);
				multipartIdentifier();
				setState(1058);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PARTITION) {
					{
					setState(1057);
					partitionSpec();
					}
				}

				}
				break;
			case 65:
				_localctx = new TruncateTableContext(_localctx);
				enterOuterAlt(_localctx, 65);
				{
				setState(1060);
				match(TRUNCATE);
				setState(1061);
				match(TABLE);
				setState(1062);
				multipartIdentifier();
				setState(1064);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PARTITION) {
					{
					setState(1063);
					partitionSpec();
					}
				}

				}
				break;
			case 66:
				_localctx = new RepairTableContext(_localctx);
				enterOuterAlt(_localctx, 66);
				{
				setState(1067);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==MSCK) {
					{
					setState(1066);
					match(MSCK);
					}
				}

				setState(1069);
				match(REPAIR);
				setState(1070);
				match(TABLE);
				setState(1071);
				multipartIdentifier();
				setState(1074);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ADD || _la==DROP || _la==SYNC) {
					{
					setState(1072);
					((RepairTableContext)_localctx).option = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==ADD || _la==DROP || _la==SYNC) ) {
						((RepairTableContext)_localctx).option = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(1073);
					match(PARTITIONS);
					}
				}

				}
				break;
			case 67:
				_localctx = new ManageResourceContext(_localctx);
				enterOuterAlt(_localctx, 67);
				{
				setState(1076);
				((ManageResourceContext)_localctx).op = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==ADD || _la==LIST) ) {
					((ManageResourceContext)_localctx).op = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(1077);
				identifier();
				setState(1081);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,106,_ctx);
				while ( _alt!=1 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1+1 ) {
						{
						{
						setState(1078);
						matchWildcard();
						}
						} 
					}
					setState(1083);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,106,_ctx);
				}
				}
				break;
			case 68:
				_localctx = new FailNativeCommandContext(_localctx);
				enterOuterAlt(_localctx, 68);
				{
				setState(1084);
				match(SET);
				setState(1085);
				match(ROLE);
				setState(1089);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,107,_ctx);
				while ( _alt!=1 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1+1 ) {
						{
						{
						setState(1086);
						matchWildcard();
						}
						} 
					}
					setState(1091);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,107,_ctx);
				}
				}
				break;
			case 69:
				_localctx = new SetTimeZoneContext(_localctx);
				enterOuterAlt(_localctx, 69);
				{
				setState(1092);
				match(SET);
				setState(1093);
				match(TIME);
				setState(1094);
				match(ZONE);
				setState(1095);
				interval();
				}
				break;
			case 70:
				_localctx = new SetTimeZoneContext(_localctx);
				enterOuterAlt(_localctx, 70);
				{
				setState(1096);
				match(SET);
				setState(1097);
				match(TIME);
				setState(1098);
				match(ZONE);
				setState(1099);
				timezone();
				}
				break;
			case 71:
				_localctx = new SetTimeZoneContext(_localctx);
				enterOuterAlt(_localctx, 71);
				{
				setState(1100);
				match(SET);
				setState(1101);
				match(TIME);
				setState(1102);
				match(ZONE);
				setState(1106);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,108,_ctx);
				while ( _alt!=1 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1+1 ) {
						{
						{
						setState(1103);
						matchWildcard();
						}
						} 
					}
					setState(1108);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,108,_ctx);
				}
				}
				break;
			case 72:
				_localctx = new SetQuotedConfigurationContext(_localctx);
				enterOuterAlt(_localctx, 72);
				{
				setState(1109);
				match(SET);
				setState(1110);
				configKey();
				setState(1111);
				match(EQ);
				setState(1112);
				configValue();
				}
				break;
			case 73:
				_localctx = new SetConfigurationContext(_localctx);
				enterOuterAlt(_localctx, 73);
				{
				setState(1114);
				match(SET);
				setState(1115);
				configKey();
				setState(1123);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQ) {
					{
					setState(1116);
					match(EQ);
					setState(1120);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,109,_ctx);
					while ( _alt!=1 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1+1 ) {
							{
							{
							setState(1117);
							matchWildcard();
							}
							} 
						}
						setState(1122);
						_errHandler.sync(this);
						_alt = getInterpreter().adaptivePredict(_input,109,_ctx);
					}
					}
				}

				}
				break;
			case 74:
				_localctx = new SetQuotedConfigurationContext(_localctx);
				enterOuterAlt(_localctx, 74);
				{
				setState(1125);
				match(SET);
				setState(1129);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,111,_ctx);
				while ( _alt!=1 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1+1 ) {
						{
						{
						setState(1126);
						matchWildcard();
						}
						} 
					}
					setState(1131);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,111,_ctx);
				}
				setState(1132);
				match(EQ);
				setState(1133);
				configValue();
				}
				break;
			case 75:
				_localctx = new SetConfigurationContext(_localctx);
				enterOuterAlt(_localctx, 75);
				{
				setState(1134);
				match(SET);
				setState(1138);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,112,_ctx);
				while ( _alt!=1 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1+1 ) {
						{
						{
						setState(1135);
						matchWildcard();
						}
						} 
					}
					setState(1140);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,112,_ctx);
				}
				}
				break;
			case 76:
				_localctx = new ResetQuotedConfigurationContext(_localctx);
				enterOuterAlt(_localctx, 76);
				{
				setState(1141);
				match(RESET);
				setState(1142);
				configKey();
				}
				break;
			case 77:
				_localctx = new ResetConfigurationContext(_localctx);
				enterOuterAlt(_localctx, 77);
				{
				setState(1143);
				match(RESET);
				setState(1147);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,113,_ctx);
				while ( _alt!=1 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1+1 ) {
						{
						{
						setState(1144);
						matchWildcard();
						}
						} 
					}
					setState(1149);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,113,_ctx);
				}
				}
				break;
			case 78:
				_localctx = new CreateIndexContext(_localctx);
				enterOuterAlt(_localctx, 78);
				{
				setState(1150);
				match(CREATE);
				setState(1151);
				match(INDEX);
				setState(1155);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,114,_ctx) ) {
				case 1:
					{
					setState(1152);
					match(IF);
					setState(1153);
					match(NOT);
					setState(1154);
					match(EXISTS);
					}
					break;
				}
				setState(1157);
				identifier();
				setState(1158);
				match(ON);
				setState(1160);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,115,_ctx) ) {
				case 1:
					{
					setState(1159);
					match(TABLE);
					}
					break;
				}
				setState(1162);
				multipartIdentifier();
				setState(1165);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==USING) {
					{
					setState(1163);
					match(USING);
					setState(1164);
					((CreateIndexContext)_localctx).indexType = identifier();
					}
				}

				setState(1167);
				match(LEFT_PAREN);
				setState(1168);
				((CreateIndexContext)_localctx).columns = multipartIdentifierPropertyList();
				setState(1169);
				match(RIGHT_PAREN);
				setState(1172);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OPTIONS) {
					{
					setState(1170);
					match(OPTIONS);
					setState(1171);
					((CreateIndexContext)_localctx).options = propertyList();
					}
				}

				}
				break;
			case 79:
				_localctx = new DropIndexContext(_localctx);
				enterOuterAlt(_localctx, 79);
				{
				setState(1174);
				match(DROP);
				setState(1175);
				match(INDEX);
				setState(1178);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,118,_ctx) ) {
				case 1:
					{
					setState(1176);
					match(IF);
					setState(1177);
					match(EXISTS);
					}
					break;
				}
				setState(1180);
				identifier();
				setState(1181);
				match(ON);
				setState(1183);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,119,_ctx) ) {
				case 1:
					{
					setState(1182);
					match(TABLE);
					}
					break;
				}
				setState(1185);
				multipartIdentifier();
				}
				break;
			case 80:
				_localctx = new FailNativeCommandContext(_localctx);
				enterOuterAlt(_localctx, 80);
				{
				setState(1187);
				unsupportedHiveNativeCommands();
				setState(1191);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,120,_ctx);
				while ( _alt!=1 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1+1 ) {
						{
						{
						setState(1188);
						matchWildcard();
						}
						} 
					}
					setState(1193);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,120,_ctx);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TimezoneContext extends ParserRuleContext {
		public StringLitContext stringLit() {
			return getRuleContext(StringLitContext.class,0);
		}
		public TerminalNode LOCAL() { return getToken(SqlBaseParser.LOCAL, 0); }
		public TimezoneContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_timezone; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterTimezone(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitTimezone(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitTimezone(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TimezoneContext timezone() throws RecognitionException {
		TimezoneContext _localctx = new TimezoneContext(_ctx, getState());
		enterRule(_localctx, 16, RULE_timezone);
		try {
			setState(1198);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,122,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1196);
				stringLit();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1197);
				match(LOCAL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ConfigKeyContext extends ParserRuleContext {
		public QuotedIdentifierContext quotedIdentifier() {
			return getRuleContext(QuotedIdentifierContext.class,0);
		}
		public ConfigKeyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_configKey; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterConfigKey(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitConfigKey(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitConfigKey(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ConfigKeyContext configKey() throws RecognitionException {
		ConfigKeyContext _localctx = new ConfigKeyContext(_ctx, getState());
		enterRule(_localctx, 18, RULE_configKey);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1200);
			quotedIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ConfigValueContext extends ParserRuleContext {
		public BackQuotedIdentifierContext backQuotedIdentifier() {
			return getRuleContext(BackQuotedIdentifierContext.class,0);
		}
		public ConfigValueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_configValue; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterConfigValue(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitConfigValue(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitConfigValue(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ConfigValueContext configValue() throws RecognitionException {
		ConfigValueContext _localctx = new ConfigValueContext(_ctx, getState());
		enterRule(_localctx, 20, RULE_configValue);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1202);
			backQuotedIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class UnsupportedHiveNativeCommandsContext extends ParserRuleContext {
		public Token kw1;
		public Token kw2;
		public Token kw3;
		public Token kw4;
		public Token kw5;
		public Token kw6;
		public TerminalNode CREATE() { return getToken(SqlBaseParser.CREATE, 0); }
		public TerminalNode ROLE() { return getToken(SqlBaseParser.ROLE, 0); }
		public TerminalNode DROP() { return getToken(SqlBaseParser.DROP, 0); }
		public TerminalNode GRANT() { return getToken(SqlBaseParser.GRANT, 0); }
		public TerminalNode REVOKE() { return getToken(SqlBaseParser.REVOKE, 0); }
		public TerminalNode SHOW() { return getToken(SqlBaseParser.SHOW, 0); }
		public TerminalNode PRINCIPALS() { return getToken(SqlBaseParser.PRINCIPALS, 0); }
		public TerminalNode ROLES() { return getToken(SqlBaseParser.ROLES, 0); }
		public TerminalNode CURRENT() { return getToken(SqlBaseParser.CURRENT, 0); }
		public TerminalNode EXPORT() { return getToken(SqlBaseParser.EXPORT, 0); }
		public TerminalNode TABLE() { return getToken(SqlBaseParser.TABLE, 0); }
		public TerminalNode IMPORT() { return getToken(SqlBaseParser.IMPORT, 0); }
		public TerminalNode COMPACTIONS() { return getToken(SqlBaseParser.COMPACTIONS, 0); }
		public TerminalNode TRANSACTIONS() { return getToken(SqlBaseParser.TRANSACTIONS, 0); }
		public TerminalNode INDEXES() { return getToken(SqlBaseParser.INDEXES, 0); }
		public TerminalNode LOCKS() { return getToken(SqlBaseParser.LOCKS, 0); }
		public TerminalNode INDEX() { return getToken(SqlBaseParser.INDEX, 0); }
		public TerminalNode ALTER() { return getToken(SqlBaseParser.ALTER, 0); }
		public TerminalNode LOCK() { return getToken(SqlBaseParser.LOCK, 0); }
		public TerminalNode DATABASE() { return getToken(SqlBaseParser.DATABASE, 0); }
		public TerminalNode UNLOCK() { return getToken(SqlBaseParser.UNLOCK, 0); }
		public TerminalNode TEMPORARY() { return getToken(SqlBaseParser.TEMPORARY, 0); }
		public TerminalNode MACRO() { return getToken(SqlBaseParser.MACRO, 0); }
		public TableIdentifierContext tableIdentifier() {
			return getRuleContext(TableIdentifierContext.class,0);
		}
		public TerminalNode NOT() { return getToken(SqlBaseParser.NOT, 0); }
		public TerminalNode CLUSTERED() { return getToken(SqlBaseParser.CLUSTERED, 0); }
		public TerminalNode BY() { return getToken(SqlBaseParser.BY, 0); }
		public TerminalNode SORTED() { return getToken(SqlBaseParser.SORTED, 0); }
		public TerminalNode SKEWED() { return getToken(SqlBaseParser.SKEWED, 0); }
		public TerminalNode STORED() { return getToken(SqlBaseParser.STORED, 0); }
		public TerminalNode AS() { return getToken(SqlBaseParser.AS, 0); }
		public TerminalNode DIRECTORIES() { return getToken(SqlBaseParser.DIRECTORIES, 0); }
		public TerminalNode SET() { return getToken(SqlBaseParser.SET, 0); }
		public TerminalNode LOCATION() { return getToken(SqlBaseParser.LOCATION, 0); }
		public TerminalNode EXCHANGE() { return getToken(SqlBaseParser.EXCHANGE, 0); }
		public TerminalNode PARTITION() { return getToken(SqlBaseParser.PARTITION, 0); }
		public TerminalNode ARCHIVE() { return getToken(SqlBaseParser.ARCHIVE, 0); }
		public TerminalNode UNARCHIVE() { return getToken(SqlBaseParser.UNARCHIVE, 0); }
		public TerminalNode TOUCH() { return getToken(SqlBaseParser.TOUCH, 0); }
		public TerminalNode COMPACT() { return getToken(SqlBaseParser.COMPACT, 0); }
		public PartitionSpecContext partitionSpec() {
			return getRuleContext(PartitionSpecContext.class,0);
		}
		public TerminalNode CONCATENATE() { return getToken(SqlBaseParser.CONCATENATE, 0); }
		public TerminalNode FILEFORMAT() { return getToken(SqlBaseParser.FILEFORMAT, 0); }
		public TerminalNode REPLACE() { return getToken(SqlBaseParser.REPLACE, 0); }
		public TerminalNode COLUMNS() { return getToken(SqlBaseParser.COLUMNS, 0); }
		public TerminalNode START() { return getToken(SqlBaseParser.START, 0); }
		public TerminalNode TRANSACTION() { return getToken(SqlBaseParser.TRANSACTION, 0); }
		public TerminalNode COMMIT() { return getToken(SqlBaseParser.COMMIT, 0); }
		public TerminalNode ROLLBACK() { return getToken(SqlBaseParser.ROLLBACK, 0); }
		public TerminalNode DFS() { return getToken(SqlBaseParser.DFS, 0); }
		public UnsupportedHiveNativeCommandsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unsupportedHiveNativeCommands; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterUnsupportedHiveNativeCommands(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitUnsupportedHiveNativeCommands(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitUnsupportedHiveNativeCommands(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UnsupportedHiveNativeCommandsContext unsupportedHiveNativeCommands() throws RecognitionException {
		UnsupportedHiveNativeCommandsContext _localctx = new UnsupportedHiveNativeCommandsContext(_ctx, getState());
		enterRule(_localctx, 22, RULE_unsupportedHiveNativeCommands);
		int _la;
		try {
			setState(1372);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,130,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1204);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw1 = match(CREATE);
				setState(1205);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw2 = match(ROLE);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1206);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw1 = match(DROP);
				setState(1207);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw2 = match(ROLE);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1208);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw1 = match(GRANT);
				setState(1210);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,123,_ctx) ) {
				case 1:
					{
					setState(1209);
					((UnsupportedHiveNativeCommandsContext)_localctx).kw2 = match(ROLE);
					}
					break;
				}
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1212);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw1 = match(REVOKE);
				setState(1214);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,124,_ctx) ) {
				case 1:
					{
					setState(1213);
					((UnsupportedHiveNativeCommandsContext)_localctx).kw2 = match(ROLE);
					}
					break;
				}
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(1216);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw1 = match(SHOW);
				setState(1217);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw2 = match(GRANT);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(1218);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw1 = match(SHOW);
				setState(1219);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw2 = match(ROLE);
				setState(1221);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,125,_ctx) ) {
				case 1:
					{
					setState(1220);
					((UnsupportedHiveNativeCommandsContext)_localctx).kw3 = match(GRANT);
					}
					break;
				}
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(1223);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw1 = match(SHOW);
				setState(1224);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw2 = match(PRINCIPALS);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(1225);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw1 = match(SHOW);
				setState(1226);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw2 = match(ROLES);
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(1227);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw1 = match(SHOW);
				setState(1228);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw2 = match(CURRENT);
				setState(1229);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw3 = match(ROLES);
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(1230);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw1 = match(EXPORT);
				setState(1231);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw2 = match(TABLE);
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(1232);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw1 = match(IMPORT);
				setState(1233);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw2 = match(TABLE);
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(1234);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw1 = match(SHOW);
				setState(1235);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw2 = match(COMPACTIONS);
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(1236);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw1 = match(SHOW);
				setState(1237);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw2 = match(CREATE);
				setState(1238);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw3 = match(TABLE);
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(1239);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw1 = match(SHOW);
				setState(1240);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw2 = match(TRANSACTIONS);
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(1241);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw1 = match(SHOW);
				setState(1242);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw2 = match(INDEXES);
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(1243);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw1 = match(SHOW);
				setState(1244);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw2 = match(LOCKS);
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(1245);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw1 = match(CREATE);
				setState(1246);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw2 = match(INDEX);
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(1247);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw1 = match(DROP);
				setState(1248);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw2 = match(INDEX);
				}
				break;
			case 19:
				enterOuterAlt(_localctx, 19);
				{
				setState(1249);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw1 = match(ALTER);
				setState(1250);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw2 = match(INDEX);
				}
				break;
			case 20:
				enterOuterAlt(_localctx, 20);
				{
				setState(1251);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw1 = match(LOCK);
				setState(1252);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw2 = match(TABLE);
				}
				break;
			case 21:
				enterOuterAlt(_localctx, 21);
				{
				setState(1253);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw1 = match(LOCK);
				setState(1254);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw2 = match(DATABASE);
				}
				break;
			case 22:
				enterOuterAlt(_localctx, 22);
				{
				setState(1255);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw1 = match(UNLOCK);
				setState(1256);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw2 = match(TABLE);
				}
				break;
			case 23:
				enterOuterAlt(_localctx, 23);
				{
				setState(1257);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw1 = match(UNLOCK);
				setState(1258);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw2 = match(DATABASE);
				}
				break;
			case 24:
				enterOuterAlt(_localctx, 24);
				{
				setState(1259);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw1 = match(CREATE);
				setState(1260);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw2 = match(TEMPORARY);
				setState(1261);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw3 = match(MACRO);
				}
				break;
			case 25:
				enterOuterAlt(_localctx, 25);
				{
				setState(1262);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw1 = match(DROP);
				setState(1263);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw2 = match(TEMPORARY);
				setState(1264);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw3 = match(MACRO);
				}
				break;
			case 26:
				enterOuterAlt(_localctx, 26);
				{
				setState(1265);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw1 = match(ALTER);
				setState(1266);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw2 = match(TABLE);
				setState(1267);
				tableIdentifier();
				setState(1268);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw3 = match(NOT);
				setState(1269);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw4 = match(CLUSTERED);
				}
				break;
			case 27:
				enterOuterAlt(_localctx, 27);
				{
				setState(1271);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw1 = match(ALTER);
				setState(1272);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw2 = match(TABLE);
				setState(1273);
				tableIdentifier();
				setState(1274);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw3 = match(CLUSTERED);
				setState(1275);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw4 = match(BY);
				}
				break;
			case 28:
				enterOuterAlt(_localctx, 28);
				{
				setState(1277);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw1 = match(ALTER);
				setState(1278);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw2 = match(TABLE);
				setState(1279);
				tableIdentifier();
				setState(1280);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw3 = match(NOT);
				setState(1281);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw4 = match(SORTED);
				}
				break;
			case 29:
				enterOuterAlt(_localctx, 29);
				{
				setState(1283);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw1 = match(ALTER);
				setState(1284);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw2 = match(TABLE);
				setState(1285);
				tableIdentifier();
				setState(1286);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw3 = match(SKEWED);
				setState(1287);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw4 = match(BY);
				}
				break;
			case 30:
				enterOuterAlt(_localctx, 30);
				{
				setState(1289);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw1 = match(ALTER);
				setState(1290);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw2 = match(TABLE);
				setState(1291);
				tableIdentifier();
				setState(1292);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw3 = match(NOT);
				setState(1293);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw4 = match(SKEWED);
				}
				break;
			case 31:
				enterOuterAlt(_localctx, 31);
				{
				setState(1295);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw1 = match(ALTER);
				setState(1296);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw2 = match(TABLE);
				setState(1297);
				tableIdentifier();
				setState(1298);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw3 = match(NOT);
				setState(1299);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw4 = match(STORED);
				setState(1300);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw5 = match(AS);
				setState(1301);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw6 = match(DIRECTORIES);
				}
				break;
			case 32:
				enterOuterAlt(_localctx, 32);
				{
				setState(1303);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw1 = match(ALTER);
				setState(1304);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw2 = match(TABLE);
				setState(1305);
				tableIdentifier();
				setState(1306);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw3 = match(SET);
				setState(1307);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw4 = match(SKEWED);
				setState(1308);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw5 = match(LOCATION);
				}
				break;
			case 33:
				enterOuterAlt(_localctx, 33);
				{
				setState(1310);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw1 = match(ALTER);
				setState(1311);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw2 = match(TABLE);
				setState(1312);
				tableIdentifier();
				setState(1313);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw3 = match(EXCHANGE);
				setState(1314);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw4 = match(PARTITION);
				}
				break;
			case 34:
				enterOuterAlt(_localctx, 34);
				{
				setState(1316);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw1 = match(ALTER);
				setState(1317);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw2 = match(TABLE);
				setState(1318);
				tableIdentifier();
				setState(1319);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw3 = match(ARCHIVE);
				setState(1320);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw4 = match(PARTITION);
				}
				break;
			case 35:
				enterOuterAlt(_localctx, 35);
				{
				setState(1322);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw1 = match(ALTER);
				setState(1323);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw2 = match(TABLE);
				setState(1324);
				tableIdentifier();
				setState(1325);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw3 = match(UNARCHIVE);
				setState(1326);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw4 = match(PARTITION);
				}
				break;
			case 36:
				enterOuterAlt(_localctx, 36);
				{
				setState(1328);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw1 = match(ALTER);
				setState(1329);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw2 = match(TABLE);
				setState(1330);
				tableIdentifier();
				setState(1331);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw3 = match(TOUCH);
				}
				break;
			case 37:
				enterOuterAlt(_localctx, 37);
				{
				setState(1333);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw1 = match(ALTER);
				setState(1334);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw2 = match(TABLE);
				setState(1335);
				tableIdentifier();
				setState(1337);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PARTITION) {
					{
					setState(1336);
					partitionSpec();
					}
				}

				setState(1339);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw3 = match(COMPACT);
				}
				break;
			case 38:
				enterOuterAlt(_localctx, 38);
				{
				setState(1341);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw1 = match(ALTER);
				setState(1342);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw2 = match(TABLE);
				setState(1343);
				tableIdentifier();
				setState(1345);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PARTITION) {
					{
					setState(1344);
					partitionSpec();
					}
				}

				setState(1347);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw3 = match(CONCATENATE);
				}
				break;
			case 39:
				enterOuterAlt(_localctx, 39);
				{
				setState(1349);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw1 = match(ALTER);
				setState(1350);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw2 = match(TABLE);
				setState(1351);
				tableIdentifier();
				setState(1353);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PARTITION) {
					{
					setState(1352);
					partitionSpec();
					}
				}

				setState(1355);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw3 = match(SET);
				setState(1356);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw4 = match(FILEFORMAT);
				}
				break;
			case 40:
				enterOuterAlt(_localctx, 40);
				{
				setState(1358);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw1 = match(ALTER);
				setState(1359);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw2 = match(TABLE);
				setState(1360);
				tableIdentifier();
				setState(1362);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PARTITION) {
					{
					setState(1361);
					partitionSpec();
					}
				}

				setState(1364);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw3 = match(REPLACE);
				setState(1365);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw4 = match(COLUMNS);
				}
				break;
			case 41:
				enterOuterAlt(_localctx, 41);
				{
				setState(1367);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw1 = match(START);
				setState(1368);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw2 = match(TRANSACTION);
				}
				break;
			case 42:
				enterOuterAlt(_localctx, 42);
				{
				setState(1369);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw1 = match(COMMIT);
				}
				break;
			case 43:
				enterOuterAlt(_localctx, 43);
				{
				setState(1370);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw1 = match(ROLLBACK);
				}
				break;
			case 44:
				enterOuterAlt(_localctx, 44);
				{
				setState(1371);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw1 = match(DFS);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CreateTableHeaderContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(SqlBaseParser.CREATE, 0); }
		public TerminalNode TABLE() { return getToken(SqlBaseParser.TABLE, 0); }
		public MultipartIdentifierContext multipartIdentifier() {
			return getRuleContext(MultipartIdentifierContext.class,0);
		}
		public TerminalNode TEMPORARY() { return getToken(SqlBaseParser.TEMPORARY, 0); }
		public TerminalNode EXTERNAL() { return getToken(SqlBaseParser.EXTERNAL, 0); }
		public TerminalNode IF() { return getToken(SqlBaseParser.IF, 0); }
		public TerminalNode NOT() { return getToken(SqlBaseParser.NOT, 0); }
		public TerminalNode EXISTS() { return getToken(SqlBaseParser.EXISTS, 0); }
		public CreateTableHeaderContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createTableHeader; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterCreateTableHeader(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitCreateTableHeader(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitCreateTableHeader(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateTableHeaderContext createTableHeader() throws RecognitionException {
		CreateTableHeaderContext _localctx = new CreateTableHeaderContext(_ctx, getState());
		enterRule(_localctx, 24, RULE_createTableHeader);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1374);
			match(CREATE);
			setState(1376);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==TEMPORARY) {
				{
				setState(1375);
				match(TEMPORARY);
				}
			}

			setState(1379);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EXTERNAL) {
				{
				setState(1378);
				match(EXTERNAL);
				}
			}

			setState(1381);
			match(TABLE);
			setState(1385);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,133,_ctx) ) {
			case 1:
				{
				setState(1382);
				match(IF);
				setState(1383);
				match(NOT);
				setState(1384);
				match(EXISTS);
				}
				break;
			}
			setState(1387);
			multipartIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ReplaceTableHeaderContext extends ParserRuleContext {
		public TerminalNode REPLACE() { return getToken(SqlBaseParser.REPLACE, 0); }
		public TerminalNode TABLE() { return getToken(SqlBaseParser.TABLE, 0); }
		public MultipartIdentifierContext multipartIdentifier() {
			return getRuleContext(MultipartIdentifierContext.class,0);
		}
		public TerminalNode CREATE() { return getToken(SqlBaseParser.CREATE, 0); }
		public TerminalNode OR() { return getToken(SqlBaseParser.OR, 0); }
		public ReplaceTableHeaderContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_replaceTableHeader; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterReplaceTableHeader(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitReplaceTableHeader(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitReplaceTableHeader(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ReplaceTableHeaderContext replaceTableHeader() throws RecognitionException {
		ReplaceTableHeaderContext _localctx = new ReplaceTableHeaderContext(_ctx, getState());
		enterRule(_localctx, 26, RULE_replaceTableHeader);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1391);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CREATE) {
				{
				setState(1389);
				match(CREATE);
				setState(1390);
				match(OR);
				}
			}

			setState(1393);
			match(REPLACE);
			setState(1394);
			match(TABLE);
			setState(1395);
			multipartIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class BucketSpecContext extends ParserRuleContext {
		public TerminalNode CLUSTERED() { return getToken(SqlBaseParser.CLUSTERED, 0); }
		public List<TerminalNode> BY() { return getTokens(SqlBaseParser.BY); }
		public TerminalNode BY(int i) {
			return getToken(SqlBaseParser.BY, i);
		}
		public IdentifierListContext identifierList() {
			return getRuleContext(IdentifierListContext.class,0);
		}
		public TerminalNode INTO() { return getToken(SqlBaseParser.INTO, 0); }
		public TerminalNode INTEGER_VALUE() { return getToken(SqlBaseParser.INTEGER_VALUE, 0); }
		public TerminalNode BUCKETS() { return getToken(SqlBaseParser.BUCKETS, 0); }
		public TerminalNode SORTED() { return getToken(SqlBaseParser.SORTED, 0); }
		public OrderedIdentifierListContext orderedIdentifierList() {
			return getRuleContext(OrderedIdentifierListContext.class,0);
		}
		public BucketSpecContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_bucketSpec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterBucketSpec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitBucketSpec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitBucketSpec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final BucketSpecContext bucketSpec() throws RecognitionException {
		BucketSpecContext _localctx = new BucketSpecContext(_ctx, getState());
		enterRule(_localctx, 28, RULE_bucketSpec);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1397);
			match(CLUSTERED);
			setState(1398);
			match(BY);
			setState(1399);
			identifierList();
			setState(1403);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==SORTED) {
				{
				setState(1400);
				match(SORTED);
				setState(1401);
				match(BY);
				setState(1402);
				orderedIdentifierList();
				}
			}

			setState(1405);
			match(INTO);
			setState(1406);
			match(INTEGER_VALUE);
			setState(1407);
			match(BUCKETS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SkewSpecContext extends ParserRuleContext {
		public TerminalNode SKEWED() { return getToken(SqlBaseParser.SKEWED, 0); }
		public TerminalNode BY() { return getToken(SqlBaseParser.BY, 0); }
		public IdentifierListContext identifierList() {
			return getRuleContext(IdentifierListContext.class,0);
		}
		public TerminalNode ON() { return getToken(SqlBaseParser.ON, 0); }
		public ConstantListContext constantList() {
			return getRuleContext(ConstantListContext.class,0);
		}
		public NestedConstantListContext nestedConstantList() {
			return getRuleContext(NestedConstantListContext.class,0);
		}
		public TerminalNode STORED() { return getToken(SqlBaseParser.STORED, 0); }
		public TerminalNode AS() { return getToken(SqlBaseParser.AS, 0); }
		public TerminalNode DIRECTORIES() { return getToken(SqlBaseParser.DIRECTORIES, 0); }
		public SkewSpecContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_skewSpec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterSkewSpec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitSkewSpec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitSkewSpec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SkewSpecContext skewSpec() throws RecognitionException {
		SkewSpecContext _localctx = new SkewSpecContext(_ctx, getState());
		enterRule(_localctx, 30, RULE_skewSpec);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1409);
			match(SKEWED);
			setState(1410);
			match(BY);
			setState(1411);
			identifierList();
			setState(1412);
			match(ON);
			setState(1415);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,136,_ctx) ) {
			case 1:
				{
				setState(1413);
				constantList();
				}
				break;
			case 2:
				{
				setState(1414);
				nestedConstantList();
				}
				break;
			}
			setState(1420);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,137,_ctx) ) {
			case 1:
				{
				setState(1417);
				match(STORED);
				setState(1418);
				match(AS);
				setState(1419);
				match(DIRECTORIES);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class LocationSpecContext extends ParserRuleContext {
		public TerminalNode LOCATION() { return getToken(SqlBaseParser.LOCATION, 0); }
		public StringLitContext stringLit() {
			return getRuleContext(StringLitContext.class,0);
		}
		public LocationSpecContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_locationSpec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterLocationSpec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitLocationSpec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitLocationSpec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LocationSpecContext locationSpec() throws RecognitionException {
		LocationSpecContext _localctx = new LocationSpecContext(_ctx, getState());
		enterRule(_localctx, 32, RULE_locationSpec);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1422);
			match(LOCATION);
			setState(1423);
			stringLit();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CommentSpecContext extends ParserRuleContext {
		public TerminalNode COMMENT() { return getToken(SqlBaseParser.COMMENT, 0); }
		public StringLitContext stringLit() {
			return getRuleContext(StringLitContext.class,0);
		}
		public CommentSpecContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_commentSpec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterCommentSpec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitCommentSpec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitCommentSpec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CommentSpecContext commentSpec() throws RecognitionException {
		CommentSpecContext _localctx = new CommentSpecContext(_ctx, getState());
		enterRule(_localctx, 34, RULE_commentSpec);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1425);
			match(COMMENT);
			setState(1426);
			stringLit();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class QueryContext extends ParserRuleContext {
		public QueryTermContext queryTerm() {
			return getRuleContext(QueryTermContext.class,0);
		}
		public QueryOrganizationContext queryOrganization() {
			return getRuleContext(QueryOrganizationContext.class,0);
		}
		public CtesContext ctes() {
			return getRuleContext(CtesContext.class,0);
		}
		public QueryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_query; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterQuery(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitQuery(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitQuery(this);
			else return visitor.visitChildren(this);
		}
	}

	public final QueryContext query() throws RecognitionException {
		QueryContext _localctx = new QueryContext(_ctx, getState());
		enterRule(_localctx, 36, RULE_query);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1429);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(1428);
				ctes();
				}
			}

			setState(1431);
			queryTerm(0);
			setState(1432);
			queryOrganization();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class InsertIntoContext extends ParserRuleContext {
		public InsertIntoContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_insertInto; }
	 
		public InsertIntoContext() { }
		public void copyFrom(InsertIntoContext ctx) {
			super.copyFrom(ctx);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class InsertIntoReplaceWhereContext extends InsertIntoContext {
		public TerminalNode INSERT() { return getToken(SqlBaseParser.INSERT, 0); }
		public TerminalNode INTO() { return getToken(SqlBaseParser.INTO, 0); }
		public MultipartIdentifierContext multipartIdentifier() {
			return getRuleContext(MultipartIdentifierContext.class,0);
		}
		public TerminalNode REPLACE() { return getToken(SqlBaseParser.REPLACE, 0); }
		public WhereClauseContext whereClause() {
			return getRuleContext(WhereClauseContext.class,0);
		}
		public TerminalNode TABLE() { return getToken(SqlBaseParser.TABLE, 0); }
		public InsertIntoReplaceWhereContext(InsertIntoContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterInsertIntoReplaceWhere(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitInsertIntoReplaceWhere(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitInsertIntoReplaceWhere(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class InsertOverwriteHiveDirContext extends InsertIntoContext {
		public StringLitContext path;
		public TerminalNode INSERT() { return getToken(SqlBaseParser.INSERT, 0); }
		public TerminalNode OVERWRITE() { return getToken(SqlBaseParser.OVERWRITE, 0); }
		public TerminalNode DIRECTORY() { return getToken(SqlBaseParser.DIRECTORY, 0); }
		public StringLitContext stringLit() {
			return getRuleContext(StringLitContext.class,0);
		}
		public TerminalNode LOCAL() { return getToken(SqlBaseParser.LOCAL, 0); }
		public RowFormatContext rowFormat() {
			return getRuleContext(RowFormatContext.class,0);
		}
		public CreateFileFormatContext createFileFormat() {
			return getRuleContext(CreateFileFormatContext.class,0);
		}
		public InsertOverwriteHiveDirContext(InsertIntoContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterInsertOverwriteHiveDir(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitInsertOverwriteHiveDir(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitInsertOverwriteHiveDir(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class InsertOverwriteDirContext extends InsertIntoContext {
		public StringLitContext path;
		public PropertyListContext options;
		public TerminalNode INSERT() { return getToken(SqlBaseParser.INSERT, 0); }
		public TerminalNode OVERWRITE() { return getToken(SqlBaseParser.OVERWRITE, 0); }
		public TerminalNode DIRECTORY() { return getToken(SqlBaseParser.DIRECTORY, 0); }
		public TableProviderContext tableProvider() {
			return getRuleContext(TableProviderContext.class,0);
		}
		public TerminalNode LOCAL() { return getToken(SqlBaseParser.LOCAL, 0); }
		public TerminalNode OPTIONS() { return getToken(SqlBaseParser.OPTIONS, 0); }
		public StringLitContext stringLit() {
			return getRuleContext(StringLitContext.class,0);
		}
		public PropertyListContext propertyList() {
			return getRuleContext(PropertyListContext.class,0);
		}
		public InsertOverwriteDirContext(InsertIntoContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterInsertOverwriteDir(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitInsertOverwriteDir(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitInsertOverwriteDir(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class InsertOverwriteTableContext extends InsertIntoContext {
		public TerminalNode INSERT() { return getToken(SqlBaseParser.INSERT, 0); }
		public TerminalNode OVERWRITE() { return getToken(SqlBaseParser.OVERWRITE, 0); }
		public MultipartIdentifierContext multipartIdentifier() {
			return getRuleContext(MultipartIdentifierContext.class,0);
		}
		public TerminalNode TABLE() { return getToken(SqlBaseParser.TABLE, 0); }
		public PartitionSpecContext partitionSpec() {
			return getRuleContext(PartitionSpecContext.class,0);
		}
		public IdentifierListContext identifierList() {
			return getRuleContext(IdentifierListContext.class,0);
		}
		public TerminalNode IF() { return getToken(SqlBaseParser.IF, 0); }
		public TerminalNode NOT() { return getToken(SqlBaseParser.NOT, 0); }
		public TerminalNode EXISTS() { return getToken(SqlBaseParser.EXISTS, 0); }
		public InsertOverwriteTableContext(InsertIntoContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterInsertOverwriteTable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitInsertOverwriteTable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitInsertOverwriteTable(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class InsertIntoTableContext extends InsertIntoContext {
		public TerminalNode INSERT() { return getToken(SqlBaseParser.INSERT, 0); }
		public TerminalNode INTO() { return getToken(SqlBaseParser.INTO, 0); }
		public MultipartIdentifierContext multipartIdentifier() {
			return getRuleContext(MultipartIdentifierContext.class,0);
		}
		public TerminalNode TABLE() { return getToken(SqlBaseParser.TABLE, 0); }
		public PartitionSpecContext partitionSpec() {
			return getRuleContext(PartitionSpecContext.class,0);
		}
		public TerminalNode IF() { return getToken(SqlBaseParser.IF, 0); }
		public TerminalNode NOT() { return getToken(SqlBaseParser.NOT, 0); }
		public TerminalNode EXISTS() { return getToken(SqlBaseParser.EXISTS, 0); }
		public IdentifierListContext identifierList() {
			return getRuleContext(IdentifierListContext.class,0);
		}
		public InsertIntoTableContext(InsertIntoContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterInsertIntoTable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitInsertIntoTable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitInsertIntoTable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final InsertIntoContext insertInto() throws RecognitionException {
		InsertIntoContext _localctx = new InsertIntoContext(_ctx, getState());
		enterRule(_localctx, 38, RULE_insertInto);
		int _la;
		try {
			setState(1504);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,154,_ctx) ) {
			case 1:
				_localctx = new InsertOverwriteTableContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(1434);
				match(INSERT);
				setState(1435);
				match(OVERWRITE);
				setState(1437);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,139,_ctx) ) {
				case 1:
					{
					setState(1436);
					match(TABLE);
					}
					break;
				}
				setState(1439);
				multipartIdentifier();
				setState(1446);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PARTITION) {
					{
					setState(1440);
					partitionSpec();
					setState(1444);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==IF) {
						{
						setState(1441);
						match(IF);
						setState(1442);
						match(NOT);
						setState(1443);
						match(EXISTS);
						}
					}

					}
				}

				setState(1449);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,142,_ctx) ) {
				case 1:
					{
					setState(1448);
					identifierList();
					}
					break;
				}
				}
				break;
			case 2:
				_localctx = new InsertIntoTableContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(1451);
				match(INSERT);
				setState(1452);
				match(INTO);
				setState(1454);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,143,_ctx) ) {
				case 1:
					{
					setState(1453);
					match(TABLE);
					}
					break;
				}
				setState(1456);
				multipartIdentifier();
				setState(1458);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PARTITION) {
					{
					setState(1457);
					partitionSpec();
					}
				}

				setState(1463);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IF) {
					{
					setState(1460);
					match(IF);
					setState(1461);
					match(NOT);
					setState(1462);
					match(EXISTS);
					}
				}

				setState(1466);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,146,_ctx) ) {
				case 1:
					{
					setState(1465);
					identifierList();
					}
					break;
				}
				}
				break;
			case 3:
				_localctx = new InsertIntoReplaceWhereContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(1468);
				match(INSERT);
				setState(1469);
				match(INTO);
				setState(1471);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,147,_ctx) ) {
				case 1:
					{
					setState(1470);
					match(TABLE);
					}
					break;
				}
				setState(1473);
				multipartIdentifier();
				setState(1474);
				match(REPLACE);
				setState(1475);
				whereClause();
				}
				break;
			case 4:
				_localctx = new InsertOverwriteHiveDirContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(1477);
				match(INSERT);
				setState(1478);
				match(OVERWRITE);
				setState(1480);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LOCAL) {
					{
					setState(1479);
					match(LOCAL);
					}
				}

				setState(1482);
				match(DIRECTORY);
				setState(1483);
				((InsertOverwriteHiveDirContext)_localctx).path = stringLit();
				setState(1485);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ROW) {
					{
					setState(1484);
					rowFormat();
					}
				}

				setState(1488);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==STORED) {
					{
					setState(1487);
					createFileFormat();
					}
				}

				}
				break;
			case 5:
				_localctx = new InsertOverwriteDirContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(1490);
				match(INSERT);
				setState(1491);
				match(OVERWRITE);
				setState(1493);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LOCAL) {
					{
					setState(1492);
					match(LOCAL);
					}
				}

				setState(1495);
				match(DIRECTORY);
				setState(1497);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,152,_ctx) ) {
				case 1:
					{
					setState(1496);
					((InsertOverwriteDirContext)_localctx).path = stringLit();
					}
					break;
				}
				setState(1499);
				tableProvider();
				setState(1502);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OPTIONS) {
					{
					setState(1500);
					match(OPTIONS);
					setState(1501);
					((InsertOverwriteDirContext)_localctx).options = propertyList();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class PartitionSpecLocationContext extends ParserRuleContext {
		public PartitionSpecContext partitionSpec() {
			return getRuleContext(PartitionSpecContext.class,0);
		}
		public LocationSpecContext locationSpec() {
			return getRuleContext(LocationSpecContext.class,0);
		}
		public PartitionSpecLocationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partitionSpecLocation; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterPartitionSpecLocation(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitPartitionSpecLocation(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitPartitionSpecLocation(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PartitionSpecLocationContext partitionSpecLocation() throws RecognitionException {
		PartitionSpecLocationContext _localctx = new PartitionSpecLocationContext(_ctx, getState());
		enterRule(_localctx, 40, RULE_partitionSpecLocation);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1506);
			partitionSpec();
			setState(1508);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LOCATION) {
				{
				setState(1507);
				locationSpec();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class PartitionSpecContext extends ParserRuleContext {
		public TerminalNode PARTITION() { return getToken(SqlBaseParser.PARTITION, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(SqlBaseParser.LEFT_PAREN, 0); }
		public List<PartitionValContext> partitionVal() {
			return getRuleContexts(PartitionValContext.class);
		}
		public PartitionValContext partitionVal(int i) {
			return getRuleContext(PartitionValContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(SqlBaseParser.RIGHT_PAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(SqlBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SqlBaseParser.COMMA, i);
		}
		public PartitionSpecContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partitionSpec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterPartitionSpec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitPartitionSpec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitPartitionSpec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PartitionSpecContext partitionSpec() throws RecognitionException {
		PartitionSpecContext _localctx = new PartitionSpecContext(_ctx, getState());
		enterRule(_localctx, 42, RULE_partitionSpec);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1510);
			match(PARTITION);
			setState(1511);
			match(LEFT_PAREN);
			setState(1512);
			partitionVal();
			setState(1517);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(1513);
				match(COMMA);
				setState(1514);
				partitionVal();
				}
				}
				setState(1519);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(1520);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class PartitionValContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode EQ() { return getToken(SqlBaseParser.EQ, 0); }
		public ConstantContext constant() {
			return getRuleContext(ConstantContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(SqlBaseParser.DEFAULT, 0); }
		public PartitionValContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partitionVal; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterPartitionVal(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitPartitionVal(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitPartitionVal(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PartitionValContext partitionVal() throws RecognitionException {
		PartitionValContext _localctx = new PartitionValContext(_ctx, getState());
		enterRule(_localctx, 44, RULE_partitionVal);
		int _la;
		try {
			setState(1531);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,158,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1522);
				identifier();
				setState(1525);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQ) {
					{
					setState(1523);
					match(EQ);
					setState(1524);
					constant();
					}
				}

				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1527);
				identifier();
				setState(1528);
				match(EQ);
				setState(1529);
				match(DEFAULT);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class NamespaceContext extends ParserRuleContext {
		public TerminalNode NAMESPACE() { return getToken(SqlBaseParser.NAMESPACE, 0); }
		public TerminalNode DATABASE() { return getToken(SqlBaseParser.DATABASE, 0); }
		public TerminalNode SCHEMA() { return getToken(SqlBaseParser.SCHEMA, 0); }
		public NamespaceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_namespace; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterNamespace(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitNamespace(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitNamespace(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NamespaceContext namespace() throws RecognitionException {
		NamespaceContext _localctx = new NamespaceContext(_ctx, getState());
		enterRule(_localctx, 46, RULE_namespace);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1533);
			_la = _input.LA(1);
			if ( !(_la==DATABASE || _la==NAMESPACE || _la==SCHEMA) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class NamespacesContext extends ParserRuleContext {
		public TerminalNode NAMESPACES() { return getToken(SqlBaseParser.NAMESPACES, 0); }
		public TerminalNode DATABASES() { return getToken(SqlBaseParser.DATABASES, 0); }
		public TerminalNode SCHEMAS() { return getToken(SqlBaseParser.SCHEMAS, 0); }
		public NamespacesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_namespaces; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterNamespaces(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitNamespaces(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitNamespaces(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NamespacesContext namespaces() throws RecognitionException {
		NamespacesContext _localctx = new NamespacesContext(_ctx, getState());
		enterRule(_localctx, 48, RULE_namespaces);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1535);
			_la = _input.LA(1);
			if ( !(_la==DATABASES || _la==NAMESPACES || _la==SCHEMAS) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DescribeFuncNameContext extends ParserRuleContext {
		public QualifiedNameContext qualifiedName() {
			return getRuleContext(QualifiedNameContext.class,0);
		}
		public StringLitContext stringLit() {
			return getRuleContext(StringLitContext.class,0);
		}
		public ComparisonOperatorContext comparisonOperator() {
			return getRuleContext(ComparisonOperatorContext.class,0);
		}
		public ArithmeticOperatorContext arithmeticOperator() {
			return getRuleContext(ArithmeticOperatorContext.class,0);
		}
		public PredicateOperatorContext predicateOperator() {
			return getRuleContext(PredicateOperatorContext.class,0);
		}
		public DescribeFuncNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_describeFuncName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterDescribeFuncName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitDescribeFuncName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitDescribeFuncName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DescribeFuncNameContext describeFuncName() throws RecognitionException {
		DescribeFuncNameContext _localctx = new DescribeFuncNameContext(_ctx, getState());
		enterRule(_localctx, 50, RULE_describeFuncName);
		try {
			setState(1542);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,159,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1537);
				qualifiedName();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1538);
				stringLit();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1539);
				comparisonOperator();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1540);
				arithmeticOperator();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(1541);
				predicateOperator();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DescribeColNameContext extends ParserRuleContext {
		public IdentifierContext identifier;
		public List<IdentifierContext> nameParts = new ArrayList<IdentifierContext>();
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public List<TerminalNode> DOT() { return getTokens(SqlBaseParser.DOT); }
		public TerminalNode DOT(int i) {
			return getToken(SqlBaseParser.DOT, i);
		}
		public DescribeColNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_describeColName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterDescribeColName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitDescribeColName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitDescribeColName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DescribeColNameContext describeColName() throws RecognitionException {
		DescribeColNameContext _localctx = new DescribeColNameContext(_ctx, getState());
		enterRule(_localctx, 52, RULE_describeColName);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1544);
			((DescribeColNameContext)_localctx).identifier = identifier();
			((DescribeColNameContext)_localctx).nameParts.add(((DescribeColNameContext)_localctx).identifier);
			setState(1549);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==DOT) {
				{
				{
				setState(1545);
				match(DOT);
				setState(1546);
				((DescribeColNameContext)_localctx).identifier = identifier();
				((DescribeColNameContext)_localctx).nameParts.add(((DescribeColNameContext)_localctx).identifier);
				}
				}
				setState(1551);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CtesContext extends ParserRuleContext {
		public TerminalNode WITH() { return getToken(SqlBaseParser.WITH, 0); }
		public List<NamedQueryContext> namedQuery() {
			return getRuleContexts(NamedQueryContext.class);
		}
		public NamedQueryContext namedQuery(int i) {
			return getRuleContext(NamedQueryContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SqlBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SqlBaseParser.COMMA, i);
		}
		public CtesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ctes; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterCtes(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitCtes(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitCtes(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CtesContext ctes() throws RecognitionException {
		CtesContext _localctx = new CtesContext(_ctx, getState());
		enterRule(_localctx, 54, RULE_ctes);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1552);
			match(WITH);
			setState(1553);
			namedQuery();
			setState(1558);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(1554);
				match(COMMA);
				setState(1555);
				namedQuery();
				}
				}
				setState(1560);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class NamedQueryContext extends ParserRuleContext {
		public ErrorCapturingIdentifierContext name;
		public IdentifierListContext columnAliases;
		public TerminalNode LEFT_PAREN() { return getToken(SqlBaseParser.LEFT_PAREN, 0); }
		public QueryContext query() {
			return getRuleContext(QueryContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(SqlBaseParser.RIGHT_PAREN, 0); }
		public ErrorCapturingIdentifierContext errorCapturingIdentifier() {
			return getRuleContext(ErrorCapturingIdentifierContext.class,0);
		}
		public TerminalNode AS() { return getToken(SqlBaseParser.AS, 0); }
		public IdentifierListContext identifierList() {
			return getRuleContext(IdentifierListContext.class,0);
		}
		public NamedQueryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_namedQuery; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterNamedQuery(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitNamedQuery(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitNamedQuery(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NamedQueryContext namedQuery() throws RecognitionException {
		NamedQueryContext _localctx = new NamedQueryContext(_ctx, getState());
		enterRule(_localctx, 56, RULE_namedQuery);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1561);
			((NamedQueryContext)_localctx).name = errorCapturingIdentifier();
			setState(1563);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,162,_ctx) ) {
			case 1:
				{
				setState(1562);
				((NamedQueryContext)_localctx).columnAliases = identifierList();
				}
				break;
			}
			setState(1566);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AS) {
				{
				setState(1565);
				match(AS);
				}
			}

			setState(1568);
			match(LEFT_PAREN);
			setState(1569);
			query();
			setState(1570);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TableProviderContext extends ParserRuleContext {
		public TerminalNode USING() { return getToken(SqlBaseParser.USING, 0); }
		public MultipartIdentifierContext multipartIdentifier() {
			return getRuleContext(MultipartIdentifierContext.class,0);
		}
		public TableProviderContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableProvider; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterTableProvider(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitTableProvider(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitTableProvider(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableProviderContext tableProvider() throws RecognitionException {
		TableProviderContext _localctx = new TableProviderContext(_ctx, getState());
		enterRule(_localctx, 58, RULE_tableProvider);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1572);
			match(USING);
			setState(1573);
			multipartIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CreateTableClausesContext extends ParserRuleContext {
		public PropertyListContext options;
		public PartitionFieldListContext partitioning;
		public PropertyListContext tableProps;
		public List<SkewSpecContext> skewSpec() {
			return getRuleContexts(SkewSpecContext.class);
		}
		public SkewSpecContext skewSpec(int i) {
			return getRuleContext(SkewSpecContext.class,i);
		}
		public List<BucketSpecContext> bucketSpec() {
			return getRuleContexts(BucketSpecContext.class);
		}
		public BucketSpecContext bucketSpec(int i) {
			return getRuleContext(BucketSpecContext.class,i);
		}
		public List<RowFormatContext> rowFormat() {
			return getRuleContexts(RowFormatContext.class);
		}
		public RowFormatContext rowFormat(int i) {
			return getRuleContext(RowFormatContext.class,i);
		}
		public List<CreateFileFormatContext> createFileFormat() {
			return getRuleContexts(CreateFileFormatContext.class);
		}
		public CreateFileFormatContext createFileFormat(int i) {
			return getRuleContext(CreateFileFormatContext.class,i);
		}
		public List<LocationSpecContext> locationSpec() {
			return getRuleContexts(LocationSpecContext.class);
		}
		public LocationSpecContext locationSpec(int i) {
			return getRuleContext(LocationSpecContext.class,i);
		}
		public List<CommentSpecContext> commentSpec() {
			return getRuleContexts(CommentSpecContext.class);
		}
		public CommentSpecContext commentSpec(int i) {
			return getRuleContext(CommentSpecContext.class,i);
		}
		public List<TerminalNode> OPTIONS() { return getTokens(SqlBaseParser.OPTIONS); }
		public TerminalNode OPTIONS(int i) {
			return getToken(SqlBaseParser.OPTIONS, i);
		}
		public List<TerminalNode> PARTITIONED() { return getTokens(SqlBaseParser.PARTITIONED); }
		public TerminalNode PARTITIONED(int i) {
			return getToken(SqlBaseParser.PARTITIONED, i);
		}
		public List<TerminalNode> BY() { return getTokens(SqlBaseParser.BY); }
		public TerminalNode BY(int i) {
			return getToken(SqlBaseParser.BY, i);
		}
		public List<TerminalNode> TBLPROPERTIES() { return getTokens(SqlBaseParser.TBLPROPERTIES); }
		public TerminalNode TBLPROPERTIES(int i) {
			return getToken(SqlBaseParser.TBLPROPERTIES, i);
		}
		public List<PropertyListContext> propertyList() {
			return getRuleContexts(PropertyListContext.class);
		}
		public PropertyListContext propertyList(int i) {
			return getRuleContext(PropertyListContext.class,i);
		}
		public List<PartitionFieldListContext> partitionFieldList() {
			return getRuleContexts(PartitionFieldListContext.class);
		}
		public PartitionFieldListContext partitionFieldList(int i) {
			return getRuleContext(PartitionFieldListContext.class,i);
		}
		public CreateTableClausesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createTableClauses; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterCreateTableClauses(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitCreateTableClauses(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitCreateTableClauses(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateTableClausesContext createTableClauses() throws RecognitionException {
		CreateTableClausesContext _localctx = new CreateTableClausesContext(_ctx, getState());
		enterRule(_localctx, 60, RULE_createTableClauses);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1590);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==CLUSTERED || _la==COMMENT || ((((_la - 155)) & ~0x3f) == 0 && ((1L << (_la - 155)) & 4400193994753L) != 0) || ((((_la - 233)) & ~0x3f) == 0 && ((1L << (_la - 233)) & 34368192513L) != 0)) {
				{
				setState(1588);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case OPTIONS:
					{
					{
					setState(1575);
					match(OPTIONS);
					setState(1576);
					((CreateTableClausesContext)_localctx).options = propertyList();
					}
					}
					break;
				case PARTITIONED:
					{
					{
					setState(1577);
					match(PARTITIONED);
					setState(1578);
					match(BY);
					setState(1579);
					((CreateTableClausesContext)_localctx).partitioning = partitionFieldList();
					}
					}
					break;
				case SKEWED:
					{
					setState(1580);
					skewSpec();
					}
					break;
				case CLUSTERED:
					{
					setState(1581);
					bucketSpec();
					}
					break;
				case ROW:
					{
					setState(1582);
					rowFormat();
					}
					break;
				case STORED:
					{
					setState(1583);
					createFileFormat();
					}
					break;
				case LOCATION:
					{
					setState(1584);
					locationSpec();
					}
					break;
				case COMMENT:
					{
					setState(1585);
					commentSpec();
					}
					break;
				case TBLPROPERTIES:
					{
					{
					setState(1586);
					match(TBLPROPERTIES);
					setState(1587);
					((CreateTableClausesContext)_localctx).tableProps = propertyList();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				setState(1592);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class PropertyListContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(SqlBaseParser.LEFT_PAREN, 0); }
		public List<PropertyContext> property() {
			return getRuleContexts(PropertyContext.class);
		}
		public PropertyContext property(int i) {
			return getRuleContext(PropertyContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(SqlBaseParser.RIGHT_PAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(SqlBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SqlBaseParser.COMMA, i);
		}
		public PropertyListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_propertyList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterPropertyList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitPropertyList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitPropertyList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PropertyListContext propertyList() throws RecognitionException {
		PropertyListContext _localctx = new PropertyListContext(_ctx, getState());
		enterRule(_localctx, 62, RULE_propertyList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1593);
			match(LEFT_PAREN);
			setState(1594);
			property();
			setState(1599);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(1595);
				match(COMMA);
				setState(1596);
				property();
				}
				}
				setState(1601);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(1602);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class PropertyContext extends ParserRuleContext {
		public PropertyKeyContext key;
		public PropertyValueContext value;
		public PropertyKeyContext propertyKey() {
			return getRuleContext(PropertyKeyContext.class,0);
		}
		public PropertyValueContext propertyValue() {
			return getRuleContext(PropertyValueContext.class,0);
		}
		public TerminalNode EQ() { return getToken(SqlBaseParser.EQ, 0); }
		public PropertyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_property; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterProperty(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitProperty(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitProperty(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PropertyContext property() throws RecognitionException {
		PropertyContext _localctx = new PropertyContext(_ctx, getState());
		enterRule(_localctx, 64, RULE_property);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1604);
			((PropertyContext)_localctx).key = propertyKey();
			setState(1609);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,168,_ctx) ) {
			case 1:
				{
				setState(1606);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,167,_ctx) ) {
				case 1:
					{
					setState(1605);
					match(EQ);
					}
					break;
				}
				setState(1608);
				((PropertyContext)_localctx).value = propertyValue();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class PropertyKeyContext extends ParserRuleContext {
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public List<TerminalNode> DOT() { return getTokens(SqlBaseParser.DOT); }
		public TerminalNode DOT(int i) {
			return getToken(SqlBaseParser.DOT, i);
		}
		public StringLitContext stringLit() {
			return getRuleContext(StringLitContext.class,0);
		}
		public PropertyKeyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_propertyKey; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterPropertyKey(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitPropertyKey(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitPropertyKey(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PropertyKeyContext propertyKey() throws RecognitionException {
		PropertyKeyContext _localctx = new PropertyKeyContext(_ctx, getState());
		enterRule(_localctx, 66, RULE_propertyKey);
		try {
			int _alt;
			setState(1620);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,170,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1611);
				identifier();
				setState(1616);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,169,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(1612);
						match(DOT);
						setState(1613);
						identifier();
						}
						} 
					}
					setState(1618);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,169,_ctx);
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1619);
				stringLit();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class PropertyValueContext extends ParserRuleContext {
		public TerminalNode INTEGER_VALUE() { return getToken(SqlBaseParser.INTEGER_VALUE, 0); }
		public TerminalNode DECIMAL_VALUE() { return getToken(SqlBaseParser.DECIMAL_VALUE, 0); }
		public BooleanValueContext booleanValue() {
			return getRuleContext(BooleanValueContext.class,0);
		}
		public StringLitContext stringLit() {
			return getRuleContext(StringLitContext.class,0);
		}
		public PropertyValueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_propertyValue; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterPropertyValue(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitPropertyValue(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitPropertyValue(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PropertyValueContext propertyValue() throws RecognitionException {
		PropertyValueContext _localctx = new PropertyValueContext(_ctx, getState());
		enterRule(_localctx, 68, RULE_propertyValue);
		try {
			setState(1626);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,171,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1622);
				match(INTEGER_VALUE);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1623);
				match(DECIMAL_VALUE);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1624);
				booleanValue();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1625);
				stringLit();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ConstantListContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(SqlBaseParser.LEFT_PAREN, 0); }
		public List<ConstantContext> constant() {
			return getRuleContexts(ConstantContext.class);
		}
		public ConstantContext constant(int i) {
			return getRuleContext(ConstantContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(SqlBaseParser.RIGHT_PAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(SqlBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SqlBaseParser.COMMA, i);
		}
		public ConstantListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constantList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterConstantList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitConstantList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitConstantList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ConstantListContext constantList() throws RecognitionException {
		ConstantListContext _localctx = new ConstantListContext(_ctx, getState());
		enterRule(_localctx, 70, RULE_constantList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1628);
			match(LEFT_PAREN);
			setState(1629);
			constant();
			setState(1634);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(1630);
				match(COMMA);
				setState(1631);
				constant();
				}
				}
				setState(1636);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(1637);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class NestedConstantListContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(SqlBaseParser.LEFT_PAREN, 0); }
		public List<ConstantListContext> constantList() {
			return getRuleContexts(ConstantListContext.class);
		}
		public ConstantListContext constantList(int i) {
			return getRuleContext(ConstantListContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(SqlBaseParser.RIGHT_PAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(SqlBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SqlBaseParser.COMMA, i);
		}
		public NestedConstantListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_nestedConstantList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterNestedConstantList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitNestedConstantList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitNestedConstantList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NestedConstantListContext nestedConstantList() throws RecognitionException {
		NestedConstantListContext _localctx = new NestedConstantListContext(_ctx, getState());
		enterRule(_localctx, 72, RULE_nestedConstantList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1639);
			match(LEFT_PAREN);
			setState(1640);
			constantList();
			setState(1645);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(1641);
				match(COMMA);
				setState(1642);
				constantList();
				}
				}
				setState(1647);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(1648);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CreateFileFormatContext extends ParserRuleContext {
		public TerminalNode STORED() { return getToken(SqlBaseParser.STORED, 0); }
		public TerminalNode AS() { return getToken(SqlBaseParser.AS, 0); }
		public FileFormatContext fileFormat() {
			return getRuleContext(FileFormatContext.class,0);
		}
		public TerminalNode BY() { return getToken(SqlBaseParser.BY, 0); }
		public StorageHandlerContext storageHandler() {
			return getRuleContext(StorageHandlerContext.class,0);
		}
		public CreateFileFormatContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createFileFormat; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterCreateFileFormat(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitCreateFileFormat(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitCreateFileFormat(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateFileFormatContext createFileFormat() throws RecognitionException {
		CreateFileFormatContext _localctx = new CreateFileFormatContext(_ctx, getState());
		enterRule(_localctx, 74, RULE_createFileFormat);
		try {
			setState(1656);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,174,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1650);
				match(STORED);
				setState(1651);
				match(AS);
				setState(1652);
				fileFormat();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1653);
				match(STORED);
				setState(1654);
				match(BY);
				setState(1655);
				storageHandler();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class FileFormatContext extends ParserRuleContext {
		public FileFormatContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fileFormat; }
	 
		public FileFormatContext() { }
		public void copyFrom(FileFormatContext ctx) {
			super.copyFrom(ctx);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class TableFileFormatContext extends FileFormatContext {
		public StringLitContext inFmt;
		public StringLitContext outFmt;
		public TerminalNode INPUTFORMAT() { return getToken(SqlBaseParser.INPUTFORMAT, 0); }
		public TerminalNode OUTPUTFORMAT() { return getToken(SqlBaseParser.OUTPUTFORMAT, 0); }
		public List<StringLitContext> stringLit() {
			return getRuleContexts(StringLitContext.class);
		}
		public StringLitContext stringLit(int i) {
			return getRuleContext(StringLitContext.class,i);
		}
		public TableFileFormatContext(FileFormatContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterTableFileFormat(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitTableFileFormat(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitTableFileFormat(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class GenericFileFormatContext extends FileFormatContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public GenericFileFormatContext(FileFormatContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterGenericFileFormat(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitGenericFileFormat(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitGenericFileFormat(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FileFormatContext fileFormat() throws RecognitionException {
		FileFormatContext _localctx = new FileFormatContext(_ctx, getState());
		enterRule(_localctx, 76, RULE_fileFormat);
		try {
			setState(1664);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,175,_ctx) ) {
			case 1:
				_localctx = new TableFileFormatContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(1658);
				match(INPUTFORMAT);
				setState(1659);
				((TableFileFormatContext)_localctx).inFmt = stringLit();
				setState(1660);
				match(OUTPUTFORMAT);
				setState(1661);
				((TableFileFormatContext)_localctx).outFmt = stringLit();
				}
				break;
			case 2:
				_localctx = new GenericFileFormatContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(1663);
				identifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class StorageHandlerContext extends ParserRuleContext {
		public StringLitContext stringLit() {
			return getRuleContext(StringLitContext.class,0);
		}
		public TerminalNode WITH() { return getToken(SqlBaseParser.WITH, 0); }
		public TerminalNode SERDEPROPERTIES() { return getToken(SqlBaseParser.SERDEPROPERTIES, 0); }
		public PropertyListContext propertyList() {
			return getRuleContext(PropertyListContext.class,0);
		}
		public StorageHandlerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_storageHandler; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterStorageHandler(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitStorageHandler(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitStorageHandler(this);
			else return visitor.visitChildren(this);
		}
	}

	public final StorageHandlerContext storageHandler() throws RecognitionException {
		StorageHandlerContext _localctx = new StorageHandlerContext(_ctx, getState());
		enterRule(_localctx, 78, RULE_storageHandler);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1666);
			stringLit();
			setState(1670);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,176,_ctx) ) {
			case 1:
				{
				setState(1667);
				match(WITH);
				setState(1668);
				match(SERDEPROPERTIES);
				setState(1669);
				propertyList();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ResourceContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public StringLitContext stringLit() {
			return getRuleContext(StringLitContext.class,0);
		}
		public ResourceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_resource; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterResource(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitResource(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitResource(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ResourceContext resource() throws RecognitionException {
		ResourceContext _localctx = new ResourceContext(_ctx, getState());
		enterRule(_localctx, 80, RULE_resource);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1672);
			identifier();
			setState(1673);
			stringLit();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DmlStatementNoWithContext extends ParserRuleContext {
		public DmlStatementNoWithContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dmlStatementNoWith; }
	 
		public DmlStatementNoWithContext() { }
		public void copyFrom(DmlStatementNoWithContext ctx) {
			super.copyFrom(ctx);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class DeleteFromTableContext extends DmlStatementNoWithContext {
		public TerminalNode DELETE() { return getToken(SqlBaseParser.DELETE, 0); }
		public TerminalNode FROM() { return getToken(SqlBaseParser.FROM, 0); }
		public MultipartIdentifierContext multipartIdentifier() {
			return getRuleContext(MultipartIdentifierContext.class,0);
		}
		public TableAliasContext tableAlias() {
			return getRuleContext(TableAliasContext.class,0);
		}
		public WhereClauseContext whereClause() {
			return getRuleContext(WhereClauseContext.class,0);
		}
		public DeleteFromTableContext(DmlStatementNoWithContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterDeleteFromTable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitDeleteFromTable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitDeleteFromTable(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class SingleInsertQueryContext extends DmlStatementNoWithContext {
		public InsertIntoContext insertInto() {
			return getRuleContext(InsertIntoContext.class,0);
		}
		public QueryContext query() {
			return getRuleContext(QueryContext.class,0);
		}
		public SingleInsertQueryContext(DmlStatementNoWithContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterSingleInsertQuery(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitSingleInsertQuery(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitSingleInsertQuery(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class MultiInsertQueryContext extends DmlStatementNoWithContext {
		public FromClauseContext fromClause() {
			return getRuleContext(FromClauseContext.class,0);
		}
		public List<MultiInsertQueryBodyContext> multiInsertQueryBody() {
			return getRuleContexts(MultiInsertQueryBodyContext.class);
		}
		public MultiInsertQueryBodyContext multiInsertQueryBody(int i) {
			return getRuleContext(MultiInsertQueryBodyContext.class,i);
		}
		public MultiInsertQueryContext(DmlStatementNoWithContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterMultiInsertQuery(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitMultiInsertQuery(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitMultiInsertQuery(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class UpdateTableContext extends DmlStatementNoWithContext {
		public TerminalNode UPDATE() { return getToken(SqlBaseParser.UPDATE, 0); }
		public MultipartIdentifierContext multipartIdentifier() {
			return getRuleContext(MultipartIdentifierContext.class,0);
		}
		public TableAliasContext tableAlias() {
			return getRuleContext(TableAliasContext.class,0);
		}
		public SetClauseContext setClause() {
			return getRuleContext(SetClauseContext.class,0);
		}
		public WhereClauseContext whereClause() {
			return getRuleContext(WhereClauseContext.class,0);
		}
		public UpdateTableContext(DmlStatementNoWithContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterUpdateTable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitUpdateTable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitUpdateTable(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class MergeIntoTableContext extends DmlStatementNoWithContext {
		public MultipartIdentifierContext target;
		public TableAliasContext targetAlias;
		public MultipartIdentifierContext source;
		public QueryContext sourceQuery;
		public TableAliasContext sourceAlias;
		public BooleanExpressionContext mergeCondition;
		public TerminalNode MERGE() { return getToken(SqlBaseParser.MERGE, 0); }
		public TerminalNode INTO() { return getToken(SqlBaseParser.INTO, 0); }
		public TerminalNode USING() { return getToken(SqlBaseParser.USING, 0); }
		public TerminalNode ON() { return getToken(SqlBaseParser.ON, 0); }
		public List<MultipartIdentifierContext> multipartIdentifier() {
			return getRuleContexts(MultipartIdentifierContext.class);
		}
		public MultipartIdentifierContext multipartIdentifier(int i) {
			return getRuleContext(MultipartIdentifierContext.class,i);
		}
		public List<TableAliasContext> tableAlias() {
			return getRuleContexts(TableAliasContext.class);
		}
		public TableAliasContext tableAlias(int i) {
			return getRuleContext(TableAliasContext.class,i);
		}
		public BooleanExpressionContext booleanExpression() {
			return getRuleContext(BooleanExpressionContext.class,0);
		}
		public TerminalNode LEFT_PAREN() { return getToken(SqlBaseParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(SqlBaseParser.RIGHT_PAREN, 0); }
		public QueryContext query() {
			return getRuleContext(QueryContext.class,0);
		}
		public List<MatchedClauseContext> matchedClause() {
			return getRuleContexts(MatchedClauseContext.class);
		}
		public MatchedClauseContext matchedClause(int i) {
			return getRuleContext(MatchedClauseContext.class,i);
		}
		public List<NotMatchedClauseContext> notMatchedClause() {
			return getRuleContexts(NotMatchedClauseContext.class);
		}
		public NotMatchedClauseContext notMatchedClause(int i) {
			return getRuleContext(NotMatchedClauseContext.class,i);
		}
		public List<NotMatchedBySourceClauseContext> notMatchedBySourceClause() {
			return getRuleContexts(NotMatchedBySourceClauseContext.class);
		}
		public NotMatchedBySourceClauseContext notMatchedBySourceClause(int i) {
			return getRuleContext(NotMatchedBySourceClauseContext.class,i);
		}
		public MergeIntoTableContext(DmlStatementNoWithContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterMergeIntoTable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitMergeIntoTable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitMergeIntoTable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DmlStatementNoWithContext dmlStatementNoWith() throws RecognitionException {
		DmlStatementNoWithContext _localctx = new DmlStatementNoWithContext(_ctx, getState());
		enterRule(_localctx, 82, RULE_dmlStatementNoWith);
		int _la;
		try {
			int _alt;
			setState(1731);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case INSERT:
				_localctx = new SingleInsertQueryContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(1675);
				insertInto();
				setState(1676);
				query();
				}
				break;
			case FROM:
				_localctx = new MultiInsertQueryContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(1678);
				fromClause();
				setState(1680); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(1679);
					multiInsertQueryBody();
					}
					}
					setState(1682); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==INSERT );
				}
				break;
			case DELETE:
				_localctx = new DeleteFromTableContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(1684);
				match(DELETE);
				setState(1685);
				match(FROM);
				setState(1686);
				multipartIdentifier();
				setState(1687);
				tableAlias();
				setState(1689);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WHERE) {
					{
					setState(1688);
					whereClause();
					}
				}

				}
				break;
			case UPDATE:
				_localctx = new UpdateTableContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(1691);
				match(UPDATE);
				setState(1692);
				multipartIdentifier();
				setState(1693);
				tableAlias();
				setState(1694);
				setClause();
				setState(1696);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WHERE) {
					{
					setState(1695);
					whereClause();
					}
				}

				}
				break;
			case MERGE:
				_localctx = new MergeIntoTableContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(1698);
				match(MERGE);
				setState(1699);
				match(INTO);
				setState(1700);
				((MergeIntoTableContext)_localctx).target = multipartIdentifier();
				setState(1701);
				((MergeIntoTableContext)_localctx).targetAlias = tableAlias();
				setState(1702);
				match(USING);
				setState(1708);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,180,_ctx) ) {
				case 1:
					{
					setState(1703);
					((MergeIntoTableContext)_localctx).source = multipartIdentifier();
					}
					break;
				case 2:
					{
					setState(1704);
					match(LEFT_PAREN);
					setState(1705);
					((MergeIntoTableContext)_localctx).sourceQuery = query();
					setState(1706);
					match(RIGHT_PAREN);
					}
					break;
				}
				setState(1710);
				((MergeIntoTableContext)_localctx).sourceAlias = tableAlias();
				setState(1711);
				match(ON);
				setState(1712);
				((MergeIntoTableContext)_localctx).mergeCondition = booleanExpression(0);
				setState(1716);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,181,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(1713);
						matchedClause();
						}
						} 
					}
					setState(1718);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,181,_ctx);
				}
				setState(1722);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,182,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(1719);
						notMatchedClause();
						}
						} 
					}
					setState(1724);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,182,_ctx);
				}
				setState(1728);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==WHEN) {
					{
					{
					setState(1725);
					notMatchedBySourceClause();
					}
					}
					setState(1730);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class QueryOrganizationContext extends ParserRuleContext {
		public SortItemContext sortItem;
		public List<SortItemContext> order = new ArrayList<SortItemContext>();
		public ExpressionContext expression;
		public List<ExpressionContext> clusterBy = new ArrayList<ExpressionContext>();
		public List<ExpressionContext> distributeBy = new ArrayList<ExpressionContext>();
		public List<SortItemContext> sort = new ArrayList<SortItemContext>();
		public ExpressionContext limit;
		public ExpressionContext offset;
		public TerminalNode ORDER() { return getToken(SqlBaseParser.ORDER, 0); }
		public List<TerminalNode> BY() { return getTokens(SqlBaseParser.BY); }
		public TerminalNode BY(int i) {
			return getToken(SqlBaseParser.BY, i);
		}
		public TerminalNode CLUSTER() { return getToken(SqlBaseParser.CLUSTER, 0); }
		public TerminalNode DISTRIBUTE() { return getToken(SqlBaseParser.DISTRIBUTE, 0); }
		public TerminalNode SORT() { return getToken(SqlBaseParser.SORT, 0); }
		public WindowClauseContext windowClause() {
			return getRuleContext(WindowClauseContext.class,0);
		}
		public TerminalNode LIMIT() { return getToken(SqlBaseParser.LIMIT, 0); }
		public TerminalNode OFFSET() { return getToken(SqlBaseParser.OFFSET, 0); }
		public List<SortItemContext> sortItem() {
			return getRuleContexts(SortItemContext.class);
		}
		public SortItemContext sortItem(int i) {
			return getRuleContext(SortItemContext.class,i);
		}
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TerminalNode ALL() { return getToken(SqlBaseParser.ALL, 0); }
		public List<TerminalNode> COMMA() { return getTokens(SqlBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SqlBaseParser.COMMA, i);
		}
		public QueryOrganizationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_queryOrganization; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterQueryOrganization(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitQueryOrganization(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitQueryOrganization(this);
			else return visitor.visitChildren(this);
		}
	}

	public final QueryOrganizationContext queryOrganization() throws RecognitionException {
		QueryOrganizationContext _localctx = new QueryOrganizationContext(_ctx, getState());
		enterRule(_localctx, 84, RULE_queryOrganization);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1743);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,186,_ctx) ) {
			case 1:
				{
				setState(1733);
				match(ORDER);
				setState(1734);
				match(BY);
				setState(1735);
				((QueryOrganizationContext)_localctx).sortItem = sortItem();
				((QueryOrganizationContext)_localctx).order.add(((QueryOrganizationContext)_localctx).sortItem);
				setState(1740);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,185,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(1736);
						match(COMMA);
						setState(1737);
						((QueryOrganizationContext)_localctx).sortItem = sortItem();
						((QueryOrganizationContext)_localctx).order.add(((QueryOrganizationContext)_localctx).sortItem);
						}
						} 
					}
					setState(1742);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,185,_ctx);
				}
				}
				break;
			}
			setState(1755);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,188,_ctx) ) {
			case 1:
				{
				setState(1745);
				match(CLUSTER);
				setState(1746);
				match(BY);
				setState(1747);
				((QueryOrganizationContext)_localctx).expression = expression();
				((QueryOrganizationContext)_localctx).clusterBy.add(((QueryOrganizationContext)_localctx).expression);
				setState(1752);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,187,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(1748);
						match(COMMA);
						setState(1749);
						((QueryOrganizationContext)_localctx).expression = expression();
						((QueryOrganizationContext)_localctx).clusterBy.add(((QueryOrganizationContext)_localctx).expression);
						}
						} 
					}
					setState(1754);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,187,_ctx);
				}
				}
				break;
			}
			setState(1767);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,190,_ctx) ) {
			case 1:
				{
				setState(1757);
				match(DISTRIBUTE);
				setState(1758);
				match(BY);
				setState(1759);
				((QueryOrganizationContext)_localctx).expression = expression();
				((QueryOrganizationContext)_localctx).distributeBy.add(((QueryOrganizationContext)_localctx).expression);
				setState(1764);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,189,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(1760);
						match(COMMA);
						setState(1761);
						((QueryOrganizationContext)_localctx).expression = expression();
						((QueryOrganizationContext)_localctx).distributeBy.add(((QueryOrganizationContext)_localctx).expression);
						}
						} 
					}
					setState(1766);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,189,_ctx);
				}
				}
				break;
			}
			setState(1779);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,192,_ctx) ) {
			case 1:
				{
				setState(1769);
				match(SORT);
				setState(1770);
				match(BY);
				setState(1771);
				((QueryOrganizationContext)_localctx).sortItem = sortItem();
				((QueryOrganizationContext)_localctx).sort.add(((QueryOrganizationContext)_localctx).sortItem);
				setState(1776);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,191,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(1772);
						match(COMMA);
						setState(1773);
						((QueryOrganizationContext)_localctx).sortItem = sortItem();
						((QueryOrganizationContext)_localctx).sort.add(((QueryOrganizationContext)_localctx).sortItem);
						}
						} 
					}
					setState(1778);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,191,_ctx);
				}
				}
				break;
			}
			setState(1782);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,193,_ctx) ) {
			case 1:
				{
				setState(1781);
				windowClause();
				}
				break;
			}
			setState(1789);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,195,_ctx) ) {
			case 1:
				{
				setState(1784);
				match(LIMIT);
				setState(1787);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,194,_ctx) ) {
				case 1:
					{
					setState(1785);
					match(ALL);
					}
					break;
				case 2:
					{
					setState(1786);
					((QueryOrganizationContext)_localctx).limit = expression();
					}
					break;
				}
				}
				break;
			}
			setState(1793);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,196,_ctx) ) {
			case 1:
				{
				setState(1791);
				match(OFFSET);
				setState(1792);
				((QueryOrganizationContext)_localctx).offset = expression();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class MultiInsertQueryBodyContext extends ParserRuleContext {
		public InsertIntoContext insertInto() {
			return getRuleContext(InsertIntoContext.class,0);
		}
		public FromStatementBodyContext fromStatementBody() {
			return getRuleContext(FromStatementBodyContext.class,0);
		}
		public MultiInsertQueryBodyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_multiInsertQueryBody; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterMultiInsertQueryBody(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitMultiInsertQueryBody(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitMultiInsertQueryBody(this);
			else return visitor.visitChildren(this);
		}
	}

	public final MultiInsertQueryBodyContext multiInsertQueryBody() throws RecognitionException {
		MultiInsertQueryBodyContext _localctx = new MultiInsertQueryBodyContext(_ctx, getState());
		enterRule(_localctx, 86, RULE_multiInsertQueryBody);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1795);
			insertInto();
			setState(1796);
			fromStatementBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class QueryTermContext extends ParserRuleContext {
		public QueryTermContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_queryTerm; }
	 
		public QueryTermContext() { }
		public void copyFrom(QueryTermContext ctx) {
			super.copyFrom(ctx);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class QueryTermDefaultContext extends QueryTermContext {
		public QueryPrimaryContext queryPrimary() {
			return getRuleContext(QueryPrimaryContext.class,0);
		}
		public QueryTermDefaultContext(QueryTermContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterQueryTermDefault(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitQueryTermDefault(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitQueryTermDefault(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class SetOperationContext extends QueryTermContext {
		public QueryTermContext left;
		public Token operator;
		public QueryTermContext right;
		public List<QueryTermContext> queryTerm() {
			return getRuleContexts(QueryTermContext.class);
		}
		public QueryTermContext queryTerm(int i) {
			return getRuleContext(QueryTermContext.class,i);
		}
		public TerminalNode INTERSECT() { return getToken(SqlBaseParser.INTERSECT, 0); }
		public TerminalNode UNION() { return getToken(SqlBaseParser.UNION, 0); }
		public TerminalNode EXCEPT() { return getToken(SqlBaseParser.EXCEPT, 0); }
		public TerminalNode SETMINUS() { return getToken(SqlBaseParser.SETMINUS, 0); }
		public SetQuantifierContext setQuantifier() {
			return getRuleContext(SetQuantifierContext.class,0);
		}
		public SetOperationContext(QueryTermContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterSetOperation(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitSetOperation(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitSetOperation(this);
			else return visitor.visitChildren(this);
		}
	}

	public final QueryTermContext queryTerm() throws RecognitionException {
		return queryTerm(0);
	}

	private QueryTermContext queryTerm(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		QueryTermContext _localctx = new QueryTermContext(_ctx, _parentState);
		QueryTermContext _prevctx = _localctx;
		int _startState = 88;
		enterRecursionRule(_localctx, 88, RULE_queryTerm, _p);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new QueryTermDefaultContext(_localctx);
			_ctx = _localctx;
			_prevctx = _localctx;

			setState(1799);
			queryPrimary();
			}
			_ctx.stop = _input.LT(-1);
			setState(1824);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,201,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					setState(1822);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,200,_ctx) ) {
					case 1:
						{
						_localctx = new SetOperationContext(new QueryTermContext(_parentctx, _parentState));
						((SetOperationContext)_localctx).left = _prevctx;
						pushNewRecursionContext(_localctx, _startState, RULE_queryTerm);
						setState(1801);
						if (!(precpred(_ctx, 3))) throw new FailedPredicateException(this, "precpred(_ctx, 3)");
						setState(1802);
						if (!(legacy_setops_precedence_enabled)) throw new FailedPredicateException(this, "legacy_setops_precedence_enabled");
						setState(1803);
						((SetOperationContext)_localctx).operator = _input.LT(1);
						_la = _input.LA(1);
						if ( !(_la==EXCEPT || _la==INTERSECT || _la==SETMINUS || _la==UNION) ) {
							((SetOperationContext)_localctx).operator = (Token)_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						setState(1805);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==ALL || _la==DISTINCT) {
							{
							setState(1804);
							setQuantifier();
							}
						}

						setState(1807);
						((SetOperationContext)_localctx).right = queryTerm(4);
						}
						break;
					case 2:
						{
						_localctx = new SetOperationContext(new QueryTermContext(_parentctx, _parentState));
						((SetOperationContext)_localctx).left = _prevctx;
						pushNewRecursionContext(_localctx, _startState, RULE_queryTerm);
						setState(1808);
						if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
						setState(1809);
						if (!(!legacy_setops_precedence_enabled)) throw new FailedPredicateException(this, "!legacy_setops_precedence_enabled");
						setState(1810);
						((SetOperationContext)_localctx).operator = match(INTERSECT);
						setState(1812);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==ALL || _la==DISTINCT) {
							{
							setState(1811);
							setQuantifier();
							}
						}

						setState(1814);
						((SetOperationContext)_localctx).right = queryTerm(3);
						}
						break;
					case 3:
						{
						_localctx = new SetOperationContext(new QueryTermContext(_parentctx, _parentState));
						((SetOperationContext)_localctx).left = _prevctx;
						pushNewRecursionContext(_localctx, _startState, RULE_queryTerm);
						setState(1815);
						if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
						setState(1816);
						if (!(!legacy_setops_precedence_enabled)) throw new FailedPredicateException(this, "!legacy_setops_precedence_enabled");
						setState(1817);
						((SetOperationContext)_localctx).operator = _input.LT(1);
						_la = _input.LA(1);
						if ( !(_la==EXCEPT || _la==SETMINUS || _la==UNION) ) {
							((SetOperationContext)_localctx).operator = (Token)_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						setState(1819);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==ALL || _la==DISTINCT) {
							{
							setState(1818);
							setQuantifier();
							}
						}

						setState(1821);
						((SetOperationContext)_localctx).right = queryTerm(2);
						}
						break;
					}
					} 
				}
				setState(1826);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,201,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class QueryPrimaryContext extends ParserRuleContext {
		public QueryPrimaryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_queryPrimary; }
	 
		public QueryPrimaryContext() { }
		public void copyFrom(QueryPrimaryContext ctx) {
			super.copyFrom(ctx);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class SubqueryContext extends QueryPrimaryContext {
		public TerminalNode LEFT_PAREN() { return getToken(SqlBaseParser.LEFT_PAREN, 0); }
		public QueryContext query() {
			return getRuleContext(QueryContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(SqlBaseParser.RIGHT_PAREN, 0); }
		public SubqueryContext(QueryPrimaryContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterSubquery(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitSubquery(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitSubquery(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class QueryPrimaryDefaultContext extends QueryPrimaryContext {
		public QuerySpecificationContext querySpecification() {
			return getRuleContext(QuerySpecificationContext.class,0);
		}
		public QueryPrimaryDefaultContext(QueryPrimaryContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterQueryPrimaryDefault(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitQueryPrimaryDefault(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitQueryPrimaryDefault(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class InlineTableDefault1Context extends QueryPrimaryContext {
		public InlineTableContext inlineTable() {
			return getRuleContext(InlineTableContext.class,0);
		}
		public InlineTableDefault1Context(QueryPrimaryContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterInlineTableDefault1(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitInlineTableDefault1(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitInlineTableDefault1(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class FromStmtContext extends QueryPrimaryContext {
		public FromStatementContext fromStatement() {
			return getRuleContext(FromStatementContext.class,0);
		}
		public FromStmtContext(QueryPrimaryContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterFromStmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitFromStmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitFromStmt(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class TableContext extends QueryPrimaryContext {
		public TerminalNode TABLE() { return getToken(SqlBaseParser.TABLE, 0); }
		public MultipartIdentifierContext multipartIdentifier() {
			return getRuleContext(MultipartIdentifierContext.class,0);
		}
		public TableContext(QueryPrimaryContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterTable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitTable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitTable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final QueryPrimaryContext queryPrimary() throws RecognitionException {
		QueryPrimaryContext _localctx = new QueryPrimaryContext(_ctx, getState());
		enterRule(_localctx, 90, RULE_queryPrimary);
		try {
			setState(1836);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case MAP:
			case REDUCE:
			case SELECT:
				_localctx = new QueryPrimaryDefaultContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(1827);
				querySpecification();
				}
				break;
			case FROM:
				_localctx = new FromStmtContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(1828);
				fromStatement();
				}
				break;
			case TABLE:
				_localctx = new TableContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(1829);
				match(TABLE);
				setState(1830);
				multipartIdentifier();
				}
				break;
			case VALUES:
				_localctx = new InlineTableDefault1Context(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(1831);
				inlineTable();
				}
				break;
			case LEFT_PAREN:
				_localctx = new SubqueryContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(1832);
				match(LEFT_PAREN);
				setState(1833);
				query();
				setState(1834);
				match(RIGHT_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SortItemContext extends ParserRuleContext {
		public Token ordering;
		public Token nullOrder;
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode NULLS() { return getToken(SqlBaseParser.NULLS, 0); }
		public TerminalNode ASC() { return getToken(SqlBaseParser.ASC, 0); }
		public TerminalNode DESC() { return getToken(SqlBaseParser.DESC, 0); }
		public TerminalNode LAST() { return getToken(SqlBaseParser.LAST, 0); }
		public TerminalNode FIRST() { return getToken(SqlBaseParser.FIRST, 0); }
		public SortItemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sortItem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterSortItem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitSortItem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitSortItem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SortItemContext sortItem() throws RecognitionException {
		SortItemContext _localctx = new SortItemContext(_ctx, getState());
		enterRule(_localctx, 92, RULE_sortItem);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1838);
			expression();
			setState(1840);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,203,_ctx) ) {
			case 1:
				{
				setState(1839);
				((SortItemContext)_localctx).ordering = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==ASC || _la==DESC) ) {
					((SortItemContext)_localctx).ordering = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
			setState(1844);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,204,_ctx) ) {
			case 1:
				{
				setState(1842);
				match(NULLS);
				setState(1843);
				((SortItemContext)_localctx).nullOrder = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==FIRST || _la==LAST) ) {
					((SortItemContext)_localctx).nullOrder = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class FromStatementContext extends ParserRuleContext {
		public FromClauseContext fromClause() {
			return getRuleContext(FromClauseContext.class,0);
		}
		public List<FromStatementBodyContext> fromStatementBody() {
			return getRuleContexts(FromStatementBodyContext.class);
		}
		public FromStatementBodyContext fromStatementBody(int i) {
			return getRuleContext(FromStatementBodyContext.class,i);
		}
		public FromStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fromStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterFromStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitFromStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitFromStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FromStatementContext fromStatement() throws RecognitionException {
		FromStatementContext _localctx = new FromStatementContext(_ctx, getState());
		enterRule(_localctx, 94, RULE_fromStatement);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1846);
			fromClause();
			setState(1848); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					setState(1847);
					fromStatementBody();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(1850); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,205,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class FromStatementBodyContext extends ParserRuleContext {
		public TransformClauseContext transformClause() {
			return getRuleContext(TransformClauseContext.class,0);
		}
		public QueryOrganizationContext queryOrganization() {
			return getRuleContext(QueryOrganizationContext.class,0);
		}
		public WhereClauseContext whereClause() {
			return getRuleContext(WhereClauseContext.class,0);
		}
		public SelectClauseContext selectClause() {
			return getRuleContext(SelectClauseContext.class,0);
		}
		public List<LateralViewContext> lateralView() {
			return getRuleContexts(LateralViewContext.class);
		}
		public LateralViewContext lateralView(int i) {
			return getRuleContext(LateralViewContext.class,i);
		}
		public AggregationClauseContext aggregationClause() {
			return getRuleContext(AggregationClauseContext.class,0);
		}
		public HavingClauseContext havingClause() {
			return getRuleContext(HavingClauseContext.class,0);
		}
		public WindowClauseContext windowClause() {
			return getRuleContext(WindowClauseContext.class,0);
		}
		public FromStatementBodyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fromStatementBody; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterFromStatementBody(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitFromStatementBody(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitFromStatementBody(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FromStatementBodyContext fromStatementBody() throws RecognitionException {
		FromStatementBodyContext _localctx = new FromStatementBodyContext(_ctx, getState());
		enterRule(_localctx, 96, RULE_fromStatementBody);
		try {
			int _alt;
			setState(1879);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,212,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1852);
				transformClause();
				setState(1854);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,206,_ctx) ) {
				case 1:
					{
					setState(1853);
					whereClause();
					}
					break;
				}
				setState(1856);
				queryOrganization();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1858);
				selectClause();
				setState(1862);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,207,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(1859);
						lateralView();
						}
						} 
					}
					setState(1864);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,207,_ctx);
				}
				setState(1866);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,208,_ctx) ) {
				case 1:
					{
					setState(1865);
					whereClause();
					}
					break;
				}
				setState(1869);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,209,_ctx) ) {
				case 1:
					{
					setState(1868);
					aggregationClause();
					}
					break;
				}
				setState(1872);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,210,_ctx) ) {
				case 1:
					{
					setState(1871);
					havingClause();
					}
					break;
				}
				setState(1875);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,211,_ctx) ) {
				case 1:
					{
					setState(1874);
					windowClause();
					}
					break;
				}
				setState(1877);
				queryOrganization();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class QuerySpecificationContext extends ParserRuleContext {
		public QuerySpecificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_querySpecification; }
	 
		public QuerySpecificationContext() { }
		public void copyFrom(QuerySpecificationContext ctx) {
			super.copyFrom(ctx);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class RegularQuerySpecificationContext extends QuerySpecificationContext {
		public SelectClauseContext selectClause() {
			return getRuleContext(SelectClauseContext.class,0);
		}
		public FromClauseContext fromClause() {
			return getRuleContext(FromClauseContext.class,0);
		}
		public List<LateralViewContext> lateralView() {
			return getRuleContexts(LateralViewContext.class);
		}
		public LateralViewContext lateralView(int i) {
			return getRuleContext(LateralViewContext.class,i);
		}
		public WhereClauseContext whereClause() {
			return getRuleContext(WhereClauseContext.class,0);
		}
		public AggregationClauseContext aggregationClause() {
			return getRuleContext(AggregationClauseContext.class,0);
		}
		public HavingClauseContext havingClause() {
			return getRuleContext(HavingClauseContext.class,0);
		}
		public WindowClauseContext windowClause() {
			return getRuleContext(WindowClauseContext.class,0);
		}
		public RegularQuerySpecificationContext(QuerySpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterRegularQuerySpecification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitRegularQuerySpecification(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitRegularQuerySpecification(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class TransformQuerySpecificationContext extends QuerySpecificationContext {
		public TransformClauseContext transformClause() {
			return getRuleContext(TransformClauseContext.class,0);
		}
		public FromClauseContext fromClause() {
			return getRuleContext(FromClauseContext.class,0);
		}
		public List<LateralViewContext> lateralView() {
			return getRuleContexts(LateralViewContext.class);
		}
		public LateralViewContext lateralView(int i) {
			return getRuleContext(LateralViewContext.class,i);
		}
		public WhereClauseContext whereClause() {
			return getRuleContext(WhereClauseContext.class,0);
		}
		public AggregationClauseContext aggregationClause() {
			return getRuleContext(AggregationClauseContext.class,0);
		}
		public HavingClauseContext havingClause() {
			return getRuleContext(HavingClauseContext.class,0);
		}
		public WindowClauseContext windowClause() {
			return getRuleContext(WindowClauseContext.class,0);
		}
		public TransformQuerySpecificationContext(QuerySpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterTransformQuerySpecification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitTransformQuerySpecification(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitTransformQuerySpecification(this);
			else return visitor.visitChildren(this);
		}
	}

	public final QuerySpecificationContext querySpecification() throws RecognitionException {
		QuerySpecificationContext _localctx = new QuerySpecificationContext(_ctx, getState());
		enterRule(_localctx, 98, RULE_querySpecification);
		try {
			int _alt;
			setState(1925);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,225,_ctx) ) {
			case 1:
				_localctx = new TransformQuerySpecificationContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(1881);
				transformClause();
				setState(1883);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,213,_ctx) ) {
				case 1:
					{
					setState(1882);
					fromClause();
					}
					break;
				}
				setState(1888);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,214,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(1885);
						lateralView();
						}
						} 
					}
					setState(1890);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,214,_ctx);
				}
				setState(1892);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,215,_ctx) ) {
				case 1:
					{
					setState(1891);
					whereClause();
					}
					break;
				}
				setState(1895);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,216,_ctx) ) {
				case 1:
					{
					setState(1894);
					aggregationClause();
					}
					break;
				}
				setState(1898);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,217,_ctx) ) {
				case 1:
					{
					setState(1897);
					havingClause();
					}
					break;
				}
				setState(1901);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,218,_ctx) ) {
				case 1:
					{
					setState(1900);
					windowClause();
					}
					break;
				}
				}
				break;
			case 2:
				_localctx = new RegularQuerySpecificationContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(1903);
				selectClause();
				setState(1905);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,219,_ctx) ) {
				case 1:
					{
					setState(1904);
					fromClause();
					}
					break;
				}
				setState(1910);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,220,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(1907);
						lateralView();
						}
						} 
					}
					setState(1912);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,220,_ctx);
				}
				setState(1914);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,221,_ctx) ) {
				case 1:
					{
					setState(1913);
					whereClause();
					}
					break;
				}
				setState(1917);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,222,_ctx) ) {
				case 1:
					{
					setState(1916);
					aggregationClause();
					}
					break;
				}
				setState(1920);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,223,_ctx) ) {
				case 1:
					{
					setState(1919);
					havingClause();
					}
					break;
				}
				setState(1923);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,224,_ctx) ) {
				case 1:
					{
					setState(1922);
					windowClause();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TransformClauseContext extends ParserRuleContext {
		public Token kind;
		public RowFormatContext inRowFormat;
		public StringLitContext recordWriter;
		public StringLitContext script;
		public RowFormatContext outRowFormat;
		public StringLitContext recordReader;
		public TerminalNode USING() { return getToken(SqlBaseParser.USING, 0); }
		public List<StringLitContext> stringLit() {
			return getRuleContexts(StringLitContext.class);
		}
		public StringLitContext stringLit(int i) {
			return getRuleContext(StringLitContext.class,i);
		}
		public TerminalNode SELECT() { return getToken(SqlBaseParser.SELECT, 0); }
		public List<TerminalNode> LEFT_PAREN() { return getTokens(SqlBaseParser.LEFT_PAREN); }
		public TerminalNode LEFT_PAREN(int i) {
			return getToken(SqlBaseParser.LEFT_PAREN, i);
		}
		public ExpressionSeqContext expressionSeq() {
			return getRuleContext(ExpressionSeqContext.class,0);
		}
		public List<TerminalNode> RIGHT_PAREN() { return getTokens(SqlBaseParser.RIGHT_PAREN); }
		public TerminalNode RIGHT_PAREN(int i) {
			return getToken(SqlBaseParser.RIGHT_PAREN, i);
		}
		public TerminalNode TRANSFORM() { return getToken(SqlBaseParser.TRANSFORM, 0); }
		public TerminalNode MAP() { return getToken(SqlBaseParser.MAP, 0); }
		public TerminalNode REDUCE() { return getToken(SqlBaseParser.REDUCE, 0); }
		public TerminalNode RECORDWRITER() { return getToken(SqlBaseParser.RECORDWRITER, 0); }
		public TerminalNode AS() { return getToken(SqlBaseParser.AS, 0); }
		public TerminalNode RECORDREADER() { return getToken(SqlBaseParser.RECORDREADER, 0); }
		public List<RowFormatContext> rowFormat() {
			return getRuleContexts(RowFormatContext.class);
		}
		public RowFormatContext rowFormat(int i) {
			return getRuleContext(RowFormatContext.class,i);
		}
		public SetQuantifierContext setQuantifier() {
			return getRuleContext(SetQuantifierContext.class,0);
		}
		public IdentifierSeqContext identifierSeq() {
			return getRuleContext(IdentifierSeqContext.class,0);
		}
		public ColTypeListContext colTypeList() {
			return getRuleContext(ColTypeListContext.class,0);
		}
		public TransformClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_transformClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterTransformClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitTransformClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitTransformClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TransformClauseContext transformClause() throws RecognitionException {
		TransformClauseContext _localctx = new TransformClauseContext(_ctx, getState());
		enterRule(_localctx, 100, RULE_transformClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1946);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SELECT:
				{
				setState(1927);
				match(SELECT);
				setState(1928);
				((TransformClauseContext)_localctx).kind = match(TRANSFORM);
				setState(1929);
				match(LEFT_PAREN);
				setState(1931);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,226,_ctx) ) {
				case 1:
					{
					setState(1930);
					setQuantifier();
					}
					break;
				}
				setState(1933);
				expressionSeq();
				setState(1934);
				match(RIGHT_PAREN);
				}
				break;
			case MAP:
				{
				setState(1936);
				((TransformClauseContext)_localctx).kind = match(MAP);
				setState(1938);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,227,_ctx) ) {
				case 1:
					{
					setState(1937);
					setQuantifier();
					}
					break;
				}
				setState(1940);
				expressionSeq();
				}
				break;
			case REDUCE:
				{
				setState(1941);
				((TransformClauseContext)_localctx).kind = match(REDUCE);
				setState(1943);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,228,_ctx) ) {
				case 1:
					{
					setState(1942);
					setQuantifier();
					}
					break;
				}
				setState(1945);
				expressionSeq();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(1949);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ROW) {
				{
				setState(1948);
				((TransformClauseContext)_localctx).inRowFormat = rowFormat();
				}
			}

			setState(1953);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==RECORDWRITER) {
				{
				setState(1951);
				match(RECORDWRITER);
				setState(1952);
				((TransformClauseContext)_localctx).recordWriter = stringLit();
				}
			}

			setState(1955);
			match(USING);
			setState(1956);
			((TransformClauseContext)_localctx).script = stringLit();
			setState(1969);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,234,_ctx) ) {
			case 1:
				{
				setState(1957);
				match(AS);
				setState(1967);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,233,_ctx) ) {
				case 1:
					{
					setState(1958);
					identifierSeq();
					}
					break;
				case 2:
					{
					setState(1959);
					colTypeList();
					}
					break;
				case 3:
					{
					{
					setState(1960);
					match(LEFT_PAREN);
					setState(1963);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,232,_ctx) ) {
					case 1:
						{
						setState(1961);
						identifierSeq();
						}
						break;
					case 2:
						{
						setState(1962);
						colTypeList();
						}
						break;
					}
					setState(1965);
					match(RIGHT_PAREN);
					}
					}
					break;
				}
				}
				break;
			}
			setState(1972);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,235,_ctx) ) {
			case 1:
				{
				setState(1971);
				((TransformClauseContext)_localctx).outRowFormat = rowFormat();
				}
				break;
			}
			setState(1976);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,236,_ctx) ) {
			case 1:
				{
				setState(1974);
				match(RECORDREADER);
				setState(1975);
				((TransformClauseContext)_localctx).recordReader = stringLit();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SelectClauseContext extends ParserRuleContext {
		public HintContext hint;
		public List<HintContext> hints = new ArrayList<HintContext>();
		public TerminalNode SELECT() { return getToken(SqlBaseParser.SELECT, 0); }
		public NamedExpressionSeqContext namedExpressionSeq() {
			return getRuleContext(NamedExpressionSeqContext.class,0);
		}
		public SetQuantifierContext setQuantifier() {
			return getRuleContext(SetQuantifierContext.class,0);
		}
		public List<HintContext> hint() {
			return getRuleContexts(HintContext.class);
		}
		public HintContext hint(int i) {
			return getRuleContext(HintContext.class,i);
		}
		public SelectClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterSelectClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitSelectClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitSelectClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SelectClauseContext selectClause() throws RecognitionException {
		SelectClauseContext _localctx = new SelectClauseContext(_ctx, getState());
		enterRule(_localctx, 102, RULE_selectClause);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1978);
			match(SELECT);
			setState(1982);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,237,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(1979);
					((SelectClauseContext)_localctx).hint = hint();
					((SelectClauseContext)_localctx).hints.add(((SelectClauseContext)_localctx).hint);
					}
					} 
				}
				setState(1984);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,237,_ctx);
			}
			setState(1986);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,238,_ctx) ) {
			case 1:
				{
				setState(1985);
				setQuantifier();
				}
				break;
			}
			setState(1988);
			namedExpressionSeq();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SetClauseContext extends ParserRuleContext {
		public TerminalNode SET() { return getToken(SqlBaseParser.SET, 0); }
		public AssignmentListContext assignmentList() {
			return getRuleContext(AssignmentListContext.class,0);
		}
		public SetClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_setClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterSetClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitSetClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitSetClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SetClauseContext setClause() throws RecognitionException {
		SetClauseContext _localctx = new SetClauseContext(_ctx, getState());
		enterRule(_localctx, 104, RULE_setClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1990);
			match(SET);
			setState(1991);
			assignmentList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class MatchedClauseContext extends ParserRuleContext {
		public BooleanExpressionContext matchedCond;
		public TerminalNode WHEN() { return getToken(SqlBaseParser.WHEN, 0); }
		public TerminalNode MATCHED() { return getToken(SqlBaseParser.MATCHED, 0); }
		public TerminalNode THEN() { return getToken(SqlBaseParser.THEN, 0); }
		public MatchedActionContext matchedAction() {
			return getRuleContext(MatchedActionContext.class,0);
		}
		public TerminalNode AND() { return getToken(SqlBaseParser.AND, 0); }
		public BooleanExpressionContext booleanExpression() {
			return getRuleContext(BooleanExpressionContext.class,0);
		}
		public MatchedClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_matchedClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterMatchedClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitMatchedClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitMatchedClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final MatchedClauseContext matchedClause() throws RecognitionException {
		MatchedClauseContext _localctx = new MatchedClauseContext(_ctx, getState());
		enterRule(_localctx, 106, RULE_matchedClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1993);
			match(WHEN);
			setState(1994);
			match(MATCHED);
			setState(1997);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AND) {
				{
				setState(1995);
				match(AND);
				setState(1996);
				((MatchedClauseContext)_localctx).matchedCond = booleanExpression(0);
				}
			}

			setState(1999);
			match(THEN);
			setState(2000);
			matchedAction();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class NotMatchedClauseContext extends ParserRuleContext {
		public BooleanExpressionContext notMatchedCond;
		public TerminalNode WHEN() { return getToken(SqlBaseParser.WHEN, 0); }
		public TerminalNode NOT() { return getToken(SqlBaseParser.NOT, 0); }
		public TerminalNode MATCHED() { return getToken(SqlBaseParser.MATCHED, 0); }
		public TerminalNode THEN() { return getToken(SqlBaseParser.THEN, 0); }
		public NotMatchedActionContext notMatchedAction() {
			return getRuleContext(NotMatchedActionContext.class,0);
		}
		public TerminalNode BY() { return getToken(SqlBaseParser.BY, 0); }
		public TerminalNode TARGET() { return getToken(SqlBaseParser.TARGET, 0); }
		public TerminalNode AND() { return getToken(SqlBaseParser.AND, 0); }
		public BooleanExpressionContext booleanExpression() {
			return getRuleContext(BooleanExpressionContext.class,0);
		}
		public NotMatchedClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_notMatchedClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterNotMatchedClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitNotMatchedClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitNotMatchedClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NotMatchedClauseContext notMatchedClause() throws RecognitionException {
		NotMatchedClauseContext _localctx = new NotMatchedClauseContext(_ctx, getState());
		enterRule(_localctx, 108, RULE_notMatchedClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2002);
			match(WHEN);
			setState(2003);
			match(NOT);
			setState(2004);
			match(MATCHED);
			setState(2007);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==BY) {
				{
				setState(2005);
				match(BY);
				setState(2006);
				match(TARGET);
				}
			}

			setState(2011);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AND) {
				{
				setState(2009);
				match(AND);
				setState(2010);
				((NotMatchedClauseContext)_localctx).notMatchedCond = booleanExpression(0);
				}
			}

			setState(2013);
			match(THEN);
			setState(2014);
			notMatchedAction();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class NotMatchedBySourceClauseContext extends ParserRuleContext {
		public BooleanExpressionContext notMatchedBySourceCond;
		public TerminalNode WHEN() { return getToken(SqlBaseParser.WHEN, 0); }
		public TerminalNode NOT() { return getToken(SqlBaseParser.NOT, 0); }
		public TerminalNode MATCHED() { return getToken(SqlBaseParser.MATCHED, 0); }
		public TerminalNode BY() { return getToken(SqlBaseParser.BY, 0); }
		public TerminalNode SOURCE() { return getToken(SqlBaseParser.SOURCE, 0); }
		public TerminalNode THEN() { return getToken(SqlBaseParser.THEN, 0); }
		public NotMatchedBySourceActionContext notMatchedBySourceAction() {
			return getRuleContext(NotMatchedBySourceActionContext.class,0);
		}
		public TerminalNode AND() { return getToken(SqlBaseParser.AND, 0); }
		public BooleanExpressionContext booleanExpression() {
			return getRuleContext(BooleanExpressionContext.class,0);
		}
		public NotMatchedBySourceClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_notMatchedBySourceClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterNotMatchedBySourceClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitNotMatchedBySourceClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitNotMatchedBySourceClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NotMatchedBySourceClauseContext notMatchedBySourceClause() throws RecognitionException {
		NotMatchedBySourceClauseContext _localctx = new NotMatchedBySourceClauseContext(_ctx, getState());
		enterRule(_localctx, 110, RULE_notMatchedBySourceClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2016);
			match(WHEN);
			setState(2017);
			match(NOT);
			setState(2018);
			match(MATCHED);
			setState(2019);
			match(BY);
			setState(2020);
			match(SOURCE);
			setState(2023);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AND) {
				{
				setState(2021);
				match(AND);
				setState(2022);
				((NotMatchedBySourceClauseContext)_localctx).notMatchedBySourceCond = booleanExpression(0);
				}
			}

			setState(2025);
			match(THEN);
			setState(2026);
			notMatchedBySourceAction();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class MatchedActionContext extends ParserRuleContext {
		public TerminalNode DELETE() { return getToken(SqlBaseParser.DELETE, 0); }
		public TerminalNode UPDATE() { return getToken(SqlBaseParser.UPDATE, 0); }
		public TerminalNode SET() { return getToken(SqlBaseParser.SET, 0); }
		public TerminalNode ASTERISK() { return getToken(SqlBaseParser.ASTERISK, 0); }
		public AssignmentListContext assignmentList() {
			return getRuleContext(AssignmentListContext.class,0);
		}
		public MatchedActionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_matchedAction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterMatchedAction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitMatchedAction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitMatchedAction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final MatchedActionContext matchedAction() throws RecognitionException {
		MatchedActionContext _localctx = new MatchedActionContext(_ctx, getState());
		enterRule(_localctx, 112, RULE_matchedAction);
		try {
			setState(2035);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,243,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2028);
				match(DELETE);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2029);
				match(UPDATE);
				setState(2030);
				match(SET);
				setState(2031);
				match(ASTERISK);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2032);
				match(UPDATE);
				setState(2033);
				match(SET);
				setState(2034);
				assignmentList();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class NotMatchedActionContext extends ParserRuleContext {
		public MultipartIdentifierListContext columns;
		public TerminalNode INSERT() { return getToken(SqlBaseParser.INSERT, 0); }
		public TerminalNode ASTERISK() { return getToken(SqlBaseParser.ASTERISK, 0); }
		public List<TerminalNode> LEFT_PAREN() { return getTokens(SqlBaseParser.LEFT_PAREN); }
		public TerminalNode LEFT_PAREN(int i) {
			return getToken(SqlBaseParser.LEFT_PAREN, i);
		}
		public List<TerminalNode> RIGHT_PAREN() { return getTokens(SqlBaseParser.RIGHT_PAREN); }
		public TerminalNode RIGHT_PAREN(int i) {
			return getToken(SqlBaseParser.RIGHT_PAREN, i);
		}
		public TerminalNode VALUES() { return getToken(SqlBaseParser.VALUES, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public MultipartIdentifierListContext multipartIdentifierList() {
			return getRuleContext(MultipartIdentifierListContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(SqlBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SqlBaseParser.COMMA, i);
		}
		public NotMatchedActionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_notMatchedAction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterNotMatchedAction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitNotMatchedAction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitNotMatchedAction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NotMatchedActionContext notMatchedAction() throws RecognitionException {
		NotMatchedActionContext _localctx = new NotMatchedActionContext(_ctx, getState());
		enterRule(_localctx, 114, RULE_notMatchedAction);
		int _la;
		try {
			setState(2055);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,245,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2037);
				match(INSERT);
				setState(2038);
				match(ASTERISK);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2039);
				match(INSERT);
				setState(2040);
				match(LEFT_PAREN);
				setState(2041);
				((NotMatchedActionContext)_localctx).columns = multipartIdentifierList();
				setState(2042);
				match(RIGHT_PAREN);
				setState(2043);
				match(VALUES);
				setState(2044);
				match(LEFT_PAREN);
				setState(2045);
				expression();
				setState(2050);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2046);
					match(COMMA);
					setState(2047);
					expression();
					}
					}
					setState(2052);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2053);
				match(RIGHT_PAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class NotMatchedBySourceActionContext extends ParserRuleContext {
		public TerminalNode DELETE() { return getToken(SqlBaseParser.DELETE, 0); }
		public TerminalNode UPDATE() { return getToken(SqlBaseParser.UPDATE, 0); }
		public TerminalNode SET() { return getToken(SqlBaseParser.SET, 0); }
		public AssignmentListContext assignmentList() {
			return getRuleContext(AssignmentListContext.class,0);
		}
		public NotMatchedBySourceActionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_notMatchedBySourceAction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterNotMatchedBySourceAction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitNotMatchedBySourceAction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitNotMatchedBySourceAction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NotMatchedBySourceActionContext notMatchedBySourceAction() throws RecognitionException {
		NotMatchedBySourceActionContext _localctx = new NotMatchedBySourceActionContext(_ctx, getState());
		enterRule(_localctx, 116, RULE_notMatchedBySourceAction);
		try {
			setState(2061);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DELETE:
				enterOuterAlt(_localctx, 1);
				{
				setState(2057);
				match(DELETE);
				}
				break;
			case UPDATE:
				enterOuterAlt(_localctx, 2);
				{
				setState(2058);
				match(UPDATE);
				setState(2059);
				match(SET);
				setState(2060);
				assignmentList();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AssignmentListContext extends ParserRuleContext {
		public List<AssignmentContext> assignment() {
			return getRuleContexts(AssignmentContext.class);
		}
		public AssignmentContext assignment(int i) {
			return getRuleContext(AssignmentContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SqlBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SqlBaseParser.COMMA, i);
		}
		public AssignmentListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_assignmentList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterAssignmentList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitAssignmentList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitAssignmentList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AssignmentListContext assignmentList() throws RecognitionException {
		AssignmentListContext _localctx = new AssignmentListContext(_ctx, getState());
		enterRule(_localctx, 118, RULE_assignmentList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2063);
			assignment();
			setState(2068);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2064);
				match(COMMA);
				setState(2065);
				assignment();
				}
				}
				setState(2070);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AssignmentContext extends ParserRuleContext {
		public MultipartIdentifierContext key;
		public ExpressionContext value;
		public TerminalNode EQ() { return getToken(SqlBaseParser.EQ, 0); }
		public MultipartIdentifierContext multipartIdentifier() {
			return getRuleContext(MultipartIdentifierContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public AssignmentContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_assignment; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterAssignment(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitAssignment(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitAssignment(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AssignmentContext assignment() throws RecognitionException {
		AssignmentContext _localctx = new AssignmentContext(_ctx, getState());
		enterRule(_localctx, 120, RULE_assignment);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2071);
			((AssignmentContext)_localctx).key = multipartIdentifier();
			setState(2072);
			match(EQ);
			setState(2073);
			((AssignmentContext)_localctx).value = expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class WhereClauseContext extends ParserRuleContext {
		public TerminalNode WHERE() { return getToken(SqlBaseParser.WHERE, 0); }
		public BooleanExpressionContext booleanExpression() {
			return getRuleContext(BooleanExpressionContext.class,0);
		}
		public WhereClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_whereClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterWhereClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitWhereClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitWhereClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final WhereClauseContext whereClause() throws RecognitionException {
		WhereClauseContext _localctx = new WhereClauseContext(_ctx, getState());
		enterRule(_localctx, 122, RULE_whereClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2075);
			match(WHERE);
			setState(2076);
			booleanExpression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class HavingClauseContext extends ParserRuleContext {
		public TerminalNode HAVING() { return getToken(SqlBaseParser.HAVING, 0); }
		public BooleanExpressionContext booleanExpression() {
			return getRuleContext(BooleanExpressionContext.class,0);
		}
		public HavingClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_havingClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterHavingClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitHavingClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitHavingClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final HavingClauseContext havingClause() throws RecognitionException {
		HavingClauseContext _localctx = new HavingClauseContext(_ctx, getState());
		enterRule(_localctx, 124, RULE_havingClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2078);
			match(HAVING);
			setState(2079);
			booleanExpression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class HintContext extends ParserRuleContext {
		public HintStatementContext hintStatement;
		public List<HintStatementContext> hintStatements = new ArrayList<HintStatementContext>();
		public TerminalNode HENT_START() { return getToken(SqlBaseParser.HENT_START, 0); }
		public TerminalNode HENT_END() { return getToken(SqlBaseParser.HENT_END, 0); }
		public List<HintStatementContext> hintStatement() {
			return getRuleContexts(HintStatementContext.class);
		}
		public HintStatementContext hintStatement(int i) {
			return getRuleContext(HintStatementContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SqlBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SqlBaseParser.COMMA, i);
		}
		public HintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_hint; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterHint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitHint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitHint(this);
			else return visitor.visitChildren(this);
		}
	}

	public final HintContext hint() throws RecognitionException {
		HintContext _localctx = new HintContext(_ctx, getState());
		enterRule(_localctx, 126, RULE_hint);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2081);
			match(HENT_START);
			setState(2082);
			((HintContext)_localctx).hintStatement = hintStatement();
			((HintContext)_localctx).hintStatements.add(((HintContext)_localctx).hintStatement);
			setState(2089);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,249,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(2084);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,248,_ctx) ) {
					case 1:
						{
						setState(2083);
						match(COMMA);
						}
						break;
					}
					setState(2086);
					((HintContext)_localctx).hintStatement = hintStatement();
					((HintContext)_localctx).hintStatements.add(((HintContext)_localctx).hintStatement);
					}
					} 
				}
				setState(2091);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,249,_ctx);
			}
			setState(2092);
			match(HENT_END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class HintStatementContext extends ParserRuleContext {
		public IdentifierContext hintName;
		public PrimaryExpressionContext primaryExpression;
		public List<PrimaryExpressionContext> parameters = new ArrayList<PrimaryExpressionContext>();
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode LEFT_PAREN() { return getToken(SqlBaseParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(SqlBaseParser.RIGHT_PAREN, 0); }
		public List<PrimaryExpressionContext> primaryExpression() {
			return getRuleContexts(PrimaryExpressionContext.class);
		}
		public PrimaryExpressionContext primaryExpression(int i) {
			return getRuleContext(PrimaryExpressionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SqlBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SqlBaseParser.COMMA, i);
		}
		public HintStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_hintStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterHintStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitHintStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitHintStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final HintStatementContext hintStatement() throws RecognitionException {
		HintStatementContext _localctx = new HintStatementContext(_ctx, getState());
		enterRule(_localctx, 128, RULE_hintStatement);
		int _la;
		try {
			setState(2107);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,251,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2094);
				((HintStatementContext)_localctx).hintName = identifier();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2095);
				((HintStatementContext)_localctx).hintName = identifier();
				setState(2096);
				match(LEFT_PAREN);
				setState(2097);
				((HintStatementContext)_localctx).primaryExpression = primaryExpression(0);
				((HintStatementContext)_localctx).parameters.add(((HintStatementContext)_localctx).primaryExpression);
				setState(2102);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2098);
					match(COMMA);
					setState(2099);
					((HintStatementContext)_localctx).primaryExpression = primaryExpression(0);
					((HintStatementContext)_localctx).parameters.add(((HintStatementContext)_localctx).primaryExpression);
					}
					}
					setState(2104);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2105);
				match(RIGHT_PAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class FromClauseContext extends ParserRuleContext {
		public TerminalNode FROM() { return getToken(SqlBaseParser.FROM, 0); }
		public List<RelationContext> relation() {
			return getRuleContexts(RelationContext.class);
		}
		public RelationContext relation(int i) {
			return getRuleContext(RelationContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SqlBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SqlBaseParser.COMMA, i);
		}
		public List<LateralViewContext> lateralView() {
			return getRuleContexts(LateralViewContext.class);
		}
		public LateralViewContext lateralView(int i) {
			return getRuleContext(LateralViewContext.class,i);
		}
		public PivotClauseContext pivotClause() {
			return getRuleContext(PivotClauseContext.class,0);
		}
		public UnpivotClauseContext unpivotClause() {
			return getRuleContext(UnpivotClauseContext.class,0);
		}
		public FromClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fromClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterFromClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitFromClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitFromClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FromClauseContext fromClause() throws RecognitionException {
		FromClauseContext _localctx = new FromClauseContext(_ctx, getState());
		enterRule(_localctx, 130, RULE_fromClause);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2109);
			match(FROM);
			setState(2110);
			relation();
			setState(2115);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,252,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(2111);
					match(COMMA);
					setState(2112);
					relation();
					}
					} 
				}
				setState(2117);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,252,_ctx);
			}
			setState(2121);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,253,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(2118);
					lateralView();
					}
					} 
				}
				setState(2123);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,253,_ctx);
			}
			setState(2125);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,254,_ctx) ) {
			case 1:
				{
				setState(2124);
				pivotClause();
				}
				break;
			}
			setState(2128);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,255,_ctx) ) {
			case 1:
				{
				setState(2127);
				unpivotClause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TemporalClauseContext extends ParserRuleContext {
		public ValueExpressionContext timestamp;
		public TerminalNode AS() { return getToken(SqlBaseParser.AS, 0); }
		public TerminalNode OF() { return getToken(SqlBaseParser.OF, 0); }
		public VersionContext version() {
			return getRuleContext(VersionContext.class,0);
		}
		public TerminalNode SYSTEM_VERSION() { return getToken(SqlBaseParser.SYSTEM_VERSION, 0); }
		public TerminalNode VERSION() { return getToken(SqlBaseParser.VERSION, 0); }
		public TerminalNode FOR() { return getToken(SqlBaseParser.FOR, 0); }
		public TerminalNode SYSTEM_TIME() { return getToken(SqlBaseParser.SYSTEM_TIME, 0); }
		public TerminalNode TIMESTAMP() { return getToken(SqlBaseParser.TIMESTAMP, 0); }
		public ValueExpressionContext valueExpression() {
			return getRuleContext(ValueExpressionContext.class,0);
		}
		public TemporalClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_temporalClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterTemporalClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitTemporalClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitTemporalClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TemporalClauseContext temporalClause() throws RecognitionException {
		TemporalClauseContext _localctx = new TemporalClauseContext(_ctx, getState());
		enterRule(_localctx, 132, RULE_temporalClause);
		int _la;
		try {
			setState(2144);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,258,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2131);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOR) {
					{
					setState(2130);
					match(FOR);
					}
				}

				setState(2133);
				_la = _input.LA(1);
				if ( !(_la==SYSTEM_VERSION || _la==VERSION) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2134);
				match(AS);
				setState(2135);
				match(OF);
				setState(2136);
				version();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2138);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOR) {
					{
					setState(2137);
					match(FOR);
					}
				}

				setState(2140);
				_la = _input.LA(1);
				if ( !(_la==SYSTEM_TIME || _la==TIMESTAMP) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2141);
				match(AS);
				setState(2142);
				match(OF);
				setState(2143);
				((TemporalClauseContext)_localctx).timestamp = valueExpression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AggregationClauseContext extends ParserRuleContext {
		public GroupByClauseContext groupByClause;
		public List<GroupByClauseContext> groupingExpressionsWithGroupingAnalytics = new ArrayList<GroupByClauseContext>();
		public ExpressionContext expression;
		public List<ExpressionContext> groupingExpressions = new ArrayList<ExpressionContext>();
		public Token kind;
		public TerminalNode GROUP() { return getToken(SqlBaseParser.GROUP, 0); }
		public TerminalNode BY() { return getToken(SqlBaseParser.BY, 0); }
		public List<GroupByClauseContext> groupByClause() {
			return getRuleContexts(GroupByClauseContext.class);
		}
		public GroupByClauseContext groupByClause(int i) {
			return getRuleContext(GroupByClauseContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SqlBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SqlBaseParser.COMMA, i);
		}
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TerminalNode WITH() { return getToken(SqlBaseParser.WITH, 0); }
		public TerminalNode SETS() { return getToken(SqlBaseParser.SETS, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(SqlBaseParser.LEFT_PAREN, 0); }
		public List<GroupingSetContext> groupingSet() {
			return getRuleContexts(GroupingSetContext.class);
		}
		public GroupingSetContext groupingSet(int i) {
			return getRuleContext(GroupingSetContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(SqlBaseParser.RIGHT_PAREN, 0); }
		public TerminalNode ROLLUP() { return getToken(SqlBaseParser.ROLLUP, 0); }
		public TerminalNode CUBE() { return getToken(SqlBaseParser.CUBE, 0); }
		public TerminalNode GROUPING() { return getToken(SqlBaseParser.GROUPING, 0); }
		public AggregationClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_aggregationClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterAggregationClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitAggregationClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitAggregationClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AggregationClauseContext aggregationClause() throws RecognitionException {
		AggregationClauseContext _localctx = new AggregationClauseContext(_ctx, getState());
		enterRule(_localctx, 134, RULE_aggregationClause);
		int _la;
		try {
			int _alt;
			setState(2185);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,263,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2146);
				match(GROUP);
				setState(2147);
				match(BY);
				setState(2148);
				((AggregationClauseContext)_localctx).groupByClause = groupByClause();
				((AggregationClauseContext)_localctx).groupingExpressionsWithGroupingAnalytics.add(((AggregationClauseContext)_localctx).groupByClause);
				setState(2153);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,259,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(2149);
						match(COMMA);
						setState(2150);
						((AggregationClauseContext)_localctx).groupByClause = groupByClause();
						((AggregationClauseContext)_localctx).groupingExpressionsWithGroupingAnalytics.add(((AggregationClauseContext)_localctx).groupByClause);
						}
						} 
					}
					setState(2155);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,259,_ctx);
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2156);
				match(GROUP);
				setState(2157);
				match(BY);
				setState(2158);
				((AggregationClauseContext)_localctx).expression = expression();
				((AggregationClauseContext)_localctx).groupingExpressions.add(((AggregationClauseContext)_localctx).expression);
				setState(2163);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,260,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(2159);
						match(COMMA);
						setState(2160);
						((AggregationClauseContext)_localctx).expression = expression();
						((AggregationClauseContext)_localctx).groupingExpressions.add(((AggregationClauseContext)_localctx).expression);
						}
						} 
					}
					setState(2165);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,260,_ctx);
				}
				setState(2183);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,262,_ctx) ) {
				case 1:
					{
					setState(2166);
					match(WITH);
					setState(2167);
					((AggregationClauseContext)_localctx).kind = match(ROLLUP);
					}
					break;
				case 2:
					{
					setState(2168);
					match(WITH);
					setState(2169);
					((AggregationClauseContext)_localctx).kind = match(CUBE);
					}
					break;
				case 3:
					{
					setState(2170);
					((AggregationClauseContext)_localctx).kind = match(GROUPING);
					setState(2171);
					match(SETS);
					setState(2172);
					match(LEFT_PAREN);
					setState(2173);
					groupingSet();
					setState(2178);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(2174);
						match(COMMA);
						setState(2175);
						groupingSet();
						}
						}
						setState(2180);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					setState(2181);
					match(RIGHT_PAREN);
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class GroupByClauseContext extends ParserRuleContext {
		public GroupingAnalyticsContext groupingAnalytics() {
			return getRuleContext(GroupingAnalyticsContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public GroupByClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_groupByClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterGroupByClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitGroupByClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitGroupByClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GroupByClauseContext groupByClause() throws RecognitionException {
		GroupByClauseContext _localctx = new GroupByClauseContext(_ctx, getState());
		enterRule(_localctx, 136, RULE_groupByClause);
		try {
			setState(2189);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,264,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2187);
				groupingAnalytics();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2188);
				expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class GroupingAnalyticsContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(SqlBaseParser.LEFT_PAREN, 0); }
		public List<GroupingSetContext> groupingSet() {
			return getRuleContexts(GroupingSetContext.class);
		}
		public GroupingSetContext groupingSet(int i) {
			return getRuleContext(GroupingSetContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(SqlBaseParser.RIGHT_PAREN, 0); }
		public TerminalNode ROLLUP() { return getToken(SqlBaseParser.ROLLUP, 0); }
		public TerminalNode CUBE() { return getToken(SqlBaseParser.CUBE, 0); }
		public List<TerminalNode> COMMA() { return getTokens(SqlBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SqlBaseParser.COMMA, i);
		}
		public TerminalNode GROUPING() { return getToken(SqlBaseParser.GROUPING, 0); }
		public TerminalNode SETS() { return getToken(SqlBaseParser.SETS, 0); }
		public List<GroupingElementContext> groupingElement() {
			return getRuleContexts(GroupingElementContext.class);
		}
		public GroupingElementContext groupingElement(int i) {
			return getRuleContext(GroupingElementContext.class,i);
		}
		public GroupingAnalyticsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_groupingAnalytics; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterGroupingAnalytics(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitGroupingAnalytics(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitGroupingAnalytics(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GroupingAnalyticsContext groupingAnalytics() throws RecognitionException {
		GroupingAnalyticsContext _localctx = new GroupingAnalyticsContext(_ctx, getState());
		enterRule(_localctx, 138, RULE_groupingAnalytics);
		int _la;
		try {
			setState(2216);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CUBE:
			case ROLLUP:
				enterOuterAlt(_localctx, 1);
				{
				setState(2191);
				_la = _input.LA(1);
				if ( !(_la==CUBE || _la==ROLLUP) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2192);
				match(LEFT_PAREN);
				setState(2193);
				groupingSet();
				setState(2198);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2194);
					match(COMMA);
					setState(2195);
					groupingSet();
					}
					}
					setState(2200);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2201);
				match(RIGHT_PAREN);
				}
				break;
			case GROUPING:
				enterOuterAlt(_localctx, 2);
				{
				setState(2203);
				match(GROUPING);
				setState(2204);
				match(SETS);
				setState(2205);
				match(LEFT_PAREN);
				setState(2206);
				groupingElement();
				setState(2211);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2207);
					match(COMMA);
					setState(2208);
					groupingElement();
					}
					}
					setState(2213);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2214);
				match(RIGHT_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class GroupingElementContext extends ParserRuleContext {
		public GroupingAnalyticsContext groupingAnalytics() {
			return getRuleContext(GroupingAnalyticsContext.class,0);
		}
		public GroupingSetContext groupingSet() {
			return getRuleContext(GroupingSetContext.class,0);
		}
		public GroupingElementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_groupingElement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterGroupingElement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitGroupingElement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitGroupingElement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GroupingElementContext groupingElement() throws RecognitionException {
		GroupingElementContext _localctx = new GroupingElementContext(_ctx, getState());
		enterRule(_localctx, 140, RULE_groupingElement);
		try {
			setState(2220);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,268,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2218);
				groupingAnalytics();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2219);
				groupingSet();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class GroupingSetContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(SqlBaseParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(SqlBaseParser.RIGHT_PAREN, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SqlBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SqlBaseParser.COMMA, i);
		}
		public GroupingSetContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_groupingSet; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterGroupingSet(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitGroupingSet(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitGroupingSet(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GroupingSetContext groupingSet() throws RecognitionException {
		GroupingSetContext _localctx = new GroupingSetContext(_ctx, getState());
		enterRule(_localctx, 142, RULE_groupingSet);
		int _la;
		try {
			setState(2235);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,271,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2222);
				match(LEFT_PAREN);
				setState(2231);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,270,_ctx) ) {
				case 1:
					{
					setState(2223);
					expression();
					setState(2228);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(2224);
						match(COMMA);
						setState(2225);
						expression();
						}
						}
						setState(2230);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
					break;
				}
				setState(2233);
				match(RIGHT_PAREN);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2234);
				expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class PivotClauseContext extends ParserRuleContext {
		public NamedExpressionSeqContext aggregates;
		public PivotValueContext pivotValue;
		public List<PivotValueContext> pivotValues = new ArrayList<PivotValueContext>();
		public TerminalNode PIVOT() { return getToken(SqlBaseParser.PIVOT, 0); }
		public List<TerminalNode> LEFT_PAREN() { return getTokens(SqlBaseParser.LEFT_PAREN); }
		public TerminalNode LEFT_PAREN(int i) {
			return getToken(SqlBaseParser.LEFT_PAREN, i);
		}
		public TerminalNode FOR() { return getToken(SqlBaseParser.FOR, 0); }
		public PivotColumnContext pivotColumn() {
			return getRuleContext(PivotColumnContext.class,0);
		}
		public TerminalNode IN() { return getToken(SqlBaseParser.IN, 0); }
		public List<TerminalNode> RIGHT_PAREN() { return getTokens(SqlBaseParser.RIGHT_PAREN); }
		public TerminalNode RIGHT_PAREN(int i) {
			return getToken(SqlBaseParser.RIGHT_PAREN, i);
		}
		public NamedExpressionSeqContext namedExpressionSeq() {
			return getRuleContext(NamedExpressionSeqContext.class,0);
		}
		public List<PivotValueContext> pivotValue() {
			return getRuleContexts(PivotValueContext.class);
		}
		public PivotValueContext pivotValue(int i) {
			return getRuleContext(PivotValueContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SqlBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SqlBaseParser.COMMA, i);
		}
		public PivotClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_pivotClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterPivotClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitPivotClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitPivotClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PivotClauseContext pivotClause() throws RecognitionException {
		PivotClauseContext _localctx = new PivotClauseContext(_ctx, getState());
		enterRule(_localctx, 144, RULE_pivotClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2237);
			match(PIVOT);
			setState(2238);
			match(LEFT_PAREN);
			setState(2239);
			((PivotClauseContext)_localctx).aggregates = namedExpressionSeq();
			setState(2240);
			match(FOR);
			setState(2241);
			pivotColumn();
			setState(2242);
			match(IN);
			setState(2243);
			match(LEFT_PAREN);
			setState(2244);
			((PivotClauseContext)_localctx).pivotValue = pivotValue();
			((PivotClauseContext)_localctx).pivotValues.add(((PivotClauseContext)_localctx).pivotValue);
			setState(2249);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2245);
				match(COMMA);
				setState(2246);
				((PivotClauseContext)_localctx).pivotValue = pivotValue();
				((PivotClauseContext)_localctx).pivotValues.add(((PivotClauseContext)_localctx).pivotValue);
				}
				}
				setState(2251);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2252);
			match(RIGHT_PAREN);
			setState(2253);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class PivotColumnContext extends ParserRuleContext {
		public IdentifierContext identifier;
		public List<IdentifierContext> identifiers = new ArrayList<IdentifierContext>();
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public TerminalNode LEFT_PAREN() { return getToken(SqlBaseParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(SqlBaseParser.RIGHT_PAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(SqlBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SqlBaseParser.COMMA, i);
		}
		public PivotColumnContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_pivotColumn; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterPivotColumn(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitPivotColumn(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitPivotColumn(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PivotColumnContext pivotColumn() throws RecognitionException {
		PivotColumnContext _localctx = new PivotColumnContext(_ctx, getState());
		enterRule(_localctx, 146, RULE_pivotColumn);
		int _la;
		try {
			setState(2267);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,274,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2255);
				((PivotColumnContext)_localctx).identifier = identifier();
				((PivotColumnContext)_localctx).identifiers.add(((PivotColumnContext)_localctx).identifier);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2256);
				match(LEFT_PAREN);
				setState(2257);
				((PivotColumnContext)_localctx).identifier = identifier();
				((PivotColumnContext)_localctx).identifiers.add(((PivotColumnContext)_localctx).identifier);
				setState(2262);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2258);
					match(COMMA);
					setState(2259);
					((PivotColumnContext)_localctx).identifier = identifier();
					((PivotColumnContext)_localctx).identifiers.add(((PivotColumnContext)_localctx).identifier);
					}
					}
					setState(2264);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2265);
				match(RIGHT_PAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class PivotValueContext extends ParserRuleContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode AS() { return getToken(SqlBaseParser.AS, 0); }
		public PivotValueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_pivotValue; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterPivotValue(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitPivotValue(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitPivotValue(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PivotValueContext pivotValue() throws RecognitionException {
		PivotValueContext _localctx = new PivotValueContext(_ctx, getState());
		enterRule(_localctx, 148, RULE_pivotValue);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2269);
			expression();
			setState(2274);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,276,_ctx) ) {
			case 1:
				{
				setState(2271);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,275,_ctx) ) {
				case 1:
					{
					setState(2270);
					match(AS);
					}
					break;
				}
				setState(2273);
				identifier();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class UnpivotClauseContext extends ParserRuleContext {
		public UnpivotNullClauseContext nullOperator;
		public UnpivotOperatorContext operator;
		public TerminalNode UNPIVOT() { return getToken(SqlBaseParser.UNPIVOT, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(SqlBaseParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(SqlBaseParser.RIGHT_PAREN, 0); }
		public UnpivotOperatorContext unpivotOperator() {
			return getRuleContext(UnpivotOperatorContext.class,0);
		}
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public UnpivotNullClauseContext unpivotNullClause() {
			return getRuleContext(UnpivotNullClauseContext.class,0);
		}
		public TerminalNode AS() { return getToken(SqlBaseParser.AS, 0); }
		public UnpivotClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unpivotClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterUnpivotClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitUnpivotClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitUnpivotClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UnpivotClauseContext unpivotClause() throws RecognitionException {
		UnpivotClauseContext _localctx = new UnpivotClauseContext(_ctx, getState());
		enterRule(_localctx, 150, RULE_unpivotClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2276);
			match(UNPIVOT);
			setState(2278);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EXCLUDE || _la==INCLUDE) {
				{
				setState(2277);
				((UnpivotClauseContext)_localctx).nullOperator = unpivotNullClause();
				}
			}

			setState(2280);
			match(LEFT_PAREN);
			setState(2281);
			((UnpivotClauseContext)_localctx).operator = unpivotOperator();
			setState(2282);
			match(RIGHT_PAREN);
			setState(2287);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,279,_ctx) ) {
			case 1:
				{
				setState(2284);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,278,_ctx) ) {
				case 1:
					{
					setState(2283);
					match(AS);
					}
					break;
				}
				setState(2286);
				identifier();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class UnpivotNullClauseContext extends ParserRuleContext {
		public TerminalNode NULLS() { return getToken(SqlBaseParser.NULLS, 0); }
		public TerminalNode INCLUDE() { return getToken(SqlBaseParser.INCLUDE, 0); }
		public TerminalNode EXCLUDE() { return getToken(SqlBaseParser.EXCLUDE, 0); }
		public UnpivotNullClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unpivotNullClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterUnpivotNullClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitUnpivotNullClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitUnpivotNullClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UnpivotNullClauseContext unpivotNullClause() throws RecognitionException {
		UnpivotNullClauseContext _localctx = new UnpivotNullClauseContext(_ctx, getState());
		enterRule(_localctx, 152, RULE_unpivotNullClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2289);
			_la = _input.LA(1);
			if ( !(_la==EXCLUDE || _la==INCLUDE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(2290);
			match(NULLS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class UnpivotOperatorContext extends ParserRuleContext {
		public UnpivotSingleValueColumnClauseContext unpivotSingleValueColumnClause() {
			return getRuleContext(UnpivotSingleValueColumnClauseContext.class,0);
		}
		public UnpivotMultiValueColumnClauseContext unpivotMultiValueColumnClause() {
			return getRuleContext(UnpivotMultiValueColumnClauseContext.class,0);
		}
		public UnpivotOperatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unpivotOperator; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterUnpivotOperator(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitUnpivotOperator(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitUnpivotOperator(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UnpivotOperatorContext unpivotOperator() throws RecognitionException {
		UnpivotOperatorContext _localctx = new UnpivotOperatorContext(_ctx, getState());
		enterRule(_localctx, 154, RULE_unpivotOperator);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2294);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,280,_ctx) ) {
			case 1:
				{
				setState(2292);
				unpivotSingleValueColumnClause();
				}
				break;
			case 2:
				{
				setState(2293);
				unpivotMultiValueColumnClause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class UnpivotSingleValueColumnClauseContext extends ParserRuleContext {
		public UnpivotColumnAndAliasContext unpivotColumnAndAlias;
		public List<UnpivotColumnAndAliasContext> unpivotColumns = new ArrayList<UnpivotColumnAndAliasContext>();
		public UnpivotValueColumnContext unpivotValueColumn() {
			return getRuleContext(UnpivotValueColumnContext.class,0);
		}
		public TerminalNode FOR() { return getToken(SqlBaseParser.FOR, 0); }
		public UnpivotNameColumnContext unpivotNameColumn() {
			return getRuleContext(UnpivotNameColumnContext.class,0);
		}
		public TerminalNode IN() { return getToken(SqlBaseParser.IN, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(SqlBaseParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(SqlBaseParser.RIGHT_PAREN, 0); }
		public List<UnpivotColumnAndAliasContext> unpivotColumnAndAlias() {
			return getRuleContexts(UnpivotColumnAndAliasContext.class);
		}
		public UnpivotColumnAndAliasContext unpivotColumnAndAlias(int i) {
			return getRuleContext(UnpivotColumnAndAliasContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SqlBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SqlBaseParser.COMMA, i);
		}
		public UnpivotSingleValueColumnClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unpivotSingleValueColumnClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterUnpivotSingleValueColumnClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitUnpivotSingleValueColumnClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitUnpivotSingleValueColumnClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UnpivotSingleValueColumnClauseContext unpivotSingleValueColumnClause() throws RecognitionException {
		UnpivotSingleValueColumnClauseContext _localctx = new UnpivotSingleValueColumnClauseContext(_ctx, getState());
		enterRule(_localctx, 156, RULE_unpivotSingleValueColumnClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2296);
			unpivotValueColumn();
			setState(2297);
			match(FOR);
			setState(2298);
			unpivotNameColumn();
			setState(2299);
			match(IN);
			setState(2300);
			match(LEFT_PAREN);
			setState(2301);
			((UnpivotSingleValueColumnClauseContext)_localctx).unpivotColumnAndAlias = unpivotColumnAndAlias();
			((UnpivotSingleValueColumnClauseContext)_localctx).unpivotColumns.add(((UnpivotSingleValueColumnClauseContext)_localctx).unpivotColumnAndAlias);
			setState(2306);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2302);
				match(COMMA);
				setState(2303);
				((UnpivotSingleValueColumnClauseContext)_localctx).unpivotColumnAndAlias = unpivotColumnAndAlias();
				((UnpivotSingleValueColumnClauseContext)_localctx).unpivotColumns.add(((UnpivotSingleValueColumnClauseContext)_localctx).unpivotColumnAndAlias);
				}
				}
				setState(2308);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2309);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class UnpivotMultiValueColumnClauseContext extends ParserRuleContext {
		public UnpivotValueColumnContext unpivotValueColumn;
		public List<UnpivotValueColumnContext> unpivotValueColumns = new ArrayList<UnpivotValueColumnContext>();
		public UnpivotColumnSetContext unpivotColumnSet;
		public List<UnpivotColumnSetContext> unpivotColumnSets = new ArrayList<UnpivotColumnSetContext>();
		public List<TerminalNode> LEFT_PAREN() { return getTokens(SqlBaseParser.LEFT_PAREN); }
		public TerminalNode LEFT_PAREN(int i) {
			return getToken(SqlBaseParser.LEFT_PAREN, i);
		}
		public List<TerminalNode> RIGHT_PAREN() { return getTokens(SqlBaseParser.RIGHT_PAREN); }
		public TerminalNode RIGHT_PAREN(int i) {
			return getToken(SqlBaseParser.RIGHT_PAREN, i);
		}
		public TerminalNode FOR() { return getToken(SqlBaseParser.FOR, 0); }
		public UnpivotNameColumnContext unpivotNameColumn() {
			return getRuleContext(UnpivotNameColumnContext.class,0);
		}
		public TerminalNode IN() { return getToken(SqlBaseParser.IN, 0); }
		public List<UnpivotValueColumnContext> unpivotValueColumn() {
			return getRuleContexts(UnpivotValueColumnContext.class);
		}
		public UnpivotValueColumnContext unpivotValueColumn(int i) {
			return getRuleContext(UnpivotValueColumnContext.class,i);
		}
		public List<UnpivotColumnSetContext> unpivotColumnSet() {
			return getRuleContexts(UnpivotColumnSetContext.class);
		}
		public UnpivotColumnSetContext unpivotColumnSet(int i) {
			return getRuleContext(UnpivotColumnSetContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SqlBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SqlBaseParser.COMMA, i);
		}
		public UnpivotMultiValueColumnClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unpivotMultiValueColumnClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterUnpivotMultiValueColumnClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitUnpivotMultiValueColumnClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitUnpivotMultiValueColumnClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UnpivotMultiValueColumnClauseContext unpivotMultiValueColumnClause() throws RecognitionException {
		UnpivotMultiValueColumnClauseContext _localctx = new UnpivotMultiValueColumnClauseContext(_ctx, getState());
		enterRule(_localctx, 158, RULE_unpivotMultiValueColumnClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2311);
			match(LEFT_PAREN);
			setState(2312);
			((UnpivotMultiValueColumnClauseContext)_localctx).unpivotValueColumn = unpivotValueColumn();
			((UnpivotMultiValueColumnClauseContext)_localctx).unpivotValueColumns.add(((UnpivotMultiValueColumnClauseContext)_localctx).unpivotValueColumn);
			setState(2317);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2313);
				match(COMMA);
				setState(2314);
				((UnpivotMultiValueColumnClauseContext)_localctx).unpivotValueColumn = unpivotValueColumn();
				((UnpivotMultiValueColumnClauseContext)_localctx).unpivotValueColumns.add(((UnpivotMultiValueColumnClauseContext)_localctx).unpivotValueColumn);
				}
				}
				setState(2319);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2320);
			match(RIGHT_PAREN);
			setState(2321);
			match(FOR);
			setState(2322);
			unpivotNameColumn();
			setState(2323);
			match(IN);
			setState(2324);
			match(LEFT_PAREN);
			setState(2325);
			((UnpivotMultiValueColumnClauseContext)_localctx).unpivotColumnSet = unpivotColumnSet();
			((UnpivotMultiValueColumnClauseContext)_localctx).unpivotColumnSets.add(((UnpivotMultiValueColumnClauseContext)_localctx).unpivotColumnSet);
			setState(2330);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2326);
				match(COMMA);
				setState(2327);
				((UnpivotMultiValueColumnClauseContext)_localctx).unpivotColumnSet = unpivotColumnSet();
				((UnpivotMultiValueColumnClauseContext)_localctx).unpivotColumnSets.add(((UnpivotMultiValueColumnClauseContext)_localctx).unpivotColumnSet);
				}
				}
				setState(2332);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2333);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class UnpivotColumnSetContext extends ParserRuleContext {
		public UnpivotColumnContext unpivotColumn;
		public List<UnpivotColumnContext> unpivotColumns = new ArrayList<UnpivotColumnContext>();
		public TerminalNode LEFT_PAREN() { return getToken(SqlBaseParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(SqlBaseParser.RIGHT_PAREN, 0); }
		public List<UnpivotColumnContext> unpivotColumn() {
			return getRuleContexts(UnpivotColumnContext.class);
		}
		public UnpivotColumnContext unpivotColumn(int i) {
			return getRuleContext(UnpivotColumnContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SqlBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SqlBaseParser.COMMA, i);
		}
		public UnpivotAliasContext unpivotAlias() {
			return getRuleContext(UnpivotAliasContext.class,0);
		}
		public UnpivotColumnSetContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unpivotColumnSet; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterUnpivotColumnSet(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitUnpivotColumnSet(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitUnpivotColumnSet(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UnpivotColumnSetContext unpivotColumnSet() throws RecognitionException {
		UnpivotColumnSetContext _localctx = new UnpivotColumnSetContext(_ctx, getState());
		enterRule(_localctx, 160, RULE_unpivotColumnSet);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2335);
			match(LEFT_PAREN);
			setState(2336);
			((UnpivotColumnSetContext)_localctx).unpivotColumn = unpivotColumn();
			((UnpivotColumnSetContext)_localctx).unpivotColumns.add(((UnpivotColumnSetContext)_localctx).unpivotColumn);
			setState(2341);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2337);
				match(COMMA);
				setState(2338);
				((UnpivotColumnSetContext)_localctx).unpivotColumn = unpivotColumn();
				((UnpivotColumnSetContext)_localctx).unpivotColumns.add(((UnpivotColumnSetContext)_localctx).unpivotColumn);
				}
				}
				setState(2343);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2344);
			match(RIGHT_PAREN);
			setState(2346);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,285,_ctx) ) {
			case 1:
				{
				setState(2345);
				unpivotAlias();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class UnpivotValueColumnContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public UnpivotValueColumnContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unpivotValueColumn; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterUnpivotValueColumn(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitUnpivotValueColumn(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitUnpivotValueColumn(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UnpivotValueColumnContext unpivotValueColumn() throws RecognitionException {
		UnpivotValueColumnContext _localctx = new UnpivotValueColumnContext(_ctx, getState());
		enterRule(_localctx, 162, RULE_unpivotValueColumn);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2348);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class UnpivotNameColumnContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public UnpivotNameColumnContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unpivotNameColumn; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterUnpivotNameColumn(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitUnpivotNameColumn(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitUnpivotNameColumn(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UnpivotNameColumnContext unpivotNameColumn() throws RecognitionException {
		UnpivotNameColumnContext _localctx = new UnpivotNameColumnContext(_ctx, getState());
		enterRule(_localctx, 164, RULE_unpivotNameColumn);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2350);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class UnpivotColumnAndAliasContext extends ParserRuleContext {
		public UnpivotColumnContext unpivotColumn() {
			return getRuleContext(UnpivotColumnContext.class,0);
		}
		public UnpivotAliasContext unpivotAlias() {
			return getRuleContext(UnpivotAliasContext.class,0);
		}
		public UnpivotColumnAndAliasContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unpivotColumnAndAlias; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterUnpivotColumnAndAlias(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitUnpivotColumnAndAlias(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitUnpivotColumnAndAlias(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UnpivotColumnAndAliasContext unpivotColumnAndAlias() throws RecognitionException {
		UnpivotColumnAndAliasContext _localctx = new UnpivotColumnAndAliasContext(_ctx, getState());
		enterRule(_localctx, 166, RULE_unpivotColumnAndAlias);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2352);
			unpivotColumn();
			setState(2354);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,286,_ctx) ) {
			case 1:
				{
				setState(2353);
				unpivotAlias();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class UnpivotColumnContext extends ParserRuleContext {
		public MultipartIdentifierContext multipartIdentifier() {
			return getRuleContext(MultipartIdentifierContext.class,0);
		}
		public UnpivotColumnContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unpivotColumn; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterUnpivotColumn(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitUnpivotColumn(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitUnpivotColumn(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UnpivotColumnContext unpivotColumn() throws RecognitionException {
		UnpivotColumnContext _localctx = new UnpivotColumnContext(_ctx, getState());
		enterRule(_localctx, 168, RULE_unpivotColumn);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2356);
			multipartIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class UnpivotAliasContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode AS() { return getToken(SqlBaseParser.AS, 0); }
		public UnpivotAliasContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unpivotAlias; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterUnpivotAlias(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitUnpivotAlias(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitUnpivotAlias(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UnpivotAliasContext unpivotAlias() throws RecognitionException {
		UnpivotAliasContext _localctx = new UnpivotAliasContext(_ctx, getState());
		enterRule(_localctx, 170, RULE_unpivotAlias);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2359);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,287,_ctx) ) {
			case 1:
				{
				setState(2358);
				match(AS);
				}
				break;
			}
			setState(2361);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class LateralViewContext extends ParserRuleContext {
		public IdentifierContext tblName;
		public IdentifierContext identifier;
		public List<IdentifierContext> colName = new ArrayList<IdentifierContext>();
		public TerminalNode LATERAL() { return getToken(SqlBaseParser.LATERAL, 0); }
		public TerminalNode VIEW() { return getToken(SqlBaseParser.VIEW, 0); }
		public QualifiedNameContext qualifiedName() {
			return getRuleContext(QualifiedNameContext.class,0);
		}
		public TerminalNode LEFT_PAREN() { return getToken(SqlBaseParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(SqlBaseParser.RIGHT_PAREN, 0); }
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public TerminalNode OUTER() { return getToken(SqlBaseParser.OUTER, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SqlBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SqlBaseParser.COMMA, i);
		}
		public TerminalNode AS() { return getToken(SqlBaseParser.AS, 0); }
		public LateralViewContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lateralView; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterLateralView(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitLateralView(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitLateralView(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LateralViewContext lateralView() throws RecognitionException {
		LateralViewContext _localctx = new LateralViewContext(_ctx, getState());
		enterRule(_localctx, 172, RULE_lateralView);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2363);
			match(LATERAL);
			setState(2364);
			match(VIEW);
			setState(2366);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,288,_ctx) ) {
			case 1:
				{
				setState(2365);
				match(OUTER);
				}
				break;
			}
			setState(2368);
			qualifiedName();
			setState(2369);
			match(LEFT_PAREN);
			setState(2378);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,290,_ctx) ) {
			case 1:
				{
				setState(2370);
				expression();
				setState(2375);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2371);
					match(COMMA);
					setState(2372);
					expression();
					}
					}
					setState(2377);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			}
			setState(2380);
			match(RIGHT_PAREN);
			setState(2381);
			((LateralViewContext)_localctx).tblName = identifier();
			setState(2393);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,293,_ctx) ) {
			case 1:
				{
				setState(2383);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,291,_ctx) ) {
				case 1:
					{
					setState(2382);
					match(AS);
					}
					break;
				}
				setState(2385);
				((LateralViewContext)_localctx).identifier = identifier();
				((LateralViewContext)_localctx).colName.add(((LateralViewContext)_localctx).identifier);
				setState(2390);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,292,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(2386);
						match(COMMA);
						setState(2387);
						((LateralViewContext)_localctx).identifier = identifier();
						((LateralViewContext)_localctx).colName.add(((LateralViewContext)_localctx).identifier);
						}
						} 
					}
					setState(2392);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,292,_ctx);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SetQuantifierContext extends ParserRuleContext {
		public TerminalNode DISTINCT() { return getToken(SqlBaseParser.DISTINCT, 0); }
		public TerminalNode ALL() { return getToken(SqlBaseParser.ALL, 0); }
		public SetQuantifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_setQuantifier; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterSetQuantifier(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitSetQuantifier(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitSetQuantifier(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SetQuantifierContext setQuantifier() throws RecognitionException {
		SetQuantifierContext _localctx = new SetQuantifierContext(_ctx, getState());
		enterRule(_localctx, 174, RULE_setQuantifier);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2395);
			_la = _input.LA(1);
			if ( !(_la==ALL || _la==DISTINCT) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class RelationContext extends ParserRuleContext {
		public RelationPrimaryContext relationPrimary() {
			return getRuleContext(RelationPrimaryContext.class,0);
		}
		public TerminalNode LATERAL() { return getToken(SqlBaseParser.LATERAL, 0); }
		public List<RelationExtensionContext> relationExtension() {
			return getRuleContexts(RelationExtensionContext.class);
		}
		public RelationExtensionContext relationExtension(int i) {
			return getRuleContext(RelationExtensionContext.class,i);
		}
		public RelationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_relation; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterRelation(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitRelation(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitRelation(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RelationContext relation() throws RecognitionException {
		RelationContext _localctx = new RelationContext(_ctx, getState());
		enterRule(_localctx, 176, RULE_relation);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2398);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,294,_ctx) ) {
			case 1:
				{
				setState(2397);
				match(LATERAL);
				}
				break;
			}
			setState(2400);
			relationPrimary();
			setState(2404);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,295,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(2401);
					relationExtension();
					}
					} 
				}
				setState(2406);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,295,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class RelationExtensionContext extends ParserRuleContext {
		public JoinRelationContext joinRelation() {
			return getRuleContext(JoinRelationContext.class,0);
		}
		public PivotClauseContext pivotClause() {
			return getRuleContext(PivotClauseContext.class,0);
		}
		public UnpivotClauseContext unpivotClause() {
			return getRuleContext(UnpivotClauseContext.class,0);
		}
		public RelationExtensionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_relationExtension; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterRelationExtension(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitRelationExtension(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitRelationExtension(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RelationExtensionContext relationExtension() throws RecognitionException {
		RelationExtensionContext _localctx = new RelationExtensionContext(_ctx, getState());
		enterRule(_localctx, 178, RULE_relationExtension);
		try {
			setState(2410);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ANTI:
			case CROSS:
			case FULL:
			case INNER:
			case JOIN:
			case LEFT:
			case NATURAL:
			case RIGHT:
			case SEMI:
				enterOuterAlt(_localctx, 1);
				{
				setState(2407);
				joinRelation();
				}
				break;
			case PIVOT:
				enterOuterAlt(_localctx, 2);
				{
				setState(2408);
				pivotClause();
				}
				break;
			case UNPIVOT:
				enterOuterAlt(_localctx, 3);
				{
				setState(2409);
				unpivotClause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class JoinRelationContext extends ParserRuleContext {
		public RelationPrimaryContext right;
		public TerminalNode JOIN() { return getToken(SqlBaseParser.JOIN, 0); }
		public RelationPrimaryContext relationPrimary() {
			return getRuleContext(RelationPrimaryContext.class,0);
		}
		public JoinTypeContext joinType() {
			return getRuleContext(JoinTypeContext.class,0);
		}
		public TerminalNode LATERAL() { return getToken(SqlBaseParser.LATERAL, 0); }
		public JoinCriteriaContext joinCriteria() {
			return getRuleContext(JoinCriteriaContext.class,0);
		}
		public TerminalNode NATURAL() { return getToken(SqlBaseParser.NATURAL, 0); }
		public JoinRelationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_joinRelation; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterJoinRelation(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitJoinRelation(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitJoinRelation(this);
			else return visitor.visitChildren(this);
		}
	}

	public final JoinRelationContext joinRelation() throws RecognitionException {
		JoinRelationContext _localctx = new JoinRelationContext(_ctx, getState());
		enterRule(_localctx, 180, RULE_joinRelation);
		try {
			setState(2429);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ANTI:
			case CROSS:
			case FULL:
			case INNER:
			case JOIN:
			case LEFT:
			case RIGHT:
			case SEMI:
				enterOuterAlt(_localctx, 1);
				{
				{
				setState(2412);
				joinType();
				}
				setState(2413);
				match(JOIN);
				setState(2415);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,297,_ctx) ) {
				case 1:
					{
					setState(2414);
					match(LATERAL);
					}
					break;
				}
				setState(2417);
				((JoinRelationContext)_localctx).right = relationPrimary();
				setState(2419);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,298,_ctx) ) {
				case 1:
					{
					setState(2418);
					joinCriteria();
					}
					break;
				}
				}
				break;
			case NATURAL:
				enterOuterAlt(_localctx, 2);
				{
				setState(2421);
				match(NATURAL);
				setState(2422);
				joinType();
				setState(2423);
				match(JOIN);
				setState(2425);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,299,_ctx) ) {
				case 1:
					{
					setState(2424);
					match(LATERAL);
					}
					break;
				}
				setState(2427);
				((JoinRelationContext)_localctx).right = relationPrimary();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class JoinTypeContext extends ParserRuleContext {
		public TerminalNode INNER() { return getToken(SqlBaseParser.INNER, 0); }
		public TerminalNode CROSS() { return getToken(SqlBaseParser.CROSS, 0); }
		public TerminalNode LEFT() { return getToken(SqlBaseParser.LEFT, 0); }
		public TerminalNode OUTER() { return getToken(SqlBaseParser.OUTER, 0); }
		public TerminalNode SEMI() { return getToken(SqlBaseParser.SEMI, 0); }
		public TerminalNode RIGHT() { return getToken(SqlBaseParser.RIGHT, 0); }
		public TerminalNode FULL() { return getToken(SqlBaseParser.FULL, 0); }
		public TerminalNode ANTI() { return getToken(SqlBaseParser.ANTI, 0); }
		public JoinTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_joinType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterJoinType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitJoinType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitJoinType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final JoinTypeContext joinType() throws RecognitionException {
		JoinTypeContext _localctx = new JoinTypeContext(_ctx, getState());
		enterRule(_localctx, 182, RULE_joinType);
		int _la;
		try {
			setState(2455);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,307,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2432);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==INNER) {
					{
					setState(2431);
					match(INNER);
					}
				}

				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2434);
				match(CROSS);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2435);
				match(LEFT);
				setState(2437);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OUTER) {
					{
					setState(2436);
					match(OUTER);
					}
				}

				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2440);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LEFT) {
					{
					setState(2439);
					match(LEFT);
					}
				}

				setState(2442);
				match(SEMI);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(2443);
				match(RIGHT);
				setState(2445);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OUTER) {
					{
					setState(2444);
					match(OUTER);
					}
				}

				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(2447);
				match(FULL);
				setState(2449);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OUTER) {
					{
					setState(2448);
					match(OUTER);
					}
				}

				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(2452);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LEFT) {
					{
					setState(2451);
					match(LEFT);
					}
				}

				setState(2454);
				match(ANTI);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class JoinCriteriaContext extends ParserRuleContext {
		public TerminalNode ON() { return getToken(SqlBaseParser.ON, 0); }
		public BooleanExpressionContext booleanExpression() {
			return getRuleContext(BooleanExpressionContext.class,0);
		}
		public TerminalNode USING() { return getToken(SqlBaseParser.USING, 0); }
		public IdentifierListContext identifierList() {
			return getRuleContext(IdentifierListContext.class,0);
		}
		public JoinCriteriaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_joinCriteria; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterJoinCriteria(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitJoinCriteria(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitJoinCriteria(this);
			else return visitor.visitChildren(this);
		}
	}

	public final JoinCriteriaContext joinCriteria() throws RecognitionException {
		JoinCriteriaContext _localctx = new JoinCriteriaContext(_ctx, getState());
		enterRule(_localctx, 184, RULE_joinCriteria);
		try {
			setState(2461);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ON:
				enterOuterAlt(_localctx, 1);
				{
				setState(2457);
				match(ON);
				setState(2458);
				booleanExpression(0);
				}
				break;
			case USING:
				enterOuterAlt(_localctx, 2);
				{
				setState(2459);
				match(USING);
				setState(2460);
				identifierList();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SampleContext extends ParserRuleContext {
		public Token seed;
		public TerminalNode TABLESAMPLE() { return getToken(SqlBaseParser.TABLESAMPLE, 0); }
		public List<TerminalNode> LEFT_PAREN() { return getTokens(SqlBaseParser.LEFT_PAREN); }
		public TerminalNode LEFT_PAREN(int i) {
			return getToken(SqlBaseParser.LEFT_PAREN, i);
		}
		public List<TerminalNode> RIGHT_PAREN() { return getTokens(SqlBaseParser.RIGHT_PAREN); }
		public TerminalNode RIGHT_PAREN(int i) {
			return getToken(SqlBaseParser.RIGHT_PAREN, i);
		}
		public SampleMethodContext sampleMethod() {
			return getRuleContext(SampleMethodContext.class,0);
		}
		public TerminalNode REPEATABLE() { return getToken(SqlBaseParser.REPEATABLE, 0); }
		public TerminalNode INTEGER_VALUE() { return getToken(SqlBaseParser.INTEGER_VALUE, 0); }
		public SampleContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sample; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterSample(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitSample(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitSample(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SampleContext sample() throws RecognitionException {
		SampleContext _localctx = new SampleContext(_ctx, getState());
		enterRule(_localctx, 186, RULE_sample);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2463);
			match(TABLESAMPLE);
			setState(2464);
			match(LEFT_PAREN);
			setState(2466);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,309,_ctx) ) {
			case 1:
				{
				setState(2465);
				sampleMethod();
				}
				break;
			}
			setState(2468);
			match(RIGHT_PAREN);
			setState(2473);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,310,_ctx) ) {
			case 1:
				{
				setState(2469);
				match(REPEATABLE);
				setState(2470);
				match(LEFT_PAREN);
				setState(2471);
				((SampleContext)_localctx).seed = match(INTEGER_VALUE);
				setState(2472);
				match(RIGHT_PAREN);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SampleMethodContext extends ParserRuleContext {
		public SampleMethodContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sampleMethod; }
	 
		public SampleMethodContext() { }
		public void copyFrom(SampleMethodContext ctx) {
			super.copyFrom(ctx);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class SampleByRowsContext extends SampleMethodContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode ROWS() { return getToken(SqlBaseParser.ROWS, 0); }
		public SampleByRowsContext(SampleMethodContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterSampleByRows(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitSampleByRows(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitSampleByRows(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class SampleByPercentileContext extends SampleMethodContext {
		public Token negativeSign;
		public Token percentage;
		public TerminalNode PERCENTLIT() { return getToken(SqlBaseParser.PERCENTLIT, 0); }
		public TerminalNode INTEGER_VALUE() { return getToken(SqlBaseParser.INTEGER_VALUE, 0); }
		public TerminalNode DECIMAL_VALUE() { return getToken(SqlBaseParser.DECIMAL_VALUE, 0); }
		public TerminalNode MINUS() { return getToken(SqlBaseParser.MINUS, 0); }
		public SampleByPercentileContext(SampleMethodContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterSampleByPercentile(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitSampleByPercentile(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitSampleByPercentile(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class SampleByBucketContext extends SampleMethodContext {
		public Token sampleType;
		public Token numerator;
		public Token denominator;
		public TerminalNode OUT() { return getToken(SqlBaseParser.OUT, 0); }
		public TerminalNode OF() { return getToken(SqlBaseParser.OF, 0); }
		public TerminalNode BUCKET() { return getToken(SqlBaseParser.BUCKET, 0); }
		public List<TerminalNode> INTEGER_VALUE() { return getTokens(SqlBaseParser.INTEGER_VALUE); }
		public TerminalNode INTEGER_VALUE(int i) {
			return getToken(SqlBaseParser.INTEGER_VALUE, i);
		}
		public TerminalNode ON() { return getToken(SqlBaseParser.ON, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public QualifiedNameContext qualifiedName() {
			return getRuleContext(QualifiedNameContext.class,0);
		}
		public TerminalNode LEFT_PAREN() { return getToken(SqlBaseParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(SqlBaseParser.RIGHT_PAREN, 0); }
		public SampleByBucketContext(SampleMethodContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterSampleByBucket(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitSampleByBucket(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitSampleByBucket(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class SampleByBytesContext extends SampleMethodContext {
		public ExpressionContext bytes;
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public SampleByBytesContext(SampleMethodContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterSampleByBytes(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitSampleByBytes(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitSampleByBytes(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SampleMethodContext sampleMethod() throws RecognitionException {
		SampleMethodContext _localctx = new SampleMethodContext(_ctx, getState());
		enterRule(_localctx, 188, RULE_sampleMethod);
		int _la;
		try {
			setState(2499);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,314,_ctx) ) {
			case 1:
				_localctx = new SampleByPercentileContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(2476);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==MINUS) {
					{
					setState(2475);
					((SampleByPercentileContext)_localctx).negativeSign = match(MINUS);
					}
				}

				setState(2478);
				((SampleByPercentileContext)_localctx).percentage = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==INTEGER_VALUE || _la==DECIMAL_VALUE) ) {
					((SampleByPercentileContext)_localctx).percentage = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2479);
				match(PERCENTLIT);
				}
				break;
			case 2:
				_localctx = new SampleByRowsContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(2480);
				expression();
				setState(2481);
				match(ROWS);
				}
				break;
			case 3:
				_localctx = new SampleByBucketContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(2483);
				((SampleByBucketContext)_localctx).sampleType = match(BUCKET);
				setState(2484);
				((SampleByBucketContext)_localctx).numerator = match(INTEGER_VALUE);
				setState(2485);
				match(OUT);
				setState(2486);
				match(OF);
				setState(2487);
				((SampleByBucketContext)_localctx).denominator = match(INTEGER_VALUE);
				setState(2496);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ON) {
					{
					setState(2488);
					match(ON);
					setState(2494);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,312,_ctx) ) {
					case 1:
						{
						setState(2489);
						identifier();
						}
						break;
					case 2:
						{
						setState(2490);
						qualifiedName();
						setState(2491);
						match(LEFT_PAREN);
						setState(2492);
						match(RIGHT_PAREN);
						}
						break;
					}
					}
				}

				}
				break;
			case 4:
				_localctx = new SampleByBytesContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(2498);
				((SampleByBytesContext)_localctx).bytes = expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class IdentifierListContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(SqlBaseParser.LEFT_PAREN, 0); }
		public IdentifierSeqContext identifierSeq() {
			return getRuleContext(IdentifierSeqContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(SqlBaseParser.RIGHT_PAREN, 0); }
		public IdentifierListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_identifierList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterIdentifierList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitIdentifierList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitIdentifierList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IdentifierListContext identifierList() throws RecognitionException {
		IdentifierListContext _localctx = new IdentifierListContext(_ctx, getState());
		enterRule(_localctx, 190, RULE_identifierList);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2501);
			match(LEFT_PAREN);
			setState(2502);
			identifierSeq();
			setState(2503);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class IdentifierSeqContext extends ParserRuleContext {
		public ErrorCapturingIdentifierContext errorCapturingIdentifier;
		public List<ErrorCapturingIdentifierContext> ident = new ArrayList<ErrorCapturingIdentifierContext>();
		public List<ErrorCapturingIdentifierContext> errorCapturingIdentifier() {
			return getRuleContexts(ErrorCapturingIdentifierContext.class);
		}
		public ErrorCapturingIdentifierContext errorCapturingIdentifier(int i) {
			return getRuleContext(ErrorCapturingIdentifierContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SqlBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SqlBaseParser.COMMA, i);
		}
		public IdentifierSeqContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_identifierSeq; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterIdentifierSeq(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitIdentifierSeq(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitIdentifierSeq(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IdentifierSeqContext identifierSeq() throws RecognitionException {
		IdentifierSeqContext _localctx = new IdentifierSeqContext(_ctx, getState());
		enterRule(_localctx, 192, RULE_identifierSeq);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2505);
			((IdentifierSeqContext)_localctx).errorCapturingIdentifier = errorCapturingIdentifier();
			((IdentifierSeqContext)_localctx).ident.add(((IdentifierSeqContext)_localctx).errorCapturingIdentifier);
			setState(2510);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,315,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(2506);
					match(COMMA);
					setState(2507);
					((IdentifierSeqContext)_localctx).errorCapturingIdentifier = errorCapturingIdentifier();
					((IdentifierSeqContext)_localctx).ident.add(((IdentifierSeqContext)_localctx).errorCapturingIdentifier);
					}
					} 
				}
				setState(2512);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,315,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class OrderedIdentifierListContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(SqlBaseParser.LEFT_PAREN, 0); }
		public List<OrderedIdentifierContext> orderedIdentifier() {
			return getRuleContexts(OrderedIdentifierContext.class);
		}
		public OrderedIdentifierContext orderedIdentifier(int i) {
			return getRuleContext(OrderedIdentifierContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(SqlBaseParser.RIGHT_PAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(SqlBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SqlBaseParser.COMMA, i);
		}
		public OrderedIdentifierListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_orderedIdentifierList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterOrderedIdentifierList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitOrderedIdentifierList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitOrderedIdentifierList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OrderedIdentifierListContext orderedIdentifierList() throws RecognitionException {
		OrderedIdentifierListContext _localctx = new OrderedIdentifierListContext(_ctx, getState());
		enterRule(_localctx, 194, RULE_orderedIdentifierList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2513);
			match(LEFT_PAREN);
			setState(2514);
			orderedIdentifier();
			setState(2519);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2515);
				match(COMMA);
				setState(2516);
				orderedIdentifier();
				}
				}
				setState(2521);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2522);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class OrderedIdentifierContext extends ParserRuleContext {
		public ErrorCapturingIdentifierContext ident;
		public Token ordering;
		public ErrorCapturingIdentifierContext errorCapturingIdentifier() {
			return getRuleContext(ErrorCapturingIdentifierContext.class,0);
		}
		public TerminalNode ASC() { return getToken(SqlBaseParser.ASC, 0); }
		public TerminalNode DESC() { return getToken(SqlBaseParser.DESC, 0); }
		public OrderedIdentifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_orderedIdentifier; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterOrderedIdentifier(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitOrderedIdentifier(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitOrderedIdentifier(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OrderedIdentifierContext orderedIdentifier() throws RecognitionException {
		OrderedIdentifierContext _localctx = new OrderedIdentifierContext(_ctx, getState());
		enterRule(_localctx, 196, RULE_orderedIdentifier);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2524);
			((OrderedIdentifierContext)_localctx).ident = errorCapturingIdentifier();
			setState(2526);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ASC || _la==DESC) {
				{
				setState(2525);
				((OrderedIdentifierContext)_localctx).ordering = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==ASC || _la==DESC) ) {
					((OrderedIdentifierContext)_localctx).ordering = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class IdentifierCommentListContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(SqlBaseParser.LEFT_PAREN, 0); }
		public List<IdentifierCommentContext> identifierComment() {
			return getRuleContexts(IdentifierCommentContext.class);
		}
		public IdentifierCommentContext identifierComment(int i) {
			return getRuleContext(IdentifierCommentContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(SqlBaseParser.RIGHT_PAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(SqlBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SqlBaseParser.COMMA, i);
		}
		public IdentifierCommentListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_identifierCommentList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterIdentifierCommentList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitIdentifierCommentList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitIdentifierCommentList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IdentifierCommentListContext identifierCommentList() throws RecognitionException {
		IdentifierCommentListContext _localctx = new IdentifierCommentListContext(_ctx, getState());
		enterRule(_localctx, 198, RULE_identifierCommentList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2528);
			match(LEFT_PAREN);
			setState(2529);
			identifierComment();
			setState(2534);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2530);
				match(COMMA);
				setState(2531);
				identifierComment();
				}
				}
				setState(2536);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2537);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class IdentifierCommentContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public CommentSpecContext commentSpec() {
			return getRuleContext(CommentSpecContext.class,0);
		}
		public IdentifierCommentContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_identifierComment; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterIdentifierComment(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitIdentifierComment(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitIdentifierComment(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IdentifierCommentContext identifierComment() throws RecognitionException {
		IdentifierCommentContext _localctx = new IdentifierCommentContext(_ctx, getState());
		enterRule(_localctx, 200, RULE_identifierComment);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2539);
			identifier();
			setState(2541);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMENT) {
				{
				setState(2540);
				commentSpec();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class RelationPrimaryContext extends ParserRuleContext {
		public RelationPrimaryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_relationPrimary; }
	 
		public RelationPrimaryContext() { }
		public void copyFrom(RelationPrimaryContext ctx) {
			super.copyFrom(ctx);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class TableValuedFunctionContext extends RelationPrimaryContext {
		public FunctionTableContext functionTable() {
			return getRuleContext(FunctionTableContext.class,0);
		}
		public TableValuedFunctionContext(RelationPrimaryContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterTableValuedFunction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitTableValuedFunction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitTableValuedFunction(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class InlineTableDefault2Context extends RelationPrimaryContext {
		public InlineTableContext inlineTable() {
			return getRuleContext(InlineTableContext.class,0);
		}
		public InlineTableDefault2Context(RelationPrimaryContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterInlineTableDefault2(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitInlineTableDefault2(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitInlineTableDefault2(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class AliasedRelationContext extends RelationPrimaryContext {
		public TerminalNode LEFT_PAREN() { return getToken(SqlBaseParser.LEFT_PAREN, 0); }
		public RelationContext relation() {
			return getRuleContext(RelationContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(SqlBaseParser.RIGHT_PAREN, 0); }
		public TableAliasContext tableAlias() {
			return getRuleContext(TableAliasContext.class,0);
		}
		public SampleContext sample() {
			return getRuleContext(SampleContext.class,0);
		}
		public AliasedRelationContext(RelationPrimaryContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterAliasedRelation(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitAliasedRelation(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitAliasedRelation(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class AliasedQueryContext extends RelationPrimaryContext {
		public TerminalNode LEFT_PAREN() { return getToken(SqlBaseParser.LEFT_PAREN, 0); }
		public QueryContext query() {
			return getRuleContext(QueryContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(SqlBaseParser.RIGHT_PAREN, 0); }
		public TableAliasContext tableAlias() {
			return getRuleContext(TableAliasContext.class,0);
		}
		public SampleContext sample() {
			return getRuleContext(SampleContext.class,0);
		}
		public AliasedQueryContext(RelationPrimaryContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterAliasedQuery(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitAliasedQuery(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitAliasedQuery(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class TableNameContext extends RelationPrimaryContext {
		public MultipartIdentifierContext multipartIdentifier() {
			return getRuleContext(MultipartIdentifierContext.class,0);
		}
		public TableAliasContext tableAlias() {
			return getRuleContext(TableAliasContext.class,0);
		}
		public TemporalClauseContext temporalClause() {
			return getRuleContext(TemporalClauseContext.class,0);
		}
		public SampleContext sample() {
			return getRuleContext(SampleContext.class,0);
		}
		public TableNameContext(RelationPrimaryContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterTableName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitTableName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitTableName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RelationPrimaryContext relationPrimary() throws RecognitionException {
		RelationPrimaryContext _localctx = new RelationPrimaryContext(_ctx, getState());
		enterRule(_localctx, 202, RULE_relationPrimary);
		try {
			setState(2570);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,324,_ctx) ) {
			case 1:
				_localctx = new TableNameContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(2543);
				multipartIdentifier();
				setState(2545);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,320,_ctx) ) {
				case 1:
					{
					setState(2544);
					temporalClause();
					}
					break;
				}
				setState(2548);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,321,_ctx) ) {
				case 1:
					{
					setState(2547);
					sample();
					}
					break;
				}
				setState(2550);
				tableAlias();
				}
				break;
			case 2:
				_localctx = new AliasedQueryContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(2552);
				match(LEFT_PAREN);
				setState(2553);
				query();
				setState(2554);
				match(RIGHT_PAREN);
				setState(2556);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,322,_ctx) ) {
				case 1:
					{
					setState(2555);
					sample();
					}
					break;
				}
				setState(2558);
				tableAlias();
				}
				break;
			case 3:
				_localctx = new AliasedRelationContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(2560);
				match(LEFT_PAREN);
				setState(2561);
				relation();
				setState(2562);
				match(RIGHT_PAREN);
				setState(2564);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,323,_ctx) ) {
				case 1:
					{
					setState(2563);
					sample();
					}
					break;
				}
				setState(2566);
				tableAlias();
				}
				break;
			case 4:
				_localctx = new InlineTableDefault2Context(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(2568);
				inlineTable();
				}
				break;
			case 5:
				_localctx = new TableValuedFunctionContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(2569);
				functionTable();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class InlineTableContext extends ParserRuleContext {
		public TerminalNode VALUES() { return getToken(SqlBaseParser.VALUES, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TableAliasContext tableAlias() {
			return getRuleContext(TableAliasContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(SqlBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SqlBaseParser.COMMA, i);
		}
		public InlineTableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_inlineTable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterInlineTable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitInlineTable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitInlineTable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final InlineTableContext inlineTable() throws RecognitionException {
		InlineTableContext _localctx = new InlineTableContext(_ctx, getState());
		enterRule(_localctx, 204, RULE_inlineTable);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2572);
			match(VALUES);
			setState(2573);
			expression();
			setState(2578);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,325,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(2574);
					match(COMMA);
					setState(2575);
					expression();
					}
					} 
				}
				setState(2580);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,325,_ctx);
			}
			setState(2581);
			tableAlias();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class FunctionTableContext extends ParserRuleContext {
		public FunctionNameContext funcName;
		public TerminalNode LEFT_PAREN() { return getToken(SqlBaseParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(SqlBaseParser.RIGHT_PAREN, 0); }
		public TableAliasContext tableAlias() {
			return getRuleContext(TableAliasContext.class,0);
		}
		public FunctionNameContext functionName() {
			return getRuleContext(FunctionNameContext.class,0);
		}
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SqlBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SqlBaseParser.COMMA, i);
		}
		public FunctionTableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_functionTable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterFunctionTable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitFunctionTable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitFunctionTable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FunctionTableContext functionTable() throws RecognitionException {
		FunctionTableContext _localctx = new FunctionTableContext(_ctx, getState());
		enterRule(_localctx, 206, RULE_functionTable);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2583);
			((FunctionTableContext)_localctx).funcName = functionName();
			setState(2584);
			match(LEFT_PAREN);
			setState(2593);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,327,_ctx) ) {
			case 1:
				{
				setState(2585);
				expression();
				setState(2590);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2586);
					match(COMMA);
					setState(2587);
					expression();
					}
					}
					setState(2592);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			}
			setState(2595);
			match(RIGHT_PAREN);
			setState(2596);
			tableAlias();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TableAliasContext extends ParserRuleContext {
		public StrictIdentifierContext strictIdentifier() {
			return getRuleContext(StrictIdentifierContext.class,0);
		}
		public TerminalNode AS() { return getToken(SqlBaseParser.AS, 0); }
		public IdentifierListContext identifierList() {
			return getRuleContext(IdentifierListContext.class,0);
		}
		public TableAliasContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableAlias; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterTableAlias(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitTableAlias(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitTableAlias(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableAliasContext tableAlias() throws RecognitionException {
		TableAliasContext _localctx = new TableAliasContext(_ctx, getState());
		enterRule(_localctx, 208, RULE_tableAlias);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2605);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,330,_ctx) ) {
			case 1:
				{
				setState(2599);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,328,_ctx) ) {
				case 1:
					{
					setState(2598);
					match(AS);
					}
					break;
				}
				setState(2601);
				strictIdentifier();
				setState(2603);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,329,_ctx) ) {
				case 1:
					{
					setState(2602);
					identifierList();
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class RowFormatContext extends ParserRuleContext {
		public RowFormatContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rowFormat; }
	 
		public RowFormatContext() { }
		public void copyFrom(RowFormatContext ctx) {
			super.copyFrom(ctx);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class RowFormatSerdeContext extends RowFormatContext {
		public StringLitContext name;
		public PropertyListContext props;
		public TerminalNode ROW() { return getToken(SqlBaseParser.ROW, 0); }
		public TerminalNode FORMAT() { return getToken(SqlBaseParser.FORMAT, 0); }
		public TerminalNode SERDE() { return getToken(SqlBaseParser.SERDE, 0); }
		public StringLitContext stringLit() {
			return getRuleContext(StringLitContext.class,0);
		}
		public TerminalNode WITH() { return getToken(SqlBaseParser.WITH, 0); }
		public TerminalNode SERDEPROPERTIES() { return getToken(SqlBaseParser.SERDEPROPERTIES, 0); }
		public PropertyListContext propertyList() {
			return getRuleContext(PropertyListContext.class,0);
		}
		public RowFormatSerdeContext(RowFormatContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterRowFormatSerde(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitRowFormatSerde(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitRowFormatSerde(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class RowFormatDelimitedContext extends RowFormatContext {
		public StringLitContext fieldsTerminatedBy;
		public StringLitContext escapedBy;
		public StringLitContext collectionItemsTerminatedBy;
		public StringLitContext keysTerminatedBy;
		public StringLitContext linesSeparatedBy;
		public StringLitContext nullDefinedAs;
		public TerminalNode ROW() { return getToken(SqlBaseParser.ROW, 0); }
		public TerminalNode FORMAT() { return getToken(SqlBaseParser.FORMAT, 0); }
		public TerminalNode DELIMITED() { return getToken(SqlBaseParser.DELIMITED, 0); }
		public TerminalNode FIELDS() { return getToken(SqlBaseParser.FIELDS, 0); }
		public List<TerminalNode> TERMINATED() { return getTokens(SqlBaseParser.TERMINATED); }
		public TerminalNode TERMINATED(int i) {
			return getToken(SqlBaseParser.TERMINATED, i);
		}
		public List<TerminalNode> BY() { return getTokens(SqlBaseParser.BY); }
		public TerminalNode BY(int i) {
			return getToken(SqlBaseParser.BY, i);
		}
		public TerminalNode COLLECTION() { return getToken(SqlBaseParser.COLLECTION, 0); }
		public TerminalNode ITEMS() { return getToken(SqlBaseParser.ITEMS, 0); }
		public TerminalNode MAP() { return getToken(SqlBaseParser.MAP, 0); }
		public TerminalNode KEYS() { return getToken(SqlBaseParser.KEYS, 0); }
		public TerminalNode LINES() { return getToken(SqlBaseParser.LINES, 0); }
		public TerminalNode NULL() { return getToken(SqlBaseParser.NULL, 0); }
		public TerminalNode DEFINED() { return getToken(SqlBaseParser.DEFINED, 0); }
		public TerminalNode AS() { return getToken(SqlBaseParser.AS, 0); }
		public List<StringLitContext> stringLit() {
			return getRuleContexts(StringLitContext.class);
		}
		public StringLitContext stringLit(int i) {
			return getRuleContext(StringLitContext.class,i);
		}
		public TerminalNode ESCAPED() { return getToken(SqlBaseParser.ESCAPED, 0); }
		public RowFormatDelimitedContext(RowFormatContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterRowFormatDelimited(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitRowFormatDelimited(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitRowFormatDelimited(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RowFormatContext rowFormat() throws RecognitionException {
		RowFormatContext _localctx = new RowFormatContext(_ctx, getState());
		enterRule(_localctx, 210, RULE_rowFormat);
		try {
			setState(2656);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,338,_ctx) ) {
			case 1:
				_localctx = new RowFormatSerdeContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(2607);
				match(ROW);
				setState(2608);
				match(FORMAT);
				setState(2609);
				match(SERDE);
				setState(2610);
				((RowFormatSerdeContext)_localctx).name = stringLit();
				setState(2614);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,331,_ctx) ) {
				case 1:
					{
					setState(2611);
					match(WITH);
					setState(2612);
					match(SERDEPROPERTIES);
					setState(2613);
					((RowFormatSerdeContext)_localctx).props = propertyList();
					}
					break;
				}
				}
				break;
			case 2:
				_localctx = new RowFormatDelimitedContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(2616);
				match(ROW);
				setState(2617);
				match(FORMAT);
				setState(2618);
				match(DELIMITED);
				setState(2628);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,333,_ctx) ) {
				case 1:
					{
					setState(2619);
					match(FIELDS);
					setState(2620);
					match(TERMINATED);
					setState(2621);
					match(BY);
					setState(2622);
					((RowFormatDelimitedContext)_localctx).fieldsTerminatedBy = stringLit();
					setState(2626);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,332,_ctx) ) {
					case 1:
						{
						setState(2623);
						match(ESCAPED);
						setState(2624);
						match(BY);
						setState(2625);
						((RowFormatDelimitedContext)_localctx).escapedBy = stringLit();
						}
						break;
					}
					}
					break;
				}
				setState(2635);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,334,_ctx) ) {
				case 1:
					{
					setState(2630);
					match(COLLECTION);
					setState(2631);
					match(ITEMS);
					setState(2632);
					match(TERMINATED);
					setState(2633);
					match(BY);
					setState(2634);
					((RowFormatDelimitedContext)_localctx).collectionItemsTerminatedBy = stringLit();
					}
					break;
				}
				setState(2642);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,335,_ctx) ) {
				case 1:
					{
					setState(2637);
					match(MAP);
					setState(2638);
					match(KEYS);
					setState(2639);
					match(TERMINATED);
					setState(2640);
					match(BY);
					setState(2641);
					((RowFormatDelimitedContext)_localctx).keysTerminatedBy = stringLit();
					}
					break;
				}
				setState(2648);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,336,_ctx) ) {
				case 1:
					{
					setState(2644);
					match(LINES);
					setState(2645);
					match(TERMINATED);
					setState(2646);
					match(BY);
					setState(2647);
					((RowFormatDelimitedContext)_localctx).linesSeparatedBy = stringLit();
					}
					break;
				}
				setState(2654);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,337,_ctx) ) {
				case 1:
					{
					setState(2650);
					match(NULL);
					setState(2651);
					match(DEFINED);
					setState(2652);
					match(AS);
					setState(2653);
					((RowFormatDelimitedContext)_localctx).nullDefinedAs = stringLit();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class MultipartIdentifierListContext extends ParserRuleContext {
		public List<MultipartIdentifierContext> multipartIdentifier() {
			return getRuleContexts(MultipartIdentifierContext.class);
		}
		public MultipartIdentifierContext multipartIdentifier(int i) {
			return getRuleContext(MultipartIdentifierContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SqlBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SqlBaseParser.COMMA, i);
		}
		public MultipartIdentifierListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_multipartIdentifierList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterMultipartIdentifierList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitMultipartIdentifierList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitMultipartIdentifierList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final MultipartIdentifierListContext multipartIdentifierList() throws RecognitionException {
		MultipartIdentifierListContext _localctx = new MultipartIdentifierListContext(_ctx, getState());
		enterRule(_localctx, 212, RULE_multipartIdentifierList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2658);
			multipartIdentifier();
			setState(2663);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2659);
				match(COMMA);
				setState(2660);
				multipartIdentifier();
				}
				}
				setState(2665);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class MultipartIdentifierContext extends ParserRuleContext {
		public ErrorCapturingIdentifierContext errorCapturingIdentifier;
		public List<ErrorCapturingIdentifierContext> parts = new ArrayList<ErrorCapturingIdentifierContext>();
		public List<ErrorCapturingIdentifierContext> errorCapturingIdentifier() {
			return getRuleContexts(ErrorCapturingIdentifierContext.class);
		}
		public ErrorCapturingIdentifierContext errorCapturingIdentifier(int i) {
			return getRuleContext(ErrorCapturingIdentifierContext.class,i);
		}
		public List<TerminalNode> DOT() { return getTokens(SqlBaseParser.DOT); }
		public TerminalNode DOT(int i) {
			return getToken(SqlBaseParser.DOT, i);
		}
		public MultipartIdentifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_multipartIdentifier; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterMultipartIdentifier(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitMultipartIdentifier(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitMultipartIdentifier(this);
			else return visitor.visitChildren(this);
		}
	}

	public final MultipartIdentifierContext multipartIdentifier() throws RecognitionException {
		MultipartIdentifierContext _localctx = new MultipartIdentifierContext(_ctx, getState());
		enterRule(_localctx, 214, RULE_multipartIdentifier);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2666);
			((MultipartIdentifierContext)_localctx).errorCapturingIdentifier = errorCapturingIdentifier();
			((MultipartIdentifierContext)_localctx).parts.add(((MultipartIdentifierContext)_localctx).errorCapturingIdentifier);
			setState(2671);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,340,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(2667);
					match(DOT);
					setState(2668);
					((MultipartIdentifierContext)_localctx).errorCapturingIdentifier = errorCapturingIdentifier();
					((MultipartIdentifierContext)_localctx).parts.add(((MultipartIdentifierContext)_localctx).errorCapturingIdentifier);
					}
					} 
				}
				setState(2673);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,340,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class MultipartIdentifierPropertyListContext extends ParserRuleContext {
		public List<MultipartIdentifierPropertyContext> multipartIdentifierProperty() {
			return getRuleContexts(MultipartIdentifierPropertyContext.class);
		}
		public MultipartIdentifierPropertyContext multipartIdentifierProperty(int i) {
			return getRuleContext(MultipartIdentifierPropertyContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SqlBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SqlBaseParser.COMMA, i);
		}
		public MultipartIdentifierPropertyListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_multipartIdentifierPropertyList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterMultipartIdentifierPropertyList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitMultipartIdentifierPropertyList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitMultipartIdentifierPropertyList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final MultipartIdentifierPropertyListContext multipartIdentifierPropertyList() throws RecognitionException {
		MultipartIdentifierPropertyListContext _localctx = new MultipartIdentifierPropertyListContext(_ctx, getState());
		enterRule(_localctx, 216, RULE_multipartIdentifierPropertyList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2674);
			multipartIdentifierProperty();
			setState(2679);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2675);
				match(COMMA);
				setState(2676);
				multipartIdentifierProperty();
				}
				}
				setState(2681);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class MultipartIdentifierPropertyContext extends ParserRuleContext {
		public PropertyListContext options;
		public MultipartIdentifierContext multipartIdentifier() {
			return getRuleContext(MultipartIdentifierContext.class,0);
		}
		public TerminalNode OPTIONS() { return getToken(SqlBaseParser.OPTIONS, 0); }
		public PropertyListContext propertyList() {
			return getRuleContext(PropertyListContext.class,0);
		}
		public MultipartIdentifierPropertyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_multipartIdentifierProperty; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterMultipartIdentifierProperty(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitMultipartIdentifierProperty(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitMultipartIdentifierProperty(this);
			else return visitor.visitChildren(this);
		}
	}

	public final MultipartIdentifierPropertyContext multipartIdentifierProperty() throws RecognitionException {
		MultipartIdentifierPropertyContext _localctx = new MultipartIdentifierPropertyContext(_ctx, getState());
		enterRule(_localctx, 218, RULE_multipartIdentifierProperty);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2682);
			multipartIdentifier();
			setState(2685);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OPTIONS) {
				{
				setState(2683);
				match(OPTIONS);
				setState(2684);
				((MultipartIdentifierPropertyContext)_localctx).options = propertyList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TableIdentifierContext extends ParserRuleContext {
		public ErrorCapturingIdentifierContext db;
		public ErrorCapturingIdentifierContext table;
		public List<ErrorCapturingIdentifierContext> errorCapturingIdentifier() {
			return getRuleContexts(ErrorCapturingIdentifierContext.class);
		}
		public ErrorCapturingIdentifierContext errorCapturingIdentifier(int i) {
			return getRuleContext(ErrorCapturingIdentifierContext.class,i);
		}
		public TerminalNode DOT() { return getToken(SqlBaseParser.DOT, 0); }
		public TableIdentifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableIdentifier; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterTableIdentifier(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitTableIdentifier(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitTableIdentifier(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableIdentifierContext tableIdentifier() throws RecognitionException {
		TableIdentifierContext _localctx = new TableIdentifierContext(_ctx, getState());
		enterRule(_localctx, 220, RULE_tableIdentifier);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2690);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,343,_ctx) ) {
			case 1:
				{
				setState(2687);
				((TableIdentifierContext)_localctx).db = errorCapturingIdentifier();
				setState(2688);
				match(DOT);
				}
				break;
			}
			setState(2692);
			((TableIdentifierContext)_localctx).table = errorCapturingIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class FunctionIdentifierContext extends ParserRuleContext {
		public ErrorCapturingIdentifierContext db;
		public ErrorCapturingIdentifierContext function;
		public List<ErrorCapturingIdentifierContext> errorCapturingIdentifier() {
			return getRuleContexts(ErrorCapturingIdentifierContext.class);
		}
		public ErrorCapturingIdentifierContext errorCapturingIdentifier(int i) {
			return getRuleContext(ErrorCapturingIdentifierContext.class,i);
		}
		public TerminalNode DOT() { return getToken(SqlBaseParser.DOT, 0); }
		public FunctionIdentifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_functionIdentifier; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterFunctionIdentifier(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitFunctionIdentifier(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitFunctionIdentifier(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FunctionIdentifierContext functionIdentifier() throws RecognitionException {
		FunctionIdentifierContext _localctx = new FunctionIdentifierContext(_ctx, getState());
		enterRule(_localctx, 222, RULE_functionIdentifier);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2697);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,344,_ctx) ) {
			case 1:
				{
				setState(2694);
				((FunctionIdentifierContext)_localctx).db = errorCapturingIdentifier();
				setState(2695);
				match(DOT);
				}
				break;
			}
			setState(2699);
			((FunctionIdentifierContext)_localctx).function = errorCapturingIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class NamedExpressionContext extends ParserRuleContext {
		public ErrorCapturingIdentifierContext name;
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public IdentifierListContext identifierList() {
			return getRuleContext(IdentifierListContext.class,0);
		}
		public TerminalNode AS() { return getToken(SqlBaseParser.AS, 0); }
		public ErrorCapturingIdentifierContext errorCapturingIdentifier() {
			return getRuleContext(ErrorCapturingIdentifierContext.class,0);
		}
		public NamedExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_namedExpression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterNamedExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitNamedExpression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitNamedExpression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NamedExpressionContext namedExpression() throws RecognitionException {
		NamedExpressionContext _localctx = new NamedExpressionContext(_ctx, getState());
		enterRule(_localctx, 224, RULE_namedExpression);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2701);
			expression();
			setState(2709);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,347,_ctx) ) {
			case 1:
				{
				setState(2703);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,345,_ctx) ) {
				case 1:
					{
					setState(2702);
					match(AS);
					}
					break;
				}
				setState(2707);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,346,_ctx) ) {
				case 1:
					{
					setState(2705);
					((NamedExpressionContext)_localctx).name = errorCapturingIdentifier();
					}
					break;
				case 2:
					{
					setState(2706);
					identifierList();
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class NamedExpressionSeqContext extends ParserRuleContext {
		public NamedExpressionSeqContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_namedExpressionSeq; }
	 
		public NamedExpressionSeqContext() { }
		public void copyFrom(NamedExpressionSeqContext ctx) {
			super.copyFrom(ctx);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class FederatedQueryExpressionContext extends NamedExpressionSeqContext {
		public List<NamedExpressionContext> namedExpression() {
			return getRuleContexts(NamedExpressionContext.class);
		}
		public NamedExpressionContext namedExpression(int i) {
			return getRuleContext(NamedExpressionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SqlBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SqlBaseParser.COMMA, i);
		}
		public FederatedQueryExpressionContext(NamedExpressionSeqContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterFederatedQueryExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitFederatedQueryExpression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitFederatedQueryExpression(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class FlSingleStageExpressionContext extends NamedExpressionSeqContext {
		public FlStageContext flStage() {
			return getRuleContext(FlStageContext.class,0);
		}
		public FlSingleStageExpressionContext(NamedExpressionSeqContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterFlSingleStageExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitFlSingleStageExpression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitFlSingleStageExpression(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class FlSequenceExpressionContext extends NamedExpressionSeqContext {
		public FlTypeContext flType() {
			return getRuleContext(FlTypeContext.class,0);
		}
		public TerminalNode LEFT_PAREN() { return getToken(SqlBaseParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(SqlBaseParser.RIGHT_PAREN, 0); }
		public FlStageSeqContext flStageSeq() {
			return getRuleContext(FlStageSeqContext.class,0);
		}
		public FlSequenceExpressionContext(NamedExpressionSeqContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterFlSequenceExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitFlSequenceExpression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitFlSequenceExpression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NamedExpressionSeqContext namedExpressionSeq() throws RecognitionException {
		NamedExpressionSeqContext _localctx = new NamedExpressionSeqContext(_ctx, getState());
		enterRule(_localctx, 226, RULE_namedExpressionSeq);
		try {
			int _alt;
			setState(2725);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,349,_ctx) ) {
			case 1:
				_localctx = new FederatedQueryExpressionContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(2711);
				namedExpression();
				setState(2716);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,348,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(2712);
						match(COMMA);
						setState(2713);
						namedExpression();
						}
						} 
					}
					setState(2718);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,348,_ctx);
				}
				}
				break;
			case 2:
				_localctx = new FlSingleStageExpressionContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(2719);
				flStage();
				}
				break;
			case 3:
				_localctx = new FlSequenceExpressionContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(2720);
				flType();
				setState(2721);
				match(LEFT_PAREN);
				{
				setState(2722);
				flStageSeq();
				}
				setState(2723);
				match(RIGHT_PAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class FlTypeContext extends ParserRuleContext {
		public TerminalNode SEQUENCE() { return getToken(SqlBaseParser.SEQUENCE, 0); }
		public FlTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_flType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterFlType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitFlType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitFlType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FlTypeContext flType() throws RecognitionException {
		FlTypeContext _localctx = new FlTypeContext(_ctx, getState());
		enterRule(_localctx, 228, RULE_flType);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2727);
			match(SEQUENCE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class FlStageSeqContext extends ParserRuleContext {
		public List<FlStageContext> flStage() {
			return getRuleContexts(FlStageContext.class);
		}
		public FlStageContext flStage(int i) {
			return getRuleContext(FlStageContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SqlBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SqlBaseParser.COMMA, i);
		}
		public FlStageSeqContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_flStageSeq; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterFlStageSeq(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitFlStageSeq(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitFlStageSeq(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FlStageSeqContext flStageSeq() throws RecognitionException {
		FlStageSeqContext _localctx = new FlStageSeqContext(_ctx, getState());
		enterRule(_localctx, 230, RULE_flStageSeq);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2729);
			flStage();
			setState(2734);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2730);
				match(COMMA);
				setState(2731);
				flStage();
				}
				}
				setState(2736);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class FlStageContext extends ParserRuleContext {
		public Token stage;
		public TerminalNode LEFT_PAREN() { return getToken(SqlBaseParser.LEFT_PAREN, 0); }
		public FlExpressionSeqContext flExpressionSeq() {
			return getRuleContext(FlExpressionSeqContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(SqlBaseParser.RIGHT_PAREN, 0); }
		public TerminalNode TRAIN() { return getToken(SqlBaseParser.TRAIN, 0); }
		public TerminalNode FE() { return getToken(SqlBaseParser.FE, 0); }
		public TerminalNode EVAL() { return getToken(SqlBaseParser.EVAL, 0); }
		public TerminalNode PREDICT() { return getToken(SqlBaseParser.PREDICT, 0); }
		public FlStageContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_flStage; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterFlStage(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitFlStage(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitFlStage(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FlStageContext flStage() throws RecognitionException {
		FlStageContext _localctx = new FlStageContext(_ctx, getState());
		enterRule(_localctx, 232, RULE_flStage);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2737);
			((FlStageContext)_localctx).stage = _input.LT(1);
			_la = _input.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 15360L) != 0)) ) {
				((FlStageContext)_localctx).stage = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(2738);
			match(LEFT_PAREN);
			setState(2739);
			flExpressionSeq();
			setState(2740);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class FlExpressionSeqContext extends ParserRuleContext {
		public List<FlExpressionContext> flExpression() {
			return getRuleContexts(FlExpressionContext.class);
		}
		public FlExpressionContext flExpression(int i) {
			return getRuleContext(FlExpressionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SqlBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SqlBaseParser.COMMA, i);
		}
		public FlExpressionSeqContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_flExpressionSeq; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterFlExpressionSeq(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitFlExpressionSeq(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitFlExpressionSeq(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FlExpressionSeqContext flExpressionSeq() throws RecognitionException {
		FlExpressionSeqContext _localctx = new FlExpressionSeqContext(_ctx, getState());
		enterRule(_localctx, 234, RULE_flExpressionSeq);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2742);
			flExpression();
			setState(2747);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2743);
				match(COMMA);
				setState(2744);
				flExpression();
				}
				}
				setState(2749);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class FlExpressionContext extends ParserRuleContext {
		public ValueExpressionContext left;
		public ValueExpressionContext right;
		public FlOperatorContext flOperator() {
			return getRuleContext(FlOperatorContext.class,0);
		}
		public List<ValueExpressionContext> valueExpression() {
			return getRuleContexts(ValueExpressionContext.class);
		}
		public ValueExpressionContext valueExpression(int i) {
			return getRuleContext(ValueExpressionContext.class,i);
		}
		public FlExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_flExpression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterFlExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitFlExpression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitFlExpression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FlExpressionContext flExpression() throws RecognitionException {
		FlExpressionContext _localctx = new FlExpressionContext(_ctx, getState());
		enterRule(_localctx, 236, RULE_flExpression);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2750);
			((FlExpressionContext)_localctx).left = valueExpression(0);
			setState(2751);
			flOperator();
			setState(2752);
			((FlExpressionContext)_localctx).right = valueExpression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class FlOperatorContext extends ParserRuleContext {
		public TerminalNode EQ() { return getToken(SqlBaseParser.EQ, 0); }
		public FlOperatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_flOperator; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterFlOperator(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitFlOperator(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitFlOperator(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FlOperatorContext flOperator() throws RecognitionException {
		FlOperatorContext _localctx = new FlOperatorContext(_ctx, getState());
		enterRule(_localctx, 238, RULE_flOperator);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2754);
			match(EQ);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class PartitionFieldListContext extends ParserRuleContext {
		public PartitionFieldContext partitionField;
		public List<PartitionFieldContext> fields = new ArrayList<PartitionFieldContext>();
		public TerminalNode LEFT_PAREN() { return getToken(SqlBaseParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(SqlBaseParser.RIGHT_PAREN, 0); }
		public List<PartitionFieldContext> partitionField() {
			return getRuleContexts(PartitionFieldContext.class);
		}
		public PartitionFieldContext partitionField(int i) {
			return getRuleContext(PartitionFieldContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SqlBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SqlBaseParser.COMMA, i);
		}
		public PartitionFieldListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partitionFieldList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterPartitionFieldList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitPartitionFieldList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitPartitionFieldList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PartitionFieldListContext partitionFieldList() throws RecognitionException {
		PartitionFieldListContext _localctx = new PartitionFieldListContext(_ctx, getState());
		enterRule(_localctx, 240, RULE_partitionFieldList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2756);
			match(LEFT_PAREN);
			setState(2757);
			((PartitionFieldListContext)_localctx).partitionField = partitionField();
			((PartitionFieldListContext)_localctx).fields.add(((PartitionFieldListContext)_localctx).partitionField);
			setState(2762);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2758);
				match(COMMA);
				setState(2759);
				((PartitionFieldListContext)_localctx).partitionField = partitionField();
				((PartitionFieldListContext)_localctx).fields.add(((PartitionFieldListContext)_localctx).partitionField);
				}
				}
				setState(2764);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2765);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class PartitionFieldContext extends ParserRuleContext {
		public PartitionFieldContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partitionField; }
	 
		public PartitionFieldContext() { }
		public void copyFrom(PartitionFieldContext ctx) {
			super.copyFrom(ctx);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class PartitionColumnContext extends PartitionFieldContext {
		public ColTypeContext colType() {
			return getRuleContext(ColTypeContext.class,0);
		}
		public PartitionColumnContext(PartitionFieldContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterPartitionColumn(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitPartitionColumn(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitPartitionColumn(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class PartitionTransformContext extends PartitionFieldContext {
		public TransformContext transform() {
			return getRuleContext(TransformContext.class,0);
		}
		public PartitionTransformContext(PartitionFieldContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterPartitionTransform(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitPartitionTransform(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitPartitionTransform(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PartitionFieldContext partitionField() throws RecognitionException {
		PartitionFieldContext _localctx = new PartitionFieldContext(_ctx, getState());
		enterRule(_localctx, 242, RULE_partitionField);
		try {
			setState(2769);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,353,_ctx) ) {
			case 1:
				_localctx = new PartitionTransformContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(2767);
				transform();
				}
				break;
			case 2:
				_localctx = new PartitionColumnContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(2768);
				colType();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TransformContext extends ParserRuleContext {
		public TransformContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_transform; }
	 
		public TransformContext() { }
		public void copyFrom(TransformContext ctx) {
			super.copyFrom(ctx);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class IdentityTransformContext extends TransformContext {
		public QualifiedNameContext qualifiedName() {
			return getRuleContext(QualifiedNameContext.class,0);
		}
		public IdentityTransformContext(TransformContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterIdentityTransform(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitIdentityTransform(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitIdentityTransform(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class ApplyTransformContext extends TransformContext {
		public IdentifierContext transformName;
		public TransformArgumentContext transformArgument;
		public List<TransformArgumentContext> argument = new ArrayList<TransformArgumentContext>();
		public TerminalNode LEFT_PAREN() { return getToken(SqlBaseParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(SqlBaseParser.RIGHT_PAREN, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public List<TransformArgumentContext> transformArgument() {
			return getRuleContexts(TransformArgumentContext.class);
		}
		public TransformArgumentContext transformArgument(int i) {
			return getRuleContext(TransformArgumentContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SqlBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SqlBaseParser.COMMA, i);
		}
		public ApplyTransformContext(TransformContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterApplyTransform(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitApplyTransform(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitApplyTransform(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TransformContext transform() throws RecognitionException {
		TransformContext _localctx = new TransformContext(_ctx, getState());
		enterRule(_localctx, 244, RULE_transform);
		int _la;
		try {
			setState(2784);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,355,_ctx) ) {
			case 1:
				_localctx = new IdentityTransformContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(2771);
				qualifiedName();
				}
				break;
			case 2:
				_localctx = new ApplyTransformContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(2772);
				((ApplyTransformContext)_localctx).transformName = identifier();
				setState(2773);
				match(LEFT_PAREN);
				setState(2774);
				((ApplyTransformContext)_localctx).transformArgument = transformArgument();
				((ApplyTransformContext)_localctx).argument.add(((ApplyTransformContext)_localctx).transformArgument);
				setState(2779);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2775);
					match(COMMA);
					setState(2776);
					((ApplyTransformContext)_localctx).transformArgument = transformArgument();
					((ApplyTransformContext)_localctx).argument.add(((ApplyTransformContext)_localctx).transformArgument);
					}
					}
					setState(2781);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2782);
				match(RIGHT_PAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TransformArgumentContext extends ParserRuleContext {
		public QualifiedNameContext qualifiedName() {
			return getRuleContext(QualifiedNameContext.class,0);
		}
		public ConstantContext constant() {
			return getRuleContext(ConstantContext.class,0);
		}
		public TransformArgumentContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_transformArgument; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterTransformArgument(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitTransformArgument(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitTransformArgument(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TransformArgumentContext transformArgument() throws RecognitionException {
		TransformArgumentContext _localctx = new TransformArgumentContext(_ctx, getState());
		enterRule(_localctx, 246, RULE_transformArgument);
		try {
			setState(2788);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,356,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2786);
				qualifiedName();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2787);
				constant();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ExpressionContext extends ParserRuleContext {
		public BooleanExpressionContext booleanExpression() {
			return getRuleContext(BooleanExpressionContext.class,0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitExpression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitExpression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExpressionContext expression() throws RecognitionException {
		ExpressionContext _localctx = new ExpressionContext(_ctx, getState());
		enterRule(_localctx, 248, RULE_expression);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2790);
			booleanExpression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ExpressionSeqContext extends ParserRuleContext {
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SqlBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SqlBaseParser.COMMA, i);
		}
		public ExpressionSeqContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expressionSeq; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterExpressionSeq(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitExpressionSeq(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitExpressionSeq(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExpressionSeqContext expressionSeq() throws RecognitionException {
		ExpressionSeqContext _localctx = new ExpressionSeqContext(_ctx, getState());
		enterRule(_localctx, 250, RULE_expressionSeq);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2792);
			expression();
			setState(2797);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2793);
				match(COMMA);
				setState(2794);
				expression();
				}
				}
				setState(2799);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class BooleanExpressionContext extends ParserRuleContext {
		public BooleanExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_booleanExpression; }
	 
		public BooleanExpressionContext() { }
		public void copyFrom(BooleanExpressionContext ctx) {
			super.copyFrom(ctx);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class LogicalNotContext extends BooleanExpressionContext {
		public TerminalNode NOT() { return getToken(SqlBaseParser.NOT, 0); }
		public BooleanExpressionContext booleanExpression() {
			return getRuleContext(BooleanExpressionContext.class,0);
		}
		public LogicalNotContext(BooleanExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterLogicalNot(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitLogicalNot(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitLogicalNot(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class PredicatedContext extends BooleanExpressionContext {
		public ValueExpressionContext valueExpression() {
			return getRuleContext(ValueExpressionContext.class,0);
		}
		public PredicateContext predicate() {
			return getRuleContext(PredicateContext.class,0);
		}
		public PredicatedContext(BooleanExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterPredicated(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitPredicated(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitPredicated(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class ExistsContext extends BooleanExpressionContext {
		public TerminalNode EXISTS() { return getToken(SqlBaseParser.EXISTS, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(SqlBaseParser.LEFT_PAREN, 0); }
		public QueryContext query() {
			return getRuleContext(QueryContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(SqlBaseParser.RIGHT_PAREN, 0); }
		public ExistsContext(BooleanExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterExists(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitExists(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitExists(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class LogicalBinaryContext extends BooleanExpressionContext {
		public BooleanExpressionContext left;
		public Token operator;
		public BooleanExpressionContext right;
		public List<BooleanExpressionContext> booleanExpression() {
			return getRuleContexts(BooleanExpressionContext.class);
		}
		public BooleanExpressionContext booleanExpression(int i) {
			return getRuleContext(BooleanExpressionContext.class,i);
		}
		public TerminalNode AND() { return getToken(SqlBaseParser.AND, 0); }
		public TerminalNode OR() { return getToken(SqlBaseParser.OR, 0); }
		public LogicalBinaryContext(BooleanExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterLogicalBinary(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitLogicalBinary(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitLogicalBinary(this);
			else return visitor.visitChildren(this);
		}
	}

	public final BooleanExpressionContext booleanExpression() throws RecognitionException {
		return booleanExpression(0);
	}

	private BooleanExpressionContext booleanExpression(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		BooleanExpressionContext _localctx = new BooleanExpressionContext(_ctx, _parentState);
		BooleanExpressionContext _prevctx = _localctx;
		int _startState = 252;
		enterRecursionRule(_localctx, 252, RULE_booleanExpression, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2812);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,359,_ctx) ) {
			case 1:
				{
				_localctx = new LogicalNotContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;

				setState(2801);
				match(NOT);
				setState(2802);
				booleanExpression(5);
				}
				break;
			case 2:
				{
				_localctx = new ExistsContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(2803);
				match(EXISTS);
				setState(2804);
				match(LEFT_PAREN);
				setState(2805);
				query();
				setState(2806);
				match(RIGHT_PAREN);
				}
				break;
			case 3:
				{
				_localctx = new PredicatedContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(2808);
				valueExpression(0);
				setState(2810);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,358,_ctx) ) {
				case 1:
					{
					setState(2809);
					predicate();
					}
					break;
				}
				}
				break;
			}
			_ctx.stop = _input.LT(-1);
			setState(2822);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,361,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					setState(2820);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,360,_ctx) ) {
					case 1:
						{
						_localctx = new LogicalBinaryContext(new BooleanExpressionContext(_parentctx, _parentState));
						((LogicalBinaryContext)_localctx).left = _prevctx;
						pushNewRecursionContext(_localctx, _startState, RULE_booleanExpression);
						setState(2814);
						if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
						setState(2815);
						((LogicalBinaryContext)_localctx).operator = match(AND);
						setState(2816);
						((LogicalBinaryContext)_localctx).right = booleanExpression(3);
						}
						break;
					case 2:
						{
						_localctx = new LogicalBinaryContext(new BooleanExpressionContext(_parentctx, _parentState));
						((LogicalBinaryContext)_localctx).left = _prevctx;
						pushNewRecursionContext(_localctx, _startState, RULE_booleanExpression);
						setState(2817);
						if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
						setState(2818);
						((LogicalBinaryContext)_localctx).operator = match(OR);
						setState(2819);
						((LogicalBinaryContext)_localctx).right = booleanExpression(2);
						}
						break;
					}
					} 
				}
				setState(2824);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,361,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class PredicateContext extends ParserRuleContext {
		public Token kind;
		public ValueExpressionContext lower;
		public ValueExpressionContext upper;
		public ValueExpressionContext pattern;
		public Token quantifier;
		public StringLitContext escapeChar;
		public ValueExpressionContext right;
		public TerminalNode AND() { return getToken(SqlBaseParser.AND, 0); }
		public TerminalNode BETWEEN() { return getToken(SqlBaseParser.BETWEEN, 0); }
		public List<ValueExpressionContext> valueExpression() {
			return getRuleContexts(ValueExpressionContext.class);
		}
		public ValueExpressionContext valueExpression(int i) {
			return getRuleContext(ValueExpressionContext.class,i);
		}
		public TerminalNode NOT() { return getToken(SqlBaseParser.NOT, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(SqlBaseParser.LEFT_PAREN, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(SqlBaseParser.RIGHT_PAREN, 0); }
		public TerminalNode IN() { return getToken(SqlBaseParser.IN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(SqlBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SqlBaseParser.COMMA, i);
		}
		public QueryContext query() {
			return getRuleContext(QueryContext.class,0);
		}
		public TerminalNode RLIKE() { return getToken(SqlBaseParser.RLIKE, 0); }
		public TerminalNode LIKE() { return getToken(SqlBaseParser.LIKE, 0); }
		public TerminalNode ILIKE() { return getToken(SqlBaseParser.ILIKE, 0); }
		public TerminalNode ANY() { return getToken(SqlBaseParser.ANY, 0); }
		public TerminalNode SOME() { return getToken(SqlBaseParser.SOME, 0); }
		public TerminalNode ALL() { return getToken(SqlBaseParser.ALL, 0); }
		public TerminalNode ESCAPE() { return getToken(SqlBaseParser.ESCAPE, 0); }
		public StringLitContext stringLit() {
			return getRuleContext(StringLitContext.class,0);
		}
		public TerminalNode IS() { return getToken(SqlBaseParser.IS, 0); }
		public TerminalNode NULL() { return getToken(SqlBaseParser.NULL, 0); }
		public TerminalNode TRUE() { return getToken(SqlBaseParser.TRUE, 0); }
		public TerminalNode FALSE() { return getToken(SqlBaseParser.FALSE, 0); }
		public TerminalNode UNKNOWN() { return getToken(SqlBaseParser.UNKNOWN, 0); }
		public TerminalNode FROM() { return getToken(SqlBaseParser.FROM, 0); }
		public TerminalNode DISTINCT() { return getToken(SqlBaseParser.DISTINCT, 0); }
		public PredicateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_predicate; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterPredicate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitPredicate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitPredicate(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PredicateContext predicate() throws RecognitionException {
		PredicateContext _localctx = new PredicateContext(_ctx, getState());
		enterRule(_localctx, 254, RULE_predicate);
		int _la;
		try {
			setState(2907);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,375,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2826);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(2825);
					match(NOT);
					}
				}

				setState(2828);
				((PredicateContext)_localctx).kind = match(BETWEEN);
				setState(2829);
				((PredicateContext)_localctx).lower = valueExpression(0);
				setState(2830);
				match(AND);
				setState(2831);
				((PredicateContext)_localctx).upper = valueExpression(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2834);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(2833);
					match(NOT);
					}
				}

				setState(2836);
				((PredicateContext)_localctx).kind = match(IN);
				setState(2837);
				match(LEFT_PAREN);
				setState(2838);
				expression();
				setState(2843);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2839);
					match(COMMA);
					setState(2840);
					expression();
					}
					}
					setState(2845);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2846);
				match(RIGHT_PAREN);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2849);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(2848);
					match(NOT);
					}
				}

				setState(2851);
				((PredicateContext)_localctx).kind = match(IN);
				setState(2852);
				match(LEFT_PAREN);
				setState(2853);
				query();
				setState(2854);
				match(RIGHT_PAREN);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2857);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(2856);
					match(NOT);
					}
				}

				setState(2859);
				((PredicateContext)_localctx).kind = match(RLIKE);
				setState(2860);
				((PredicateContext)_localctx).pattern = valueExpression(0);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(2862);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(2861);
					match(NOT);
					}
				}

				setState(2864);
				((PredicateContext)_localctx).kind = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==LIKE || _la==ILIKE) ) {
					((PredicateContext)_localctx).kind = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2865);
				((PredicateContext)_localctx).quantifier = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==ALL || _la==ANY || _la==SOME) ) {
					((PredicateContext)_localctx).quantifier = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2879);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,369,_ctx) ) {
				case 1:
					{
					setState(2866);
					match(LEFT_PAREN);
					setState(2867);
					match(RIGHT_PAREN);
					}
					break;
				case 2:
					{
					setState(2868);
					match(LEFT_PAREN);
					setState(2869);
					expression();
					setState(2874);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(2870);
						match(COMMA);
						setState(2871);
						expression();
						}
						}
						setState(2876);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					setState(2877);
					match(RIGHT_PAREN);
					}
					break;
				}
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(2882);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(2881);
					match(NOT);
					}
				}

				setState(2884);
				((PredicateContext)_localctx).kind = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==LIKE || _la==ILIKE) ) {
					((PredicateContext)_localctx).kind = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2885);
				((PredicateContext)_localctx).pattern = valueExpression(0);
				setState(2888);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,371,_ctx) ) {
				case 1:
					{
					setState(2886);
					match(ESCAPE);
					setState(2887);
					((PredicateContext)_localctx).escapeChar = stringLit();
					}
					break;
				}
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(2890);
				match(IS);
				setState(2892);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(2891);
					match(NOT);
					}
				}

				setState(2894);
				((PredicateContext)_localctx).kind = match(NULL);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(2895);
				match(IS);
				setState(2897);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(2896);
					match(NOT);
					}
				}

				setState(2899);
				((PredicateContext)_localctx).kind = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==FALSE || _la==TRUE || _la==UNKNOWN) ) {
					((PredicateContext)_localctx).kind = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(2900);
				match(IS);
				setState(2902);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(2901);
					match(NOT);
					}
				}

				setState(2904);
				((PredicateContext)_localctx).kind = match(DISTINCT);
				setState(2905);
				match(FROM);
				setState(2906);
				((PredicateContext)_localctx).right = valueExpression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ValueExpressionContext extends ParserRuleContext {
		public ValueExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_valueExpression; }
	 
		public ValueExpressionContext() { }
		public void copyFrom(ValueExpressionContext ctx) {
			super.copyFrom(ctx);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class ValueExpressionDefaultContext extends ValueExpressionContext {
		public PrimaryExpressionContext primaryExpression() {
			return getRuleContext(PrimaryExpressionContext.class,0);
		}
		public ValueExpressionDefaultContext(ValueExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterValueExpressionDefault(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitValueExpressionDefault(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitValueExpressionDefault(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class ComparisonContext extends ValueExpressionContext {
		public ValueExpressionContext left;
		public ValueExpressionContext right;
		public ComparisonOperatorContext comparisonOperator() {
			return getRuleContext(ComparisonOperatorContext.class,0);
		}
		public List<ValueExpressionContext> valueExpression() {
			return getRuleContexts(ValueExpressionContext.class);
		}
		public ValueExpressionContext valueExpression(int i) {
			return getRuleContext(ValueExpressionContext.class,i);
		}
		public ComparisonContext(ValueExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterComparison(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitComparison(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitComparison(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class ArithmeticBinaryContext extends ValueExpressionContext {
		public ValueExpressionContext left;
		public Token operator;
		public ValueExpressionContext right;
		public List<ValueExpressionContext> valueExpression() {
			return getRuleContexts(ValueExpressionContext.class);
		}
		public ValueExpressionContext valueExpression(int i) {
			return getRuleContext(ValueExpressionContext.class,i);
		}
		public TerminalNode ASTERISK() { return getToken(SqlBaseParser.ASTERISK, 0); }
		public TerminalNode SLASH() { return getToken(SqlBaseParser.SLASH, 0); }
		public TerminalNode PERCENT() { return getToken(SqlBaseParser.PERCENT, 0); }
		public TerminalNode DIV() { return getToken(SqlBaseParser.DIV, 0); }
		public TerminalNode PLUS() { return getToken(SqlBaseParser.PLUS, 0); }
		public TerminalNode MINUS() { return getToken(SqlBaseParser.MINUS, 0); }
		public TerminalNode CONCAT_PIPE() { return getToken(SqlBaseParser.CONCAT_PIPE, 0); }
		public TerminalNode AMPERSAND() { return getToken(SqlBaseParser.AMPERSAND, 0); }
		public TerminalNode HAT() { return getToken(SqlBaseParser.HAT, 0); }
		public TerminalNode PIPE() { return getToken(SqlBaseParser.PIPE, 0); }
		public ArithmeticBinaryContext(ValueExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterArithmeticBinary(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitArithmeticBinary(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitArithmeticBinary(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class ArithmeticUnaryContext extends ValueExpressionContext {
		public Token operator;
		public ValueExpressionContext valueExpression() {
			return getRuleContext(ValueExpressionContext.class,0);
		}
		public TerminalNode MINUS() { return getToken(SqlBaseParser.MINUS, 0); }
		public TerminalNode PLUS() { return getToken(SqlBaseParser.PLUS, 0); }
		public TerminalNode TILDE() { return getToken(SqlBaseParser.TILDE, 0); }
		public ArithmeticUnaryContext(ValueExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterArithmeticUnary(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitArithmeticUnary(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitArithmeticUnary(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ValueExpressionContext valueExpression() throws RecognitionException {
		return valueExpression(0);
	}

	private ValueExpressionContext valueExpression(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		ValueExpressionContext _localctx = new ValueExpressionContext(_ctx, _parentState);
		ValueExpressionContext _prevctx = _localctx;
		int _startState = 256;
		enterRecursionRule(_localctx, 256, RULE_valueExpression, _p);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2913);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,376,_ctx) ) {
			case 1:
				{
				_localctx = new ValueExpressionDefaultContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;

				setState(2910);
				primaryExpression(0);
				}
				break;
			case 2:
				{
				_localctx = new ArithmeticUnaryContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(2911);
				((ArithmeticUnaryContext)_localctx).operator = _input.LT(1);
				_la = _input.LA(1);
				if ( !(((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & 67L) != 0)) ) {
					((ArithmeticUnaryContext)_localctx).operator = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2912);
				valueExpression(7);
				}
				break;
			}
			_ctx.stop = _input.LT(-1);
			setState(2936);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,378,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					setState(2934);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,377,_ctx) ) {
					case 1:
						{
						_localctx = new ArithmeticBinaryContext(new ValueExpressionContext(_parentctx, _parentState));
						((ArithmeticBinaryContext)_localctx).left = _prevctx;
						pushNewRecursionContext(_localctx, _startState, RULE_valueExpression);
						setState(2915);
						if (!(precpred(_ctx, 6))) throw new FailedPredicateException(this, "precpred(_ctx, 6)");
						setState(2916);
						((ArithmeticBinaryContext)_localctx).operator = _input.LT(1);
						_la = _input.LA(1);
						if ( !(_la==DIV || ((((_la - 324)) & ~0x3f) == 0 && ((1L << (_la - 324)) & 13L) != 0)) ) {
							((ArithmeticBinaryContext)_localctx).operator = (Token)_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						setState(2917);
						((ArithmeticBinaryContext)_localctx).right = valueExpression(7);
						}
						break;
					case 2:
						{
						_localctx = new ArithmeticBinaryContext(new ValueExpressionContext(_parentctx, _parentState));
						((ArithmeticBinaryContext)_localctx).left = _prevctx;
						pushNewRecursionContext(_localctx, _startState, RULE_valueExpression);
						setState(2918);
						if (!(precpred(_ctx, 5))) throw new FailedPredicateException(this, "precpred(_ctx, 5)");
						setState(2919);
						((ArithmeticBinaryContext)_localctx).operator = _input.LT(1);
						_la = _input.LA(1);
						if ( !(((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & 515L) != 0)) ) {
							((ArithmeticBinaryContext)_localctx).operator = (Token)_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						setState(2920);
						((ArithmeticBinaryContext)_localctx).right = valueExpression(6);
						}
						break;
					case 3:
						{
						_localctx = new ArithmeticBinaryContext(new ValueExpressionContext(_parentctx, _parentState));
						((ArithmeticBinaryContext)_localctx).left = _prevctx;
						pushNewRecursionContext(_localctx, _startState, RULE_valueExpression);
						setState(2921);
						if (!(precpred(_ctx, 4))) throw new FailedPredicateException(this, "precpred(_ctx, 4)");
						setState(2922);
						((ArithmeticBinaryContext)_localctx).operator = match(AMPERSAND);
						setState(2923);
						((ArithmeticBinaryContext)_localctx).right = valueExpression(5);
						}
						break;
					case 4:
						{
						_localctx = new ArithmeticBinaryContext(new ValueExpressionContext(_parentctx, _parentState));
						((ArithmeticBinaryContext)_localctx).left = _prevctx;
						pushNewRecursionContext(_localctx, _startState, RULE_valueExpression);
						setState(2924);
						if (!(precpred(_ctx, 3))) throw new FailedPredicateException(this, "precpred(_ctx, 3)");
						setState(2925);
						((ArithmeticBinaryContext)_localctx).operator = match(HAT);
						setState(2926);
						((ArithmeticBinaryContext)_localctx).right = valueExpression(4);
						}
						break;
					case 5:
						{
						_localctx = new ArithmeticBinaryContext(new ValueExpressionContext(_parentctx, _parentState));
						((ArithmeticBinaryContext)_localctx).left = _prevctx;
						pushNewRecursionContext(_localctx, _startState, RULE_valueExpression);
						setState(2927);
						if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
						setState(2928);
						((ArithmeticBinaryContext)_localctx).operator = match(PIPE);
						setState(2929);
						((ArithmeticBinaryContext)_localctx).right = valueExpression(3);
						}
						break;
					case 6:
						{
						_localctx = new ComparisonContext(new ValueExpressionContext(_parentctx, _parentState));
						((ComparisonContext)_localctx).left = _prevctx;
						pushNewRecursionContext(_localctx, _startState, RULE_valueExpression);
						setState(2930);
						if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
						setState(2931);
						comparisonOperator();
						setState(2932);
						((ComparisonContext)_localctx).right = valueExpression(2);
						}
						break;
					}
					} 
				}
				setState(2938);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,378,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DatetimeUnitContext extends ParserRuleContext {
		public TerminalNode YEAR() { return getToken(SqlBaseParser.YEAR, 0); }
		public TerminalNode QUARTER() { return getToken(SqlBaseParser.QUARTER, 0); }
		public TerminalNode MONTH() { return getToken(SqlBaseParser.MONTH, 0); }
		public TerminalNode WEEK() { return getToken(SqlBaseParser.WEEK, 0); }
		public TerminalNode DAY() { return getToken(SqlBaseParser.DAY, 0); }
		public TerminalNode DAYOFYEAR() { return getToken(SqlBaseParser.DAYOFYEAR, 0); }
		public TerminalNode HOUR() { return getToken(SqlBaseParser.HOUR, 0); }
		public TerminalNode MINUTE() { return getToken(SqlBaseParser.MINUTE, 0); }
		public TerminalNode SECOND() { return getToken(SqlBaseParser.SECOND, 0); }
		public TerminalNode MILLISECOND() { return getToken(SqlBaseParser.MILLISECOND, 0); }
		public TerminalNode MICROSECOND() { return getToken(SqlBaseParser.MICROSECOND, 0); }
		public DatetimeUnitContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_datetimeUnit; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterDatetimeUnit(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitDatetimeUnit(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitDatetimeUnit(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DatetimeUnitContext datetimeUnit() throws RecognitionException {
		DatetimeUnitContext _localctx = new DatetimeUnitContext(_ctx, getState());
		enterRule(_localctx, 258, RULE_datetimeUnit);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2939);
			_la = _input.LA(1);
			if ( !(((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & 72057594037927941L) != 0) || ((((_la - 163)) & ~0x3f) == 0 && ((1L << (_la - 163)) & 140737488355413L) != 0) || _la==SECOND || _la==WEEK || _la==YEAR) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class PrimaryExpressionContext extends ParserRuleContext {
		public PrimaryExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_primaryExpression; }
	 
		public PrimaryExpressionContext() { }
		public void copyFrom(PrimaryExpressionContext ctx) {
			super.copyFrom(ctx);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class StructContext extends PrimaryExpressionContext {
		public NamedExpressionContext namedExpression;
		public List<NamedExpressionContext> argument = new ArrayList<NamedExpressionContext>();
		public TerminalNode STRUCT() { return getToken(SqlBaseParser.STRUCT, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(SqlBaseParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(SqlBaseParser.RIGHT_PAREN, 0); }
		public List<NamedExpressionContext> namedExpression() {
			return getRuleContexts(NamedExpressionContext.class);
		}
		public NamedExpressionContext namedExpression(int i) {
			return getRuleContext(NamedExpressionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SqlBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SqlBaseParser.COMMA, i);
		}
		public StructContext(PrimaryExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterStruct(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitStruct(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitStruct(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class DereferenceContext extends PrimaryExpressionContext {
		public PrimaryExpressionContext base;
		public IdentifierContext fieldName;
		public TerminalNode DOT() { return getToken(SqlBaseParser.DOT, 0); }
		public PrimaryExpressionContext primaryExpression() {
			return getRuleContext(PrimaryExpressionContext.class,0);
		}
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public DereferenceContext(PrimaryExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterDereference(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitDereference(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitDereference(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class TimestampaddContext extends PrimaryExpressionContext {
		public Token name;
		public DatetimeUnitContext unit;
		public ValueExpressionContext unitsAmount;
		public ValueExpressionContext timestamp;
		public TerminalNode LEFT_PAREN() { return getToken(SqlBaseParser.LEFT_PAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(SqlBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SqlBaseParser.COMMA, i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(SqlBaseParser.RIGHT_PAREN, 0); }
		public DatetimeUnitContext datetimeUnit() {
			return getRuleContext(DatetimeUnitContext.class,0);
		}
		public List<ValueExpressionContext> valueExpression() {
			return getRuleContexts(ValueExpressionContext.class);
		}
		public ValueExpressionContext valueExpression(int i) {
			return getRuleContext(ValueExpressionContext.class,i);
		}
		public TerminalNode TIMESTAMPADD() { return getToken(SqlBaseParser.TIMESTAMPADD, 0); }
		public TerminalNode DATEADD() { return getToken(SqlBaseParser.DATEADD, 0); }
		public TimestampaddContext(PrimaryExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterTimestampadd(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitTimestampadd(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitTimestampadd(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class SubstringContext extends PrimaryExpressionContext {
		public ValueExpressionContext str;
		public ValueExpressionContext pos;
		public ValueExpressionContext len;
		public TerminalNode LEFT_PAREN() { return getToken(SqlBaseParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(SqlBaseParser.RIGHT_PAREN, 0); }
		public TerminalNode SUBSTR() { return getToken(SqlBaseParser.SUBSTR, 0); }
		public TerminalNode SUBSTRING() { return getToken(SqlBaseParser.SUBSTRING, 0); }
		public List<ValueExpressionContext> valueExpression() {
			return getRuleContexts(ValueExpressionContext.class);
		}
		public ValueExpressionContext valueExpression(int i) {
			return getRuleContext(ValueExpressionContext.class,i);
		}
		public TerminalNode FROM() { return getToken(SqlBaseParser.FROM, 0); }
		public List<TerminalNode> COMMA() { return getTokens(SqlBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SqlBaseParser.COMMA, i);
		}
		public TerminalNode FOR() { return getToken(SqlBaseParser.FOR, 0); }
		public SubstringContext(PrimaryExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterSubstring(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitSubstring(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitSubstring(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class CastContext extends PrimaryExpressionContext {
		public Token name;
		public TerminalNode LEFT_PAREN() { return getToken(SqlBaseParser.LEFT_PAREN, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode AS() { return getToken(SqlBaseParser.AS, 0); }
		public DataTypeContext dataType() {
			return getRuleContext(DataTypeContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(SqlBaseParser.RIGHT_PAREN, 0); }
		public TerminalNode CAST() { return getToken(SqlBaseParser.CAST, 0); }
		public TerminalNode TRY_CAST() { return getToken(SqlBaseParser.TRY_CAST, 0); }
		public CastContext(PrimaryExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterCast(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitCast(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitCast(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class LambdaContext extends PrimaryExpressionContext {
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public TerminalNode ARROW() { return getToken(SqlBaseParser.ARROW, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode LEFT_PAREN() { return getToken(SqlBaseParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(SqlBaseParser.RIGHT_PAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(SqlBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SqlBaseParser.COMMA, i);
		}
		public LambdaContext(PrimaryExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterLambda(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitLambda(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitLambda(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class FeatureReferenceContext extends PrimaryExpressionContext {
		public TerminalNode LEFT_BRACKET() { return getToken(SqlBaseParser.LEFT_BRACKET, 0); }
		public FeatureExpressionContext featureExpression() {
			return getRuleContext(FeatureExpressionContext.class,0);
		}
		public TerminalNode RIGHT_BRACKET() { return getToken(SqlBaseParser.RIGHT_BRACKET, 0); }
		public FeatureReferenceContext(PrimaryExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterFeatureReference(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitFeatureReference(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitFeatureReference(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class ParenthesizedExpressionContext extends PrimaryExpressionContext {
		public TerminalNode LEFT_PAREN() { return getToken(SqlBaseParser.LEFT_PAREN, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(SqlBaseParser.RIGHT_PAREN, 0); }
		public ParenthesizedExpressionContext(PrimaryExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterParenthesizedExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitParenthesizedExpression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitParenthesizedExpression(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class Any_valueContext extends PrimaryExpressionContext {
		public TerminalNode ANY_VALUE() { return getToken(SqlBaseParser.ANY_VALUE, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(SqlBaseParser.LEFT_PAREN, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(SqlBaseParser.RIGHT_PAREN, 0); }
		public TerminalNode IGNORE() { return getToken(SqlBaseParser.IGNORE, 0); }
		public TerminalNode NULLS() { return getToken(SqlBaseParser.NULLS, 0); }
		public Any_valueContext(PrimaryExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterAny_value(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitAny_value(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitAny_value(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class TrimContext extends PrimaryExpressionContext {
		public Token trimOption;
		public ValueExpressionContext trimStr;
		public ValueExpressionContext srcStr;
		public TerminalNode TRIM() { return getToken(SqlBaseParser.TRIM, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(SqlBaseParser.LEFT_PAREN, 0); }
		public TerminalNode FROM() { return getToken(SqlBaseParser.FROM, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(SqlBaseParser.RIGHT_PAREN, 0); }
		public List<ValueExpressionContext> valueExpression() {
			return getRuleContexts(ValueExpressionContext.class);
		}
		public ValueExpressionContext valueExpression(int i) {
			return getRuleContext(ValueExpressionContext.class,i);
		}
		public TerminalNode BOTH() { return getToken(SqlBaseParser.BOTH, 0); }
		public TerminalNode LEADING() { return getToken(SqlBaseParser.LEADING, 0); }
		public TerminalNode TRAILING() { return getToken(SqlBaseParser.TRAILING, 0); }
		public TrimContext(PrimaryExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterTrim(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitTrim(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitTrim(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class SimpleCaseContext extends PrimaryExpressionContext {
		public ExpressionContext value;
		public ExpressionContext elseExpression;
		public TerminalNode CASE() { return getToken(SqlBaseParser.CASE, 0); }
		public TerminalNode END() { return getToken(SqlBaseParser.END, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public List<WhenClauseContext> whenClause() {
			return getRuleContexts(WhenClauseContext.class);
		}
		public WhenClauseContext whenClause(int i) {
			return getRuleContext(WhenClauseContext.class,i);
		}
		public TerminalNode ELSE() { return getToken(SqlBaseParser.ELSE, 0); }
		public SimpleCaseContext(PrimaryExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterSimpleCase(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitSimpleCase(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitSimpleCase(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class CurrentLikeContext extends PrimaryExpressionContext {
		public Token name;
		public TerminalNode CURRENT_DATE() { return getToken(SqlBaseParser.CURRENT_DATE, 0); }
		public TerminalNode CURRENT_TIMESTAMP() { return getToken(SqlBaseParser.CURRENT_TIMESTAMP, 0); }
		public TerminalNode CURRENT_USER() { return getToken(SqlBaseParser.CURRENT_USER, 0); }
		public TerminalNode USER() { return getToken(SqlBaseParser.USER, 0); }
		public CurrentLikeContext(PrimaryExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterCurrentLike(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitCurrentLike(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitCurrentLike(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class ColumnReferenceContext extends PrimaryExpressionContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public ColumnReferenceContext(PrimaryExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterColumnReference(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitColumnReference(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitColumnReference(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class RowConstructorContext extends PrimaryExpressionContext {
		public TerminalNode LEFT_PAREN() { return getToken(SqlBaseParser.LEFT_PAREN, 0); }
		public List<NamedExpressionContext> namedExpression() {
			return getRuleContexts(NamedExpressionContext.class);
		}
		public NamedExpressionContext namedExpression(int i) {
			return getRuleContext(NamedExpressionContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(SqlBaseParser.RIGHT_PAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(SqlBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SqlBaseParser.COMMA, i);
		}
		public RowConstructorContext(PrimaryExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterRowConstructor(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitRowConstructor(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitRowConstructor(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class LastContext extends PrimaryExpressionContext {
		public TerminalNode LAST() { return getToken(SqlBaseParser.LAST, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(SqlBaseParser.LEFT_PAREN, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(SqlBaseParser.RIGHT_PAREN, 0); }
		public TerminalNode IGNORE() { return getToken(SqlBaseParser.IGNORE, 0); }
		public TerminalNode NULLS() { return getToken(SqlBaseParser.NULLS, 0); }
		public LastContext(PrimaryExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterLast(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitLast(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitLast(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class PirCaseContext extends PrimaryExpressionContext {
		public TerminalNode OCCULTATION() { return getToken(SqlBaseParser.OCCULTATION, 0); }
		public PirCaseContext(PrimaryExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterPirCase(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitPirCase(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitPirCase(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class StarContext extends PrimaryExpressionContext {
		public TerminalNode ASTERISK() { return getToken(SqlBaseParser.ASTERISK, 0); }
		public QualifiedNameContext qualifiedName() {
			return getRuleContext(QualifiedNameContext.class,0);
		}
		public TerminalNode DOT() { return getToken(SqlBaseParser.DOT, 0); }
		public StarContext(PrimaryExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterStar(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitStar(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitStar(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class OverlayContext extends PrimaryExpressionContext {
		public ValueExpressionContext input;
		public ValueExpressionContext replace;
		public ValueExpressionContext position;
		public ValueExpressionContext length;
		public TerminalNode OVERLAY() { return getToken(SqlBaseParser.OVERLAY, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(SqlBaseParser.LEFT_PAREN, 0); }
		public TerminalNode PLACING() { return getToken(SqlBaseParser.PLACING, 0); }
		public TerminalNode FROM() { return getToken(SqlBaseParser.FROM, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(SqlBaseParser.RIGHT_PAREN, 0); }
		public List<ValueExpressionContext> valueExpression() {
			return getRuleContexts(ValueExpressionContext.class);
		}
		public ValueExpressionContext valueExpression(int i) {
			return getRuleContext(ValueExpressionContext.class,i);
		}
		public TerminalNode FOR() { return getToken(SqlBaseParser.FOR, 0); }
		public OverlayContext(PrimaryExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterOverlay(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitOverlay(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitOverlay(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class SubscriptContext extends PrimaryExpressionContext {
		public PrimaryExpressionContext value;
		public ValueExpressionContext index;
		public TerminalNode LEFT_BRACKET() { return getToken(SqlBaseParser.LEFT_BRACKET, 0); }
		public TerminalNode RIGHT_BRACKET() { return getToken(SqlBaseParser.RIGHT_BRACKET, 0); }
		public PrimaryExpressionContext primaryExpression() {
			return getRuleContext(PrimaryExpressionContext.class,0);
		}
		public ValueExpressionContext valueExpression() {
			return getRuleContext(ValueExpressionContext.class,0);
		}
		public SubscriptContext(PrimaryExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterSubscript(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitSubscript(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitSubscript(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class TimestampdiffContext extends PrimaryExpressionContext {
		public Token name;
		public DatetimeUnitContext unit;
		public ValueExpressionContext startTimestamp;
		public ValueExpressionContext endTimestamp;
		public TerminalNode LEFT_PAREN() { return getToken(SqlBaseParser.LEFT_PAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(SqlBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SqlBaseParser.COMMA, i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(SqlBaseParser.RIGHT_PAREN, 0); }
		public DatetimeUnitContext datetimeUnit() {
			return getRuleContext(DatetimeUnitContext.class,0);
		}
		public List<ValueExpressionContext> valueExpression() {
			return getRuleContexts(ValueExpressionContext.class);
		}
		public ValueExpressionContext valueExpression(int i) {
			return getRuleContext(ValueExpressionContext.class,i);
		}
		public TerminalNode TIMESTAMPDIFF() { return getToken(SqlBaseParser.TIMESTAMPDIFF, 0); }
		public TerminalNode DATEDIFF() { return getToken(SqlBaseParser.DATEDIFF, 0); }
		public TimestampdiffContext(PrimaryExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterTimestampdiff(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitTimestampdiff(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitTimestampdiff(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class SubqueryExpressionContext extends PrimaryExpressionContext {
		public TerminalNode LEFT_PAREN() { return getToken(SqlBaseParser.LEFT_PAREN, 0); }
		public QueryContext query() {
			return getRuleContext(QueryContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(SqlBaseParser.RIGHT_PAREN, 0); }
		public SubqueryExpressionContext(PrimaryExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterSubqueryExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitSubqueryExpression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitSubqueryExpression(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class ConstantDefaultContext extends PrimaryExpressionContext {
		public ConstantContext constant() {
			return getRuleContext(ConstantContext.class,0);
		}
		public ConstantDefaultContext(PrimaryExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterConstantDefault(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitConstantDefault(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitConstantDefault(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class ExtractContext extends PrimaryExpressionContext {
		public IdentifierContext field;
		public ValueExpressionContext source;
		public TerminalNode EXTRACT() { return getToken(SqlBaseParser.EXTRACT, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(SqlBaseParser.LEFT_PAREN, 0); }
		public TerminalNode FROM() { return getToken(SqlBaseParser.FROM, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(SqlBaseParser.RIGHT_PAREN, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public ValueExpressionContext valueExpression() {
			return getRuleContext(ValueExpressionContext.class,0);
		}
		public ExtractContext(PrimaryExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterExtract(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitExtract(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitExtract(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class PercentileContext extends PrimaryExpressionContext {
		public Token name;
		public ValueExpressionContext percentage;
		public BooleanExpressionContext where;
		public List<TerminalNode> LEFT_PAREN() { return getTokens(SqlBaseParser.LEFT_PAREN); }
		public TerminalNode LEFT_PAREN(int i) {
			return getToken(SqlBaseParser.LEFT_PAREN, i);
		}
		public List<TerminalNode> RIGHT_PAREN() { return getTokens(SqlBaseParser.RIGHT_PAREN); }
		public TerminalNode RIGHT_PAREN(int i) {
			return getToken(SqlBaseParser.RIGHT_PAREN, i);
		}
		public TerminalNode WITHIN() { return getToken(SqlBaseParser.WITHIN, 0); }
		public TerminalNode GROUP() { return getToken(SqlBaseParser.GROUP, 0); }
		public TerminalNode ORDER() { return getToken(SqlBaseParser.ORDER, 0); }
		public TerminalNode BY() { return getToken(SqlBaseParser.BY, 0); }
		public SortItemContext sortItem() {
			return getRuleContext(SortItemContext.class,0);
		}
		public ValueExpressionContext valueExpression() {
			return getRuleContext(ValueExpressionContext.class,0);
		}
		public TerminalNode PERCENTILE_CONT() { return getToken(SqlBaseParser.PERCENTILE_CONT, 0); }
		public TerminalNode PERCENTILE_DISC() { return getToken(SqlBaseParser.PERCENTILE_DISC, 0); }
		public TerminalNode FILTER() { return getToken(SqlBaseParser.FILTER, 0); }
		public TerminalNode WHERE() { return getToken(SqlBaseParser.WHERE, 0); }
		public TerminalNode OVER() { return getToken(SqlBaseParser.OVER, 0); }
		public WindowSpecContext windowSpec() {
			return getRuleContext(WindowSpecContext.class,0);
		}
		public BooleanExpressionContext booleanExpression() {
			return getRuleContext(BooleanExpressionContext.class,0);
		}
		public PercentileContext(PrimaryExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterPercentile(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitPercentile(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitPercentile(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class FunctionCallContext extends PrimaryExpressionContext {
		public ExpressionContext expression;
		public List<ExpressionContext> argument = new ArrayList<ExpressionContext>();
		public BooleanExpressionContext where;
		public Token nullsOption;
		public FunctionNameContext functionName() {
			return getRuleContext(FunctionNameContext.class,0);
		}
		public List<TerminalNode> LEFT_PAREN() { return getTokens(SqlBaseParser.LEFT_PAREN); }
		public TerminalNode LEFT_PAREN(int i) {
			return getToken(SqlBaseParser.LEFT_PAREN, i);
		}
		public List<TerminalNode> RIGHT_PAREN() { return getTokens(SqlBaseParser.RIGHT_PAREN); }
		public TerminalNode RIGHT_PAREN(int i) {
			return getToken(SqlBaseParser.RIGHT_PAREN, i);
		}
		public TerminalNode FILTER() { return getToken(SqlBaseParser.FILTER, 0); }
		public TerminalNode WHERE() { return getToken(SqlBaseParser.WHERE, 0); }
		public TerminalNode NULLS() { return getToken(SqlBaseParser.NULLS, 0); }
		public TerminalNode OVER() { return getToken(SqlBaseParser.OVER, 0); }
		public WindowSpecContext windowSpec() {
			return getRuleContext(WindowSpecContext.class,0);
		}
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public BooleanExpressionContext booleanExpression() {
			return getRuleContext(BooleanExpressionContext.class,0);
		}
		public TerminalNode IGNORE() { return getToken(SqlBaseParser.IGNORE, 0); }
		public TerminalNode RESPECT() { return getToken(SqlBaseParser.RESPECT, 0); }
		public SetQuantifierContext setQuantifier() {
			return getRuleContext(SetQuantifierContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(SqlBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SqlBaseParser.COMMA, i);
		}
		public FunctionCallContext(PrimaryExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterFunctionCall(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitFunctionCall(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitFunctionCall(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class SearchedCaseContext extends PrimaryExpressionContext {
		public ExpressionContext elseExpression;
		public TerminalNode CASE() { return getToken(SqlBaseParser.CASE, 0); }
		public TerminalNode END() { return getToken(SqlBaseParser.END, 0); }
		public List<WhenClauseContext> whenClause() {
			return getRuleContexts(WhenClauseContext.class);
		}
		public WhenClauseContext whenClause(int i) {
			return getRuleContext(WhenClauseContext.class,i);
		}
		public TerminalNode ELSE() { return getToken(SqlBaseParser.ELSE, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public SearchedCaseContext(PrimaryExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterSearchedCase(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitSearchedCase(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitSearchedCase(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class PositionContext extends PrimaryExpressionContext {
		public ValueExpressionContext substr;
		public ValueExpressionContext str;
		public TerminalNode POSITION() { return getToken(SqlBaseParser.POSITION, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(SqlBaseParser.LEFT_PAREN, 0); }
		public TerminalNode IN() { return getToken(SqlBaseParser.IN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(SqlBaseParser.RIGHT_PAREN, 0); }
		public List<ValueExpressionContext> valueExpression() {
			return getRuleContexts(ValueExpressionContext.class);
		}
		public ValueExpressionContext valueExpression(int i) {
			return getRuleContext(ValueExpressionContext.class,i);
		}
		public PositionContext(PrimaryExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterPosition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitPosition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitPosition(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class FirstContext extends PrimaryExpressionContext {
		public TerminalNode FIRST() { return getToken(SqlBaseParser.FIRST, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(SqlBaseParser.LEFT_PAREN, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(SqlBaseParser.RIGHT_PAREN, 0); }
		public TerminalNode IGNORE() { return getToken(SqlBaseParser.IGNORE, 0); }
		public TerminalNode NULLS() { return getToken(SqlBaseParser.NULLS, 0); }
		public FirstContext(PrimaryExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterFirst(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitFirst(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitFirst(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PrimaryExpressionContext primaryExpression() throws RecognitionException {
		return primaryExpression(0);
	}

	private PrimaryExpressionContext primaryExpression(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		PrimaryExpressionContext _localctx = new PrimaryExpressionContext(_ctx, _parentState);
		PrimaryExpressionContext _prevctx = _localctx;
		int _startState = 260;
		enterRecursionRule(_localctx, 260, RULE_primaryExpression, _p);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3184);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,402,_ctx) ) {
			case 1:
				{
				_localctx = new CurrentLikeContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;

				setState(2942);
				((CurrentLikeContext)_localctx).name = _input.LT(1);
				_la = _input.LA(1);
				if ( !(((((_la - 63)) & ~0x3f) == 0 && ((1L << (_la - 63)) & 13L) != 0) || _la==USER) ) {
					((CurrentLikeContext)_localctx).name = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 2:
				{
				_localctx = new TimestampaddContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(2943);
				((TimestampaddContext)_localctx).name = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==DATEADD || _la==TIMESTAMPADD) ) {
					((TimestampaddContext)_localctx).name = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2944);
				match(LEFT_PAREN);
				setState(2945);
				((TimestampaddContext)_localctx).unit = datetimeUnit();
				setState(2946);
				match(COMMA);
				setState(2947);
				((TimestampaddContext)_localctx).unitsAmount = valueExpression(0);
				setState(2948);
				match(COMMA);
				setState(2949);
				((TimestampaddContext)_localctx).timestamp = valueExpression(0);
				setState(2950);
				match(RIGHT_PAREN);
				}
				break;
			case 3:
				{
				_localctx = new TimestampdiffContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(2952);
				((TimestampdiffContext)_localctx).name = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==DATEDIFF || _la==TIMESTAMPDIFF) ) {
					((TimestampdiffContext)_localctx).name = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2953);
				match(LEFT_PAREN);
				setState(2954);
				((TimestampdiffContext)_localctx).unit = datetimeUnit();
				setState(2955);
				match(COMMA);
				setState(2956);
				((TimestampdiffContext)_localctx).startTimestamp = valueExpression(0);
				setState(2957);
				match(COMMA);
				setState(2958);
				((TimestampdiffContext)_localctx).endTimestamp = valueExpression(0);
				setState(2959);
				match(RIGHT_PAREN);
				}
				break;
			case 4:
				{
				_localctx = new SearchedCaseContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(2961);
				match(CASE);
				setState(2963); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(2962);
					whenClause();
					}
					}
					setState(2965); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==WHEN );
				setState(2969);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ELSE) {
					{
					setState(2967);
					match(ELSE);
					setState(2968);
					((SearchedCaseContext)_localctx).elseExpression = expression();
					}
				}

				setState(2971);
				match(END);
				}
				break;
			case 5:
				{
				_localctx = new SimpleCaseContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(2973);
				match(CASE);
				setState(2974);
				((SimpleCaseContext)_localctx).value = expression();
				setState(2976); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(2975);
					whenClause();
					}
					}
					setState(2978); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==WHEN );
				setState(2982);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ELSE) {
					{
					setState(2980);
					match(ELSE);
					setState(2981);
					((SimpleCaseContext)_localctx).elseExpression = expression();
					}
				}

				setState(2984);
				match(END);
				}
				break;
			case 6:
				{
				_localctx = new CastContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(2986);
				((CastContext)_localctx).name = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==CAST || _la==TRY_CAST) ) {
					((CastContext)_localctx).name = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2987);
				match(LEFT_PAREN);
				setState(2988);
				expression();
				setState(2989);
				match(AS);
				setState(2990);
				dataType();
				setState(2991);
				match(RIGHT_PAREN);
				}
				break;
			case 7:
				{
				_localctx = new StructContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(2993);
				match(STRUCT);
				setState(2994);
				match(LEFT_PAREN);
				setState(3003);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,384,_ctx) ) {
				case 1:
					{
					setState(2995);
					((StructContext)_localctx).namedExpression = namedExpression();
					((StructContext)_localctx).argument.add(((StructContext)_localctx).namedExpression);
					setState(3000);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(2996);
						match(COMMA);
						setState(2997);
						((StructContext)_localctx).namedExpression = namedExpression();
						((StructContext)_localctx).argument.add(((StructContext)_localctx).namedExpression);
						}
						}
						setState(3002);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
					break;
				}
				setState(3005);
				match(RIGHT_PAREN);
				}
				break;
			case 8:
				{
				_localctx = new FirstContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(3006);
				match(FIRST);
				setState(3007);
				match(LEFT_PAREN);
				setState(3008);
				expression();
				setState(3011);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IGNORE) {
					{
					setState(3009);
					match(IGNORE);
					setState(3010);
					match(NULLS);
					}
				}

				setState(3013);
				match(RIGHT_PAREN);
				}
				break;
			case 9:
				{
				_localctx = new Any_valueContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(3015);
				match(ANY_VALUE);
				setState(3016);
				match(LEFT_PAREN);
				setState(3017);
				expression();
				setState(3020);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IGNORE) {
					{
					setState(3018);
					match(IGNORE);
					setState(3019);
					match(NULLS);
					}
				}

				setState(3022);
				match(RIGHT_PAREN);
				}
				break;
			case 10:
				{
				_localctx = new LastContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(3024);
				match(LAST);
				setState(3025);
				match(LEFT_PAREN);
				setState(3026);
				expression();
				setState(3029);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IGNORE) {
					{
					setState(3027);
					match(IGNORE);
					setState(3028);
					match(NULLS);
					}
				}

				setState(3031);
				match(RIGHT_PAREN);
				}
				break;
			case 11:
				{
				_localctx = new PositionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(3033);
				match(POSITION);
				setState(3034);
				match(LEFT_PAREN);
				setState(3035);
				((PositionContext)_localctx).substr = valueExpression(0);
				setState(3036);
				match(IN);
				setState(3037);
				((PositionContext)_localctx).str = valueExpression(0);
				setState(3038);
				match(RIGHT_PAREN);
				}
				break;
			case 12:
				{
				_localctx = new ConstantDefaultContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(3040);
				constant();
				}
				break;
			case 13:
				{
				_localctx = new PirCaseContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(3041);
				match(OCCULTATION);
				}
				break;
			case 14:
				{
				_localctx = new StarContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(3042);
				match(ASTERISK);
				}
				break;
			case 15:
				{
				_localctx = new StarContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(3043);
				qualifiedName();
				setState(3044);
				match(DOT);
				setState(3045);
				match(ASTERISK);
				}
				break;
			case 16:
				{
				_localctx = new RowConstructorContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(3047);
				match(LEFT_PAREN);
				setState(3048);
				namedExpression();
				setState(3051); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(3049);
					match(COMMA);
					setState(3050);
					namedExpression();
					}
					}
					setState(3053); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==COMMA );
				setState(3055);
				match(RIGHT_PAREN);
				}
				break;
			case 17:
				{
				_localctx = new SubqueryExpressionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(3057);
				match(LEFT_PAREN);
				setState(3058);
				query();
				setState(3059);
				match(RIGHT_PAREN);
				}
				break;
			case 18:
				{
				_localctx = new FunctionCallContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(3061);
				functionName();
				setState(3062);
				match(LEFT_PAREN);
				setState(3074);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,391,_ctx) ) {
				case 1:
					{
					setState(3064);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,389,_ctx) ) {
					case 1:
						{
						setState(3063);
						setQuantifier();
						}
						break;
					}
					setState(3066);
					((FunctionCallContext)_localctx).expression = expression();
					((FunctionCallContext)_localctx).argument.add(((FunctionCallContext)_localctx).expression);
					setState(3071);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(3067);
						match(COMMA);
						setState(3068);
						((FunctionCallContext)_localctx).expression = expression();
						((FunctionCallContext)_localctx).argument.add(((FunctionCallContext)_localctx).expression);
						}
						}
						setState(3073);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
					break;
				}
				setState(3076);
				match(RIGHT_PAREN);
				setState(3083);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,392,_ctx) ) {
				case 1:
					{
					setState(3077);
					match(FILTER);
					setState(3078);
					match(LEFT_PAREN);
					setState(3079);
					match(WHERE);
					setState(3080);
					((FunctionCallContext)_localctx).where = booleanExpression(0);
					setState(3081);
					match(RIGHT_PAREN);
					}
					break;
				}
				setState(3087);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,393,_ctx) ) {
				case 1:
					{
					setState(3085);
					((FunctionCallContext)_localctx).nullsOption = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==IGNORE || _la==RESPECT) ) {
						((FunctionCallContext)_localctx).nullsOption = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(3086);
					match(NULLS);
					}
					break;
				}
				setState(3091);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,394,_ctx) ) {
				case 1:
					{
					setState(3089);
					match(OVER);
					setState(3090);
					windowSpec();
					}
					break;
				}
				}
				break;
			case 19:
				{
				_localctx = new LambdaContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(3093);
				identifier();
				setState(3094);
				match(ARROW);
				setState(3095);
				expression();
				}
				break;
			case 20:
				{
				_localctx = new LambdaContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(3097);
				match(LEFT_PAREN);
				setState(3098);
				identifier();
				setState(3101); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(3099);
					match(COMMA);
					setState(3100);
					identifier();
					}
					}
					setState(3103); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==COMMA );
				setState(3105);
				match(RIGHT_PAREN);
				setState(3106);
				match(ARROW);
				setState(3107);
				expression();
				}
				break;
			case 21:
				{
				_localctx = new ColumnReferenceContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(3109);
				identifier();
				}
				break;
			case 22:
				{
				_localctx = new FeatureReferenceContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(3110);
				match(LEFT_BRACKET);
				setState(3111);
				featureExpression();
				setState(3112);
				match(RIGHT_BRACKET);
				}
				break;
			case 23:
				{
				_localctx = new ParenthesizedExpressionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(3114);
				match(LEFT_PAREN);
				setState(3115);
				expression();
				setState(3116);
				match(RIGHT_PAREN);
				}
				break;
			case 24:
				{
				_localctx = new ExtractContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(3118);
				match(EXTRACT);
				setState(3119);
				match(LEFT_PAREN);
				setState(3120);
				((ExtractContext)_localctx).field = identifier();
				setState(3121);
				match(FROM);
				setState(3122);
				((ExtractContext)_localctx).source = valueExpression(0);
				setState(3123);
				match(RIGHT_PAREN);
				}
				break;
			case 25:
				{
				_localctx = new SubstringContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(3125);
				_la = _input.LA(1);
				if ( !(_la==SUBSTR || _la==SUBSTRING) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3126);
				match(LEFT_PAREN);
				setState(3127);
				((SubstringContext)_localctx).str = valueExpression(0);
				setState(3128);
				_la = _input.LA(1);
				if ( !(_la==COMMA || _la==FROM) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3129);
				((SubstringContext)_localctx).pos = valueExpression(0);
				setState(3132);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA || _la==FOR) {
					{
					setState(3130);
					_la = _input.LA(1);
					if ( !(_la==COMMA || _la==FOR) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(3131);
					((SubstringContext)_localctx).len = valueExpression(0);
					}
				}

				setState(3134);
				match(RIGHT_PAREN);
				}
				break;
			case 26:
				{
				_localctx = new TrimContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(3136);
				match(TRIM);
				setState(3137);
				match(LEFT_PAREN);
				setState(3139);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,397,_ctx) ) {
				case 1:
					{
					setState(3138);
					((TrimContext)_localctx).trimOption = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==BOTH || _la==LEADING || _la==TRAILING) ) {
						((TrimContext)_localctx).trimOption = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				}
				setState(3142);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,398,_ctx) ) {
				case 1:
					{
					setState(3141);
					((TrimContext)_localctx).trimStr = valueExpression(0);
					}
					break;
				}
				setState(3144);
				match(FROM);
				setState(3145);
				((TrimContext)_localctx).srcStr = valueExpression(0);
				setState(3146);
				match(RIGHT_PAREN);
				}
				break;
			case 27:
				{
				_localctx = new OverlayContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(3148);
				match(OVERLAY);
				setState(3149);
				match(LEFT_PAREN);
				setState(3150);
				((OverlayContext)_localctx).input = valueExpression(0);
				setState(3151);
				match(PLACING);
				setState(3152);
				((OverlayContext)_localctx).replace = valueExpression(0);
				setState(3153);
				match(FROM);
				setState(3154);
				((OverlayContext)_localctx).position = valueExpression(0);
				setState(3157);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOR) {
					{
					setState(3155);
					match(FOR);
					setState(3156);
					((OverlayContext)_localctx).length = valueExpression(0);
					}
				}

				setState(3159);
				match(RIGHT_PAREN);
				}
				break;
			case 28:
				{
				_localctx = new PercentileContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(3161);
				((PercentileContext)_localctx).name = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==PERCENTILE_CONT || _la==PERCENTILE_DISC) ) {
					((PercentileContext)_localctx).name = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3162);
				match(LEFT_PAREN);
				setState(3163);
				((PercentileContext)_localctx).percentage = valueExpression(0);
				setState(3164);
				match(RIGHT_PAREN);
				setState(3165);
				match(WITHIN);
				setState(3166);
				match(GROUP);
				setState(3167);
				match(LEFT_PAREN);
				setState(3168);
				match(ORDER);
				setState(3169);
				match(BY);
				setState(3170);
				sortItem();
				setState(3171);
				match(RIGHT_PAREN);
				setState(3178);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,400,_ctx) ) {
				case 1:
					{
					setState(3172);
					match(FILTER);
					setState(3173);
					match(LEFT_PAREN);
					setState(3174);
					match(WHERE);
					setState(3175);
					((PercentileContext)_localctx).where = booleanExpression(0);
					setState(3176);
					match(RIGHT_PAREN);
					}
					break;
				}
				setState(3182);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,401,_ctx) ) {
				case 1:
					{
					setState(3180);
					match(OVER);
					setState(3181);
					windowSpec();
					}
					break;
				}
				}
				break;
			}
			_ctx.stop = _input.LT(-1);
			setState(3196);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,404,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					setState(3194);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,403,_ctx) ) {
					case 1:
						{
						_localctx = new SubscriptContext(new PrimaryExpressionContext(_parentctx, _parentState));
						((SubscriptContext)_localctx).value = _prevctx;
						pushNewRecursionContext(_localctx, _startState, RULE_primaryExpression);
						setState(3186);
						if (!(precpred(_ctx, 10))) throw new FailedPredicateException(this, "precpred(_ctx, 10)");
						setState(3187);
						match(LEFT_BRACKET);
						setState(3188);
						((SubscriptContext)_localctx).index = valueExpression(0);
						setState(3189);
						match(RIGHT_BRACKET);
						}
						break;
					case 2:
						{
						_localctx = new DereferenceContext(new PrimaryExpressionContext(_parentctx, _parentState));
						((DereferenceContext)_localctx).base = _prevctx;
						pushNewRecursionContext(_localctx, _startState, RULE_primaryExpression);
						setState(3191);
						if (!(precpred(_ctx, 7))) throw new FailedPredicateException(this, "precpred(_ctx, 7)");
						setState(3192);
						match(DOT);
						setState(3193);
						((DereferenceContext)_localctx).fieldName = identifier();
						}
						break;
					}
					} 
				}
				setState(3198);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,404,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class FeatureExpressionContext extends ParserRuleContext {
		public List<PrimaryExpressionContext> primaryExpression() {
			return getRuleContexts(PrimaryExpressionContext.class);
		}
		public PrimaryExpressionContext primaryExpression(int i) {
			return getRuleContext(PrimaryExpressionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SqlBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SqlBaseParser.COMMA, i);
		}
		public FeatureExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_featureExpression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterFeatureExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitFeatureExpression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitFeatureExpression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FeatureExpressionContext featureExpression() throws RecognitionException {
		FeatureExpressionContext _localctx = new FeatureExpressionContext(_ctx, getState());
		enterRule(_localctx, 262, RULE_featureExpression);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3199);
			primaryExpression(0);
			setState(3204);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3200);
				match(COMMA);
				setState(3201);
				primaryExpression(0);
				}
				}
				setState(3206);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ConstantContext extends ParserRuleContext {
		public ConstantContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constant; }
	 
		public ConstantContext() { }
		public void copyFrom(ConstantContext ctx) {
			super.copyFrom(ctx);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class NullLiteralContext extends ConstantContext {
		public TerminalNode NULL() { return getToken(SqlBaseParser.NULL, 0); }
		public NullLiteralContext(ConstantContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterNullLiteral(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitNullLiteral(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitNullLiteral(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class StringLiteralContext extends ConstantContext {
		public List<StringLitContext> stringLit() {
			return getRuleContexts(StringLitContext.class);
		}
		public StringLitContext stringLit(int i) {
			return getRuleContext(StringLitContext.class,i);
		}
		public StringLiteralContext(ConstantContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterStringLiteral(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitStringLiteral(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitStringLiteral(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class TypeConstructorContext extends ConstantContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public StringLitContext stringLit() {
			return getRuleContext(StringLitContext.class,0);
		}
		public TypeConstructorContext(ConstantContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterTypeConstructor(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitTypeConstructor(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitTypeConstructor(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class FLContext extends ConstantContext {
		public TerminalNode FL() { return getToken(SqlBaseParser.FL, 0); }
		public FLContext(ConstantContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterFL(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitFL(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitFL(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class ParameterLiteralContext extends ConstantContext {
		public TerminalNode COLON() { return getToken(SqlBaseParser.COLON, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public ParameterLiteralContext(ConstantContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterParameterLiteral(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitParameterLiteral(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitParameterLiteral(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class IntervalLiteralContext extends ConstantContext {
		public IntervalContext interval() {
			return getRuleContext(IntervalContext.class,0);
		}
		public IntervalLiteralContext(ConstantContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterIntervalLiteral(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitIntervalLiteral(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitIntervalLiteral(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class NumericLiteralContext extends ConstantContext {
		public NumberContext number() {
			return getRuleContext(NumberContext.class,0);
		}
		public NumericLiteralContext(ConstantContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterNumericLiteral(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitNumericLiteral(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitNumericLiteral(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class BooleanLiteralContext extends ConstantContext {
		public BooleanValueContext booleanValue() {
			return getRuleContext(BooleanValueContext.class,0);
		}
		public BooleanLiteralContext(ConstantContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterBooleanLiteral(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitBooleanLiteral(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitBooleanLiteral(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ConstantContext constant() throws RecognitionException {
		ConstantContext _localctx = new ConstantContext(_ctx, getState());
		enterRule(_localctx, 264, RULE_constant);
		try {
			int _alt;
			setState(3222);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,407,_ctx) ) {
			case 1:
				_localctx = new NullLiteralContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(3207);
				match(NULL);
				}
				break;
			case 2:
				_localctx = new ParameterLiteralContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(3208);
				match(COLON);
				setState(3209);
				identifier();
				}
				break;
			case 3:
				_localctx = new IntervalLiteralContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(3210);
				interval();
				}
				break;
			case 4:
				_localctx = new TypeConstructorContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(3211);
				identifier();
				setState(3212);
				stringLit();
				}
				break;
			case 5:
				_localctx = new NumericLiteralContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(3214);
				number();
				}
				break;
			case 6:
				_localctx = new BooleanLiteralContext(_localctx);
				enterOuterAlt(_localctx, 6);
				{
				setState(3215);
				booleanValue();
				}
				break;
			case 7:
				_localctx = new StringLiteralContext(_localctx);
				enterOuterAlt(_localctx, 7);
				{
				setState(3217); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						setState(3216);
						stringLit();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(3219); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,406,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			case 8:
				_localctx = new FLContext(_localctx);
				enterOuterAlt(_localctx, 8);
				{
				setState(3221);
				match(FL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ComparisonOperatorContext extends ParserRuleContext {
		public TerminalNode EQ() { return getToken(SqlBaseParser.EQ, 0); }
		public TerminalNode NEQ() { return getToken(SqlBaseParser.NEQ, 0); }
		public TerminalNode NEQJ() { return getToken(SqlBaseParser.NEQJ, 0); }
		public TerminalNode LT() { return getToken(SqlBaseParser.LT, 0); }
		public TerminalNode LTE() { return getToken(SqlBaseParser.LTE, 0); }
		public TerminalNode GT() { return getToken(SqlBaseParser.GT, 0); }
		public TerminalNode GTE() { return getToken(SqlBaseParser.GTE, 0); }
		public TerminalNode NSEQ() { return getToken(SqlBaseParser.NSEQ, 0); }
		public ComparisonOperatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_comparisonOperator; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterComparisonOperator(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitComparisonOperator(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitComparisonOperator(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ComparisonOperatorContext comparisonOperator() throws RecognitionException {
		ComparisonOperatorContext _localctx = new ComparisonOperatorContext(_ctx, getState());
		enterRule(_localctx, 266, RULE_comparisonOperator);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3224);
			_la = _input.LA(1);
			if ( !(((((_la - 314)) & ~0x3f) == 0 && ((1L << (_la - 314)) & 255L) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ArithmeticOperatorContext extends ParserRuleContext {
		public TerminalNode PLUS() { return getToken(SqlBaseParser.PLUS, 0); }
		public TerminalNode MINUS() { return getToken(SqlBaseParser.MINUS, 0); }
		public TerminalNode ASTERISK() { return getToken(SqlBaseParser.ASTERISK, 0); }
		public TerminalNode SLASH() { return getToken(SqlBaseParser.SLASH, 0); }
		public TerminalNode PERCENT() { return getToken(SqlBaseParser.PERCENT, 0); }
		public TerminalNode DIV() { return getToken(SqlBaseParser.DIV, 0); }
		public TerminalNode TILDE() { return getToken(SqlBaseParser.TILDE, 0); }
		public TerminalNode AMPERSAND() { return getToken(SqlBaseParser.AMPERSAND, 0); }
		public TerminalNode PIPE() { return getToken(SqlBaseParser.PIPE, 0); }
		public TerminalNode CONCAT_PIPE() { return getToken(SqlBaseParser.CONCAT_PIPE, 0); }
		public TerminalNode HAT() { return getToken(SqlBaseParser.HAT, 0); }
		public ArithmeticOperatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_arithmeticOperator; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterArithmeticOperator(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitArithmeticOperator(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitArithmeticOperator(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ArithmeticOperatorContext arithmeticOperator() throws RecognitionException {
		ArithmeticOperatorContext _localctx = new ArithmeticOperatorContext(_ctx, getState());
		enterRule(_localctx, 268, RULE_arithmeticOperator);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3226);
			_la = _input.LA(1);
			if ( !(_la==DIV || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & 2039L) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class PredicateOperatorContext extends ParserRuleContext {
		public TerminalNode OR() { return getToken(SqlBaseParser.OR, 0); }
		public TerminalNode AND() { return getToken(SqlBaseParser.AND, 0); }
		public TerminalNode IN() { return getToken(SqlBaseParser.IN, 0); }
		public TerminalNode NOT() { return getToken(SqlBaseParser.NOT, 0); }
		public PredicateOperatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_predicateOperator; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterPredicateOperator(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitPredicateOperator(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitPredicateOperator(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PredicateOperatorContext predicateOperator() throws RecognitionException {
		PredicateOperatorContext _localctx = new PredicateOperatorContext(_ctx, getState());
		enterRule(_localctx, 270, RULE_predicateOperator);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3228);
			_la = _input.LA(1);
			if ( !(_la==AND || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & 577586652210266113L) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class BooleanValueContext extends ParserRuleContext {
		public TerminalNode TRUE() { return getToken(SqlBaseParser.TRUE, 0); }
		public TerminalNode FALSE() { return getToken(SqlBaseParser.FALSE, 0); }
		public BooleanValueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_booleanValue; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterBooleanValue(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitBooleanValue(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitBooleanValue(this);
			else return visitor.visitChildren(this);
		}
	}

	public final BooleanValueContext booleanValue() throws RecognitionException {
		BooleanValueContext _localctx = new BooleanValueContext(_ctx, getState());
		enterRule(_localctx, 272, RULE_booleanValue);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3230);
			_la = _input.LA(1);
			if ( !(_la==FALSE || _la==TRUE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class IntervalContext extends ParserRuleContext {
		public TerminalNode INTERVAL() { return getToken(SqlBaseParser.INTERVAL, 0); }
		public ErrorCapturingMultiUnitsIntervalContext errorCapturingMultiUnitsInterval() {
			return getRuleContext(ErrorCapturingMultiUnitsIntervalContext.class,0);
		}
		public ErrorCapturingUnitToUnitIntervalContext errorCapturingUnitToUnitInterval() {
			return getRuleContext(ErrorCapturingUnitToUnitIntervalContext.class,0);
		}
		public IntervalContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_interval; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterInterval(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitInterval(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitInterval(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IntervalContext interval() throws RecognitionException {
		IntervalContext _localctx = new IntervalContext(_ctx, getState());
		enterRule(_localctx, 274, RULE_interval);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3232);
			match(INTERVAL);
			setState(3235);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,408,_ctx) ) {
			case 1:
				{
				setState(3233);
				errorCapturingMultiUnitsInterval();
				}
				break;
			case 2:
				{
				setState(3234);
				errorCapturingUnitToUnitInterval();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ErrorCapturingMultiUnitsIntervalContext extends ParserRuleContext {
		public MultiUnitsIntervalContext body;
		public MultiUnitsIntervalContext multiUnitsInterval() {
			return getRuleContext(MultiUnitsIntervalContext.class,0);
		}
		public UnitToUnitIntervalContext unitToUnitInterval() {
			return getRuleContext(UnitToUnitIntervalContext.class,0);
		}
		public ErrorCapturingMultiUnitsIntervalContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_errorCapturingMultiUnitsInterval; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterErrorCapturingMultiUnitsInterval(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitErrorCapturingMultiUnitsInterval(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitErrorCapturingMultiUnitsInterval(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ErrorCapturingMultiUnitsIntervalContext errorCapturingMultiUnitsInterval() throws RecognitionException {
		ErrorCapturingMultiUnitsIntervalContext _localctx = new ErrorCapturingMultiUnitsIntervalContext(_ctx, getState());
		enterRule(_localctx, 276, RULE_errorCapturingMultiUnitsInterval);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3237);
			((ErrorCapturingMultiUnitsIntervalContext)_localctx).body = multiUnitsInterval();
			setState(3239);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,409,_ctx) ) {
			case 1:
				{
				setState(3238);
				unitToUnitInterval();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class MultiUnitsIntervalContext extends ParserRuleContext {
		public UnitInMultiUnitsContext unitInMultiUnits;
		public List<UnitInMultiUnitsContext> unit = new ArrayList<UnitInMultiUnitsContext>();
		public List<IntervalValueContext> intervalValue() {
			return getRuleContexts(IntervalValueContext.class);
		}
		public IntervalValueContext intervalValue(int i) {
			return getRuleContext(IntervalValueContext.class,i);
		}
		public List<UnitInMultiUnitsContext> unitInMultiUnits() {
			return getRuleContexts(UnitInMultiUnitsContext.class);
		}
		public UnitInMultiUnitsContext unitInMultiUnits(int i) {
			return getRuleContext(UnitInMultiUnitsContext.class,i);
		}
		public MultiUnitsIntervalContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_multiUnitsInterval; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterMultiUnitsInterval(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitMultiUnitsInterval(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitMultiUnitsInterval(this);
			else return visitor.visitChildren(this);
		}
	}

	public final MultiUnitsIntervalContext multiUnitsInterval() throws RecognitionException {
		MultiUnitsIntervalContext _localctx = new MultiUnitsIntervalContext(_ctx, getState());
		enterRule(_localctx, 278, RULE_multiUnitsInterval);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3244); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					setState(3241);
					intervalValue();
					setState(3242);
					((MultiUnitsIntervalContext)_localctx).unitInMultiUnits = unitInMultiUnits();
					((MultiUnitsIntervalContext)_localctx).unit.add(((MultiUnitsIntervalContext)_localctx).unitInMultiUnits);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(3246); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,410,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ErrorCapturingUnitToUnitIntervalContext extends ParserRuleContext {
		public UnitToUnitIntervalContext body;
		public MultiUnitsIntervalContext error1;
		public UnitToUnitIntervalContext error2;
		public List<UnitToUnitIntervalContext> unitToUnitInterval() {
			return getRuleContexts(UnitToUnitIntervalContext.class);
		}
		public UnitToUnitIntervalContext unitToUnitInterval(int i) {
			return getRuleContext(UnitToUnitIntervalContext.class,i);
		}
		public MultiUnitsIntervalContext multiUnitsInterval() {
			return getRuleContext(MultiUnitsIntervalContext.class,0);
		}
		public ErrorCapturingUnitToUnitIntervalContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_errorCapturingUnitToUnitInterval; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterErrorCapturingUnitToUnitInterval(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitErrorCapturingUnitToUnitInterval(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitErrorCapturingUnitToUnitInterval(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ErrorCapturingUnitToUnitIntervalContext errorCapturingUnitToUnitInterval() throws RecognitionException {
		ErrorCapturingUnitToUnitIntervalContext _localctx = new ErrorCapturingUnitToUnitIntervalContext(_ctx, getState());
		enterRule(_localctx, 280, RULE_errorCapturingUnitToUnitInterval);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3248);
			((ErrorCapturingUnitToUnitIntervalContext)_localctx).body = unitToUnitInterval();
			setState(3251);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,411,_ctx) ) {
			case 1:
				{
				setState(3249);
				((ErrorCapturingUnitToUnitIntervalContext)_localctx).error1 = multiUnitsInterval();
				}
				break;
			case 2:
				{
				setState(3250);
				((ErrorCapturingUnitToUnitIntervalContext)_localctx).error2 = unitToUnitInterval();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class UnitToUnitIntervalContext extends ParserRuleContext {
		public IntervalValueContext value;
		public UnitInUnitToUnitContext from;
		public UnitInUnitToUnitContext to;
		public TerminalNode TO() { return getToken(SqlBaseParser.TO, 0); }
		public IntervalValueContext intervalValue() {
			return getRuleContext(IntervalValueContext.class,0);
		}
		public List<UnitInUnitToUnitContext> unitInUnitToUnit() {
			return getRuleContexts(UnitInUnitToUnitContext.class);
		}
		public UnitInUnitToUnitContext unitInUnitToUnit(int i) {
			return getRuleContext(UnitInUnitToUnitContext.class,i);
		}
		public UnitToUnitIntervalContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unitToUnitInterval; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterUnitToUnitInterval(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitUnitToUnitInterval(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitUnitToUnitInterval(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UnitToUnitIntervalContext unitToUnitInterval() throws RecognitionException {
		UnitToUnitIntervalContext _localctx = new UnitToUnitIntervalContext(_ctx, getState());
		enterRule(_localctx, 282, RULE_unitToUnitInterval);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3253);
			((UnitToUnitIntervalContext)_localctx).value = intervalValue();
			setState(3254);
			((UnitToUnitIntervalContext)_localctx).from = unitInUnitToUnit();
			setState(3255);
			match(TO);
			setState(3256);
			((UnitToUnitIntervalContext)_localctx).to = unitInUnitToUnit();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class IntervalValueContext extends ParserRuleContext {
		public TerminalNode INTEGER_VALUE() { return getToken(SqlBaseParser.INTEGER_VALUE, 0); }
		public TerminalNode DECIMAL_VALUE() { return getToken(SqlBaseParser.DECIMAL_VALUE, 0); }
		public StringLitContext stringLit() {
			return getRuleContext(StringLitContext.class,0);
		}
		public TerminalNode PLUS() { return getToken(SqlBaseParser.PLUS, 0); }
		public TerminalNode MINUS() { return getToken(SqlBaseParser.MINUS, 0); }
		public IntervalValueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_intervalValue; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterIntervalValue(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitIntervalValue(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitIntervalValue(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IntervalValueContext intervalValue() throws RecognitionException {
		IntervalValueContext _localctx = new IntervalValueContext(_ctx, getState());
		enterRule(_localctx, 284, RULE_intervalValue);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3259);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,412,_ctx) ) {
			case 1:
				{
				setState(3258);
				_la = _input.LA(1);
				if ( !(_la==PLUS || _la==MINUS) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
			setState(3264);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,413,_ctx) ) {
			case 1:
				{
				setState(3261);
				match(INTEGER_VALUE);
				}
				break;
			case 2:
				{
				setState(3262);
				match(DECIMAL_VALUE);
				}
				break;
			case 3:
				{
				setState(3263);
				stringLit();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class UnitInMultiUnitsContext extends ParserRuleContext {
		public TerminalNode NANOSECOND() { return getToken(SqlBaseParser.NANOSECOND, 0); }
		public TerminalNode NANOSECONDS() { return getToken(SqlBaseParser.NANOSECONDS, 0); }
		public TerminalNode MICROSECOND() { return getToken(SqlBaseParser.MICROSECOND, 0); }
		public TerminalNode MICROSECONDS() { return getToken(SqlBaseParser.MICROSECONDS, 0); }
		public TerminalNode MILLISECOND() { return getToken(SqlBaseParser.MILLISECOND, 0); }
		public TerminalNode MILLISECONDS() { return getToken(SqlBaseParser.MILLISECONDS, 0); }
		public TerminalNode SECOND() { return getToken(SqlBaseParser.SECOND, 0); }
		public TerminalNode SECONDS() { return getToken(SqlBaseParser.SECONDS, 0); }
		public TerminalNode MINUTE() { return getToken(SqlBaseParser.MINUTE, 0); }
		public TerminalNode MINUTES() { return getToken(SqlBaseParser.MINUTES, 0); }
		public TerminalNode HOUR() { return getToken(SqlBaseParser.HOUR, 0); }
		public TerminalNode HOURS() { return getToken(SqlBaseParser.HOURS, 0); }
		public TerminalNode DAY() { return getToken(SqlBaseParser.DAY, 0); }
		public TerminalNode DAYS() { return getToken(SqlBaseParser.DAYS, 0); }
		public TerminalNode WEEK() { return getToken(SqlBaseParser.WEEK, 0); }
		public TerminalNode WEEKS() { return getToken(SqlBaseParser.WEEKS, 0); }
		public TerminalNode MONTH() { return getToken(SqlBaseParser.MONTH, 0); }
		public TerminalNode MONTHS() { return getToken(SqlBaseParser.MONTHS, 0); }
		public TerminalNode YEAR() { return getToken(SqlBaseParser.YEAR, 0); }
		public TerminalNode YEARS() { return getToken(SqlBaseParser.YEARS, 0); }
		public UnitInMultiUnitsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unitInMultiUnits; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterUnitInMultiUnits(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitUnitInMultiUnits(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitUnitInMultiUnits(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UnitInMultiUnitsContext unitInMultiUnits() throws RecognitionException {
		UnitInMultiUnitsContext _localctx = new UnitInMultiUnitsContext(_ctx, getState());
		enterRule(_localctx, 286, RULE_unitInMultiUnits);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3266);
			_la = _input.LA(1);
			if ( !(((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & 216172782113783811L) != 0) || ((((_la - 163)) & ~0x3f) == 0 && ((1L << (_la - 163)) & 6399L) != 0) || _la==SECOND || _la==SECONDS || ((((_la - 304)) & ~0x3f) == 0 && ((1L << (_la - 304)) & 387L) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class UnitInUnitToUnitContext extends ParserRuleContext {
		public TerminalNode SECOND() { return getToken(SqlBaseParser.SECOND, 0); }
		public TerminalNode MINUTE() { return getToken(SqlBaseParser.MINUTE, 0); }
		public TerminalNode HOUR() { return getToken(SqlBaseParser.HOUR, 0); }
		public TerminalNode DAY() { return getToken(SqlBaseParser.DAY, 0); }
		public TerminalNode MONTH() { return getToken(SqlBaseParser.MONTH, 0); }
		public TerminalNode YEAR() { return getToken(SqlBaseParser.YEAR, 0); }
		public UnitInUnitToUnitContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unitInUnitToUnit; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterUnitInUnitToUnit(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitUnitInUnitToUnit(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitUnitInUnitToUnit(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UnitInUnitToUnitContext unitInUnitToUnit() throws RecognitionException {
		UnitInUnitToUnitContext _localctx = new UnitInUnitToUnitContext(_ctx, getState());
		enterRule(_localctx, 288, RULE_unitInUnitToUnit);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3268);
			_la = _input.LA(1);
			if ( !(_la==DAY || _la==HOUR || _la==MINUTE || _la==MONTH || _la==SECOND || _la==YEAR) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ColPositionContext extends ParserRuleContext {
		public Token position;
		public ErrorCapturingIdentifierContext afterCol;
		public TerminalNode FIRST() { return getToken(SqlBaseParser.FIRST, 0); }
		public TerminalNode AFTER() { return getToken(SqlBaseParser.AFTER, 0); }
		public ErrorCapturingIdentifierContext errorCapturingIdentifier() {
			return getRuleContext(ErrorCapturingIdentifierContext.class,0);
		}
		public ColPositionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_colPosition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterColPosition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitColPosition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitColPosition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColPositionContext colPosition() throws RecognitionException {
		ColPositionContext _localctx = new ColPositionContext(_ctx, getState());
		enterRule(_localctx, 290, RULE_colPosition);
		try {
			setState(3273);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FIRST:
				enterOuterAlt(_localctx, 1);
				{
				setState(3270);
				((ColPositionContext)_localctx).position = match(FIRST);
				}
				break;
			case AFTER:
				enterOuterAlt(_localctx, 2);
				{
				setState(3271);
				((ColPositionContext)_localctx).position = match(AFTER);
				setState(3272);
				((ColPositionContext)_localctx).afterCol = errorCapturingIdentifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DataTypeContext extends ParserRuleContext {
		public DataTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dataType; }
	 
		public DataTypeContext() { }
		public void copyFrom(DataTypeContext ctx) {
			super.copyFrom(ctx);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class ComplexDataTypeContext extends DataTypeContext {
		public Token complex;
		public TerminalNode LT() { return getToken(SqlBaseParser.LT, 0); }
		public List<DataTypeContext> dataType() {
			return getRuleContexts(DataTypeContext.class);
		}
		public DataTypeContext dataType(int i) {
			return getRuleContext(DataTypeContext.class,i);
		}
		public TerminalNode GT() { return getToken(SqlBaseParser.GT, 0); }
		public TerminalNode ARRAY() { return getToken(SqlBaseParser.ARRAY, 0); }
		public TerminalNode COMMA() { return getToken(SqlBaseParser.COMMA, 0); }
		public TerminalNode MAP() { return getToken(SqlBaseParser.MAP, 0); }
		public TerminalNode STRUCT() { return getToken(SqlBaseParser.STRUCT, 0); }
		public TerminalNode NEQ() { return getToken(SqlBaseParser.NEQ, 0); }
		public ComplexColTypeListContext complexColTypeList() {
			return getRuleContext(ComplexColTypeListContext.class,0);
		}
		public ComplexDataTypeContext(DataTypeContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterComplexDataType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitComplexDataType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitComplexDataType(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class YearMonthIntervalDataTypeContext extends DataTypeContext {
		public Token from;
		public Token to;
		public TerminalNode INTERVAL() { return getToken(SqlBaseParser.INTERVAL, 0); }
		public TerminalNode YEAR() { return getToken(SqlBaseParser.YEAR, 0); }
		public List<TerminalNode> MONTH() { return getTokens(SqlBaseParser.MONTH); }
		public TerminalNode MONTH(int i) {
			return getToken(SqlBaseParser.MONTH, i);
		}
		public TerminalNode TO() { return getToken(SqlBaseParser.TO, 0); }
		public YearMonthIntervalDataTypeContext(DataTypeContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterYearMonthIntervalDataType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitYearMonthIntervalDataType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitYearMonthIntervalDataType(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class DayTimeIntervalDataTypeContext extends DataTypeContext {
		public Token from;
		public Token to;
		public TerminalNode INTERVAL() { return getToken(SqlBaseParser.INTERVAL, 0); }
		public TerminalNode DAY() { return getToken(SqlBaseParser.DAY, 0); }
		public List<TerminalNode> HOUR() { return getTokens(SqlBaseParser.HOUR); }
		public TerminalNode HOUR(int i) {
			return getToken(SqlBaseParser.HOUR, i);
		}
		public List<TerminalNode> MINUTE() { return getTokens(SqlBaseParser.MINUTE); }
		public TerminalNode MINUTE(int i) {
			return getToken(SqlBaseParser.MINUTE, i);
		}
		public List<TerminalNode> SECOND() { return getTokens(SqlBaseParser.SECOND); }
		public TerminalNode SECOND(int i) {
			return getToken(SqlBaseParser.SECOND, i);
		}
		public TerminalNode TO() { return getToken(SqlBaseParser.TO, 0); }
		public DayTimeIntervalDataTypeContext(DataTypeContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterDayTimeIntervalDataType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitDayTimeIntervalDataType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitDayTimeIntervalDataType(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class PrimitiveDataTypeContext extends DataTypeContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode LEFT_PAREN() { return getToken(SqlBaseParser.LEFT_PAREN, 0); }
		public List<TerminalNode> INTEGER_VALUE() { return getTokens(SqlBaseParser.INTEGER_VALUE); }
		public TerminalNode INTEGER_VALUE(int i) {
			return getToken(SqlBaseParser.INTEGER_VALUE, i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(SqlBaseParser.RIGHT_PAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(SqlBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SqlBaseParser.COMMA, i);
		}
		public PrimitiveDataTypeContext(DataTypeContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterPrimitiveDataType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitPrimitiveDataType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitPrimitiveDataType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DataTypeContext dataType() throws RecognitionException {
		DataTypeContext _localctx = new DataTypeContext(_ctx, getState());
		enterRule(_localctx, 292, RULE_dataType);
		int _la;
		try {
			setState(3321);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,421,_ctx) ) {
			case 1:
				_localctx = new ComplexDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(3275);
				((ComplexDataTypeContext)_localctx).complex = match(ARRAY);
				setState(3276);
				match(LT);
				setState(3277);
				dataType();
				setState(3278);
				match(GT);
				}
				break;
			case 2:
				_localctx = new ComplexDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(3280);
				((ComplexDataTypeContext)_localctx).complex = match(MAP);
				setState(3281);
				match(LT);
				setState(3282);
				dataType();
				setState(3283);
				match(COMMA);
				setState(3284);
				dataType();
				setState(3285);
				match(GT);
				}
				break;
			case 3:
				_localctx = new ComplexDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(3287);
				((ComplexDataTypeContext)_localctx).complex = match(STRUCT);
				setState(3294);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case LT:
					{
					setState(3288);
					match(LT);
					setState(3290);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,415,_ctx) ) {
					case 1:
						{
						setState(3289);
						complexColTypeList();
						}
						break;
					}
					setState(3292);
					match(GT);
					}
					break;
				case NEQ:
					{
					setState(3293);
					match(NEQ);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 4:
				_localctx = new YearMonthIntervalDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(3296);
				match(INTERVAL);
				setState(3297);
				((YearMonthIntervalDataTypeContext)_localctx).from = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==MONTH || _la==YEAR) ) {
					((YearMonthIntervalDataTypeContext)_localctx).from = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3300);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,417,_ctx) ) {
				case 1:
					{
					setState(3298);
					match(TO);
					setState(3299);
					((YearMonthIntervalDataTypeContext)_localctx).to = match(MONTH);
					}
					break;
				}
				}
				break;
			case 5:
				_localctx = new DayTimeIntervalDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(3302);
				match(INTERVAL);
				setState(3303);
				((DayTimeIntervalDataTypeContext)_localctx).from = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==DAY || _la==HOUR || _la==MINUTE || _la==SECOND) ) {
					((DayTimeIntervalDataTypeContext)_localctx).from = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3306);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,418,_ctx) ) {
				case 1:
					{
					setState(3304);
					match(TO);
					setState(3305);
					((DayTimeIntervalDataTypeContext)_localctx).to = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==HOUR || _la==MINUTE || _la==SECOND) ) {
						((DayTimeIntervalDataTypeContext)_localctx).to = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				}
				}
				break;
			case 6:
				_localctx = new PrimitiveDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 6);
				{
				setState(3308);
				identifier();
				setState(3319);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,420,_ctx) ) {
				case 1:
					{
					setState(3309);
					match(LEFT_PAREN);
					setState(3310);
					match(INTEGER_VALUE);
					setState(3315);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(3311);
						match(COMMA);
						setState(3312);
						match(INTEGER_VALUE);
						}
						}
						setState(3317);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					setState(3318);
					match(RIGHT_PAREN);
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class QualifiedColTypeWithPositionListContext extends ParserRuleContext {
		public List<QualifiedColTypeWithPositionContext> qualifiedColTypeWithPosition() {
			return getRuleContexts(QualifiedColTypeWithPositionContext.class);
		}
		public QualifiedColTypeWithPositionContext qualifiedColTypeWithPosition(int i) {
			return getRuleContext(QualifiedColTypeWithPositionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SqlBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SqlBaseParser.COMMA, i);
		}
		public QualifiedColTypeWithPositionListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_qualifiedColTypeWithPositionList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterQualifiedColTypeWithPositionList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitQualifiedColTypeWithPositionList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitQualifiedColTypeWithPositionList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final QualifiedColTypeWithPositionListContext qualifiedColTypeWithPositionList() throws RecognitionException {
		QualifiedColTypeWithPositionListContext _localctx = new QualifiedColTypeWithPositionListContext(_ctx, getState());
		enterRule(_localctx, 294, RULE_qualifiedColTypeWithPositionList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3323);
			qualifiedColTypeWithPosition();
			setState(3328);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3324);
				match(COMMA);
				setState(3325);
				qualifiedColTypeWithPosition();
				}
				}
				setState(3330);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class QualifiedColTypeWithPositionContext extends ParserRuleContext {
		public MultipartIdentifierContext name;
		public DataTypeContext dataType() {
			return getRuleContext(DataTypeContext.class,0);
		}
		public MultipartIdentifierContext multipartIdentifier() {
			return getRuleContext(MultipartIdentifierContext.class,0);
		}
		public List<ColDefinitionDescriptorWithPositionContext> colDefinitionDescriptorWithPosition() {
			return getRuleContexts(ColDefinitionDescriptorWithPositionContext.class);
		}
		public ColDefinitionDescriptorWithPositionContext colDefinitionDescriptorWithPosition(int i) {
			return getRuleContext(ColDefinitionDescriptorWithPositionContext.class,i);
		}
		public QualifiedColTypeWithPositionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_qualifiedColTypeWithPosition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterQualifiedColTypeWithPosition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitQualifiedColTypeWithPosition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitQualifiedColTypeWithPosition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final QualifiedColTypeWithPositionContext qualifiedColTypeWithPosition() throws RecognitionException {
		QualifiedColTypeWithPositionContext _localctx = new QualifiedColTypeWithPositionContext(_ctx, getState());
		enterRule(_localctx, 296, RULE_qualifiedColTypeWithPosition);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3331);
			((QualifiedColTypeWithPositionContext)_localctx).name = multipartIdentifier();
			setState(3332);
			dataType();
			setState(3336);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==AFTER || _la==COMMENT || _la==DEFAULT || _la==FIRST || _la==NOT) {
				{
				{
				setState(3333);
				colDefinitionDescriptorWithPosition();
				}
				}
				setState(3338);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ColDefinitionDescriptorWithPositionContext extends ParserRuleContext {
		public TerminalNode NOT() { return getToken(SqlBaseParser.NOT, 0); }
		public TerminalNode NULL() { return getToken(SqlBaseParser.NULL, 0); }
		public DefaultExpressionContext defaultExpression() {
			return getRuleContext(DefaultExpressionContext.class,0);
		}
		public CommentSpecContext commentSpec() {
			return getRuleContext(CommentSpecContext.class,0);
		}
		public ColPositionContext colPosition() {
			return getRuleContext(ColPositionContext.class,0);
		}
		public ColDefinitionDescriptorWithPositionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_colDefinitionDescriptorWithPosition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterColDefinitionDescriptorWithPosition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitColDefinitionDescriptorWithPosition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitColDefinitionDescriptorWithPosition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColDefinitionDescriptorWithPositionContext colDefinitionDescriptorWithPosition() throws RecognitionException {
		ColDefinitionDescriptorWithPositionContext _localctx = new ColDefinitionDescriptorWithPositionContext(_ctx, getState());
		enterRule(_localctx, 298, RULE_colDefinitionDescriptorWithPosition);
		try {
			setState(3344);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case NOT:
				enterOuterAlt(_localctx, 1);
				{
				setState(3339);
				match(NOT);
				setState(3340);
				match(NULL);
				}
				break;
			case DEFAULT:
				enterOuterAlt(_localctx, 2);
				{
				setState(3341);
				defaultExpression();
				}
				break;
			case COMMENT:
				enterOuterAlt(_localctx, 3);
				{
				setState(3342);
				commentSpec();
				}
				break;
			case AFTER:
			case FIRST:
				enterOuterAlt(_localctx, 4);
				{
				setState(3343);
				colPosition();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DefaultExpressionContext extends ParserRuleContext {
		public TerminalNode DEFAULT() { return getToken(SqlBaseParser.DEFAULT, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public DefaultExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_defaultExpression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterDefaultExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitDefaultExpression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitDefaultExpression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DefaultExpressionContext defaultExpression() throws RecognitionException {
		DefaultExpressionContext _localctx = new DefaultExpressionContext(_ctx, getState());
		enterRule(_localctx, 300, RULE_defaultExpression);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3346);
			match(DEFAULT);
			setState(3347);
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ColTypeListContext extends ParserRuleContext {
		public List<ColTypeContext> colType() {
			return getRuleContexts(ColTypeContext.class);
		}
		public ColTypeContext colType(int i) {
			return getRuleContext(ColTypeContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SqlBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SqlBaseParser.COMMA, i);
		}
		public ColTypeListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_colTypeList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterColTypeList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitColTypeList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitColTypeList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColTypeListContext colTypeList() throws RecognitionException {
		ColTypeListContext _localctx = new ColTypeListContext(_ctx, getState());
		enterRule(_localctx, 302, RULE_colTypeList);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3349);
			colType();
			setState(3354);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,425,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(3350);
					match(COMMA);
					setState(3351);
					colType();
					}
					} 
				}
				setState(3356);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,425,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ColTypeContext extends ParserRuleContext {
		public ErrorCapturingIdentifierContext colName;
		public DataTypeContext dataType() {
			return getRuleContext(DataTypeContext.class,0);
		}
		public ErrorCapturingIdentifierContext errorCapturingIdentifier() {
			return getRuleContext(ErrorCapturingIdentifierContext.class,0);
		}
		public TerminalNode NOT() { return getToken(SqlBaseParser.NOT, 0); }
		public TerminalNode NULL() { return getToken(SqlBaseParser.NULL, 0); }
		public CommentSpecContext commentSpec() {
			return getRuleContext(CommentSpecContext.class,0);
		}
		public ColTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_colType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterColType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitColType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitColType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColTypeContext colType() throws RecognitionException {
		ColTypeContext _localctx = new ColTypeContext(_ctx, getState());
		enterRule(_localctx, 304, RULE_colType);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3357);
			((ColTypeContext)_localctx).colName = errorCapturingIdentifier();
			setState(3358);
			dataType();
			setState(3361);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,426,_ctx) ) {
			case 1:
				{
				setState(3359);
				match(NOT);
				setState(3360);
				match(NULL);
				}
				break;
			}
			setState(3364);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,427,_ctx) ) {
			case 1:
				{
				setState(3363);
				commentSpec();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CreateOrReplaceTableColTypeListContext extends ParserRuleContext {
		public List<CreateOrReplaceTableColTypeContext> createOrReplaceTableColType() {
			return getRuleContexts(CreateOrReplaceTableColTypeContext.class);
		}
		public CreateOrReplaceTableColTypeContext createOrReplaceTableColType(int i) {
			return getRuleContext(CreateOrReplaceTableColTypeContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SqlBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SqlBaseParser.COMMA, i);
		}
		public CreateOrReplaceTableColTypeListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createOrReplaceTableColTypeList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterCreateOrReplaceTableColTypeList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitCreateOrReplaceTableColTypeList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitCreateOrReplaceTableColTypeList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateOrReplaceTableColTypeListContext createOrReplaceTableColTypeList() throws RecognitionException {
		CreateOrReplaceTableColTypeListContext _localctx = new CreateOrReplaceTableColTypeListContext(_ctx, getState());
		enterRule(_localctx, 306, RULE_createOrReplaceTableColTypeList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3366);
			createOrReplaceTableColType();
			setState(3371);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3367);
				match(COMMA);
				setState(3368);
				createOrReplaceTableColType();
				}
				}
				setState(3373);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CreateOrReplaceTableColTypeContext extends ParserRuleContext {
		public ErrorCapturingIdentifierContext colName;
		public DataTypeContext dataType() {
			return getRuleContext(DataTypeContext.class,0);
		}
		public ErrorCapturingIdentifierContext errorCapturingIdentifier() {
			return getRuleContext(ErrorCapturingIdentifierContext.class,0);
		}
		public List<ColDefinitionOptionContext> colDefinitionOption() {
			return getRuleContexts(ColDefinitionOptionContext.class);
		}
		public ColDefinitionOptionContext colDefinitionOption(int i) {
			return getRuleContext(ColDefinitionOptionContext.class,i);
		}
		public CreateOrReplaceTableColTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createOrReplaceTableColType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterCreateOrReplaceTableColType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitCreateOrReplaceTableColType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitCreateOrReplaceTableColType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateOrReplaceTableColTypeContext createOrReplaceTableColType() throws RecognitionException {
		CreateOrReplaceTableColTypeContext _localctx = new CreateOrReplaceTableColTypeContext(_ctx, getState());
		enterRule(_localctx, 308, RULE_createOrReplaceTableColType);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3374);
			((CreateOrReplaceTableColTypeContext)_localctx).colName = errorCapturingIdentifier();
			setState(3375);
			dataType();
			setState(3379);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMENT || _la==DEFAULT || _la==GENERATED || _la==NOT) {
				{
				{
				setState(3376);
				colDefinitionOption();
				}
				}
				setState(3381);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ColDefinitionOptionContext extends ParserRuleContext {
		public TerminalNode NOT() { return getToken(SqlBaseParser.NOT, 0); }
		public TerminalNode NULL() { return getToken(SqlBaseParser.NULL, 0); }
		public DefaultExpressionContext defaultExpression() {
			return getRuleContext(DefaultExpressionContext.class,0);
		}
		public GenerationExpressionContext generationExpression() {
			return getRuleContext(GenerationExpressionContext.class,0);
		}
		public CommentSpecContext commentSpec() {
			return getRuleContext(CommentSpecContext.class,0);
		}
		public ColDefinitionOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_colDefinitionOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterColDefinitionOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitColDefinitionOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitColDefinitionOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColDefinitionOptionContext colDefinitionOption() throws RecognitionException {
		ColDefinitionOptionContext _localctx = new ColDefinitionOptionContext(_ctx, getState());
		enterRule(_localctx, 310, RULE_colDefinitionOption);
		try {
			setState(3387);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case NOT:
				enterOuterAlt(_localctx, 1);
				{
				setState(3382);
				match(NOT);
				setState(3383);
				match(NULL);
				}
				break;
			case DEFAULT:
				enterOuterAlt(_localctx, 2);
				{
				setState(3384);
				defaultExpression();
				}
				break;
			case GENERATED:
				enterOuterAlt(_localctx, 3);
				{
				setState(3385);
				generationExpression();
				}
				break;
			case COMMENT:
				enterOuterAlt(_localctx, 4);
				{
				setState(3386);
				commentSpec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class GenerationExpressionContext extends ParserRuleContext {
		public TerminalNode GENERATED() { return getToken(SqlBaseParser.GENERATED, 0); }
		public TerminalNode ALWAYS() { return getToken(SqlBaseParser.ALWAYS, 0); }
		public TerminalNode AS() { return getToken(SqlBaseParser.AS, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(SqlBaseParser.LEFT_PAREN, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(SqlBaseParser.RIGHT_PAREN, 0); }
		public GenerationExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_generationExpression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterGenerationExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitGenerationExpression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitGenerationExpression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GenerationExpressionContext generationExpression() throws RecognitionException {
		GenerationExpressionContext _localctx = new GenerationExpressionContext(_ctx, getState());
		enterRule(_localctx, 312, RULE_generationExpression);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3389);
			match(GENERATED);
			setState(3390);
			match(ALWAYS);
			setState(3391);
			match(AS);
			setState(3392);
			match(LEFT_PAREN);
			setState(3393);
			expression();
			setState(3394);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ComplexColTypeListContext extends ParserRuleContext {
		public List<ComplexColTypeContext> complexColType() {
			return getRuleContexts(ComplexColTypeContext.class);
		}
		public ComplexColTypeContext complexColType(int i) {
			return getRuleContext(ComplexColTypeContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SqlBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SqlBaseParser.COMMA, i);
		}
		public ComplexColTypeListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_complexColTypeList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterComplexColTypeList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitComplexColTypeList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitComplexColTypeList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ComplexColTypeListContext complexColTypeList() throws RecognitionException {
		ComplexColTypeListContext _localctx = new ComplexColTypeListContext(_ctx, getState());
		enterRule(_localctx, 314, RULE_complexColTypeList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3396);
			complexColType();
			setState(3401);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3397);
				match(COMMA);
				setState(3398);
				complexColType();
				}
				}
				setState(3403);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ComplexColTypeContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public DataTypeContext dataType() {
			return getRuleContext(DataTypeContext.class,0);
		}
		public TerminalNode COLON() { return getToken(SqlBaseParser.COLON, 0); }
		public TerminalNode NOT() { return getToken(SqlBaseParser.NOT, 0); }
		public TerminalNode NULL() { return getToken(SqlBaseParser.NULL, 0); }
		public CommentSpecContext commentSpec() {
			return getRuleContext(CommentSpecContext.class,0);
		}
		public ComplexColTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_complexColType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterComplexColType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitComplexColType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitComplexColType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ComplexColTypeContext complexColType() throws RecognitionException {
		ComplexColTypeContext _localctx = new ComplexColTypeContext(_ctx, getState());
		enterRule(_localctx, 316, RULE_complexColType);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3404);
			identifier();
			setState(3406);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,432,_ctx) ) {
			case 1:
				{
				setState(3405);
				match(COLON);
				}
				break;
			}
			setState(3408);
			dataType();
			setState(3411);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NOT) {
				{
				setState(3409);
				match(NOT);
				setState(3410);
				match(NULL);
				}
			}

			setState(3414);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMENT) {
				{
				setState(3413);
				commentSpec();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class WhenClauseContext extends ParserRuleContext {
		public ExpressionContext condition;
		public ExpressionContext result;
		public TerminalNode WHEN() { return getToken(SqlBaseParser.WHEN, 0); }
		public TerminalNode THEN() { return getToken(SqlBaseParser.THEN, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public WhenClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_whenClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterWhenClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitWhenClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitWhenClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final WhenClauseContext whenClause() throws RecognitionException {
		WhenClauseContext _localctx = new WhenClauseContext(_ctx, getState());
		enterRule(_localctx, 318, RULE_whenClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3416);
			match(WHEN);
			setState(3417);
			((WhenClauseContext)_localctx).condition = expression();
			setState(3418);
			match(THEN);
			setState(3419);
			((WhenClauseContext)_localctx).result = expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class WindowClauseContext extends ParserRuleContext {
		public TerminalNode WINDOW() { return getToken(SqlBaseParser.WINDOW, 0); }
		public List<NamedWindowContext> namedWindow() {
			return getRuleContexts(NamedWindowContext.class);
		}
		public NamedWindowContext namedWindow(int i) {
			return getRuleContext(NamedWindowContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SqlBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SqlBaseParser.COMMA, i);
		}
		public WindowClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_windowClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterWindowClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitWindowClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitWindowClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final WindowClauseContext windowClause() throws RecognitionException {
		WindowClauseContext _localctx = new WindowClauseContext(_ctx, getState());
		enterRule(_localctx, 320, RULE_windowClause);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3421);
			match(WINDOW);
			setState(3422);
			namedWindow();
			setState(3427);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,435,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(3423);
					match(COMMA);
					setState(3424);
					namedWindow();
					}
					} 
				}
				setState(3429);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,435,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class NamedWindowContext extends ParserRuleContext {
		public ErrorCapturingIdentifierContext name;
		public TerminalNode AS() { return getToken(SqlBaseParser.AS, 0); }
		public WindowSpecContext windowSpec() {
			return getRuleContext(WindowSpecContext.class,0);
		}
		public ErrorCapturingIdentifierContext errorCapturingIdentifier() {
			return getRuleContext(ErrorCapturingIdentifierContext.class,0);
		}
		public NamedWindowContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_namedWindow; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterNamedWindow(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitNamedWindow(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitNamedWindow(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NamedWindowContext namedWindow() throws RecognitionException {
		NamedWindowContext _localctx = new NamedWindowContext(_ctx, getState());
		enterRule(_localctx, 322, RULE_namedWindow);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3430);
			((NamedWindowContext)_localctx).name = errorCapturingIdentifier();
			setState(3431);
			match(AS);
			setState(3432);
			windowSpec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class WindowSpecContext extends ParserRuleContext {
		public WindowSpecContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_windowSpec; }
	 
		public WindowSpecContext() { }
		public void copyFrom(WindowSpecContext ctx) {
			super.copyFrom(ctx);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class WindowRefContext extends WindowSpecContext {
		public ErrorCapturingIdentifierContext name;
		public ErrorCapturingIdentifierContext errorCapturingIdentifier() {
			return getRuleContext(ErrorCapturingIdentifierContext.class,0);
		}
		public TerminalNode LEFT_PAREN() { return getToken(SqlBaseParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(SqlBaseParser.RIGHT_PAREN, 0); }
		public WindowRefContext(WindowSpecContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterWindowRef(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitWindowRef(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitWindowRef(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class WindowDefContext extends WindowSpecContext {
		public ExpressionContext expression;
		public List<ExpressionContext> partition = new ArrayList<ExpressionContext>();
		public TerminalNode LEFT_PAREN() { return getToken(SqlBaseParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(SqlBaseParser.RIGHT_PAREN, 0); }
		public TerminalNode CLUSTER() { return getToken(SqlBaseParser.CLUSTER, 0); }
		public List<TerminalNode> BY() { return getTokens(SqlBaseParser.BY); }
		public TerminalNode BY(int i) {
			return getToken(SqlBaseParser.BY, i);
		}
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public WindowFrameContext windowFrame() {
			return getRuleContext(WindowFrameContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(SqlBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SqlBaseParser.COMMA, i);
		}
		public List<SortItemContext> sortItem() {
			return getRuleContexts(SortItemContext.class);
		}
		public SortItemContext sortItem(int i) {
			return getRuleContext(SortItemContext.class,i);
		}
		public TerminalNode PARTITION() { return getToken(SqlBaseParser.PARTITION, 0); }
		public TerminalNode DISTRIBUTE() { return getToken(SqlBaseParser.DISTRIBUTE, 0); }
		public TerminalNode ORDER() { return getToken(SqlBaseParser.ORDER, 0); }
		public TerminalNode SORT() { return getToken(SqlBaseParser.SORT, 0); }
		public WindowDefContext(WindowSpecContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterWindowDef(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitWindowDef(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitWindowDef(this);
			else return visitor.visitChildren(this);
		}
	}

	public final WindowSpecContext windowSpec() throws RecognitionException {
		WindowSpecContext _localctx = new WindowSpecContext(_ctx, getState());
		enterRule(_localctx, 324, RULE_windowSpec);
		int _la;
		try {
			setState(3480);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,443,_ctx) ) {
			case 1:
				_localctx = new WindowRefContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(3434);
				((WindowRefContext)_localctx).name = errorCapturingIdentifier();
				}
				break;
			case 2:
				_localctx = new WindowRefContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(3435);
				match(LEFT_PAREN);
				setState(3436);
				((WindowRefContext)_localctx).name = errorCapturingIdentifier();
				setState(3437);
				match(RIGHT_PAREN);
				}
				break;
			case 3:
				_localctx = new WindowDefContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(3439);
				match(LEFT_PAREN);
				setState(3474);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case CLUSTER:
					{
					setState(3440);
					match(CLUSTER);
					setState(3441);
					match(BY);
					setState(3442);
					((WindowDefContext)_localctx).expression = expression();
					((WindowDefContext)_localctx).partition.add(((WindowDefContext)_localctx).expression);
					setState(3447);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(3443);
						match(COMMA);
						setState(3444);
						((WindowDefContext)_localctx).expression = expression();
						((WindowDefContext)_localctx).partition.add(((WindowDefContext)_localctx).expression);
						}
						}
						setState(3449);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
					break;
				case RIGHT_PAREN:
				case DISTRIBUTE:
				case ORDER:
				case PARTITION:
				case RANGE:
				case ROWS:
				case SORT:
					{
					setState(3460);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==DISTRIBUTE || _la==PARTITION) {
						{
						setState(3450);
						_la = _input.LA(1);
						if ( !(_la==DISTRIBUTE || _la==PARTITION) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						setState(3451);
						match(BY);
						setState(3452);
						((WindowDefContext)_localctx).expression = expression();
						((WindowDefContext)_localctx).partition.add(((WindowDefContext)_localctx).expression);
						setState(3457);
						_errHandler.sync(this);
						_la = _input.LA(1);
						while (_la==COMMA) {
							{
							{
							setState(3453);
							match(COMMA);
							setState(3454);
							((WindowDefContext)_localctx).expression = expression();
							((WindowDefContext)_localctx).partition.add(((WindowDefContext)_localctx).expression);
							}
							}
							setState(3459);
							_errHandler.sync(this);
							_la = _input.LA(1);
						}
						}
					}

					setState(3472);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==ORDER || _la==SORT) {
						{
						setState(3462);
						_la = _input.LA(1);
						if ( !(_la==ORDER || _la==SORT) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						setState(3463);
						match(BY);
						setState(3464);
						sortItem();
						setState(3469);
						_errHandler.sync(this);
						_la = _input.LA(1);
						while (_la==COMMA) {
							{
							{
							setState(3465);
							match(COMMA);
							setState(3466);
							sortItem();
							}
							}
							setState(3471);
							_errHandler.sync(this);
							_la = _input.LA(1);
						}
						}
					}

					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(3477);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==RANGE || _la==ROWS) {
					{
					setState(3476);
					windowFrame();
					}
				}

				setState(3479);
				match(RIGHT_PAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class WindowFrameContext extends ParserRuleContext {
		public Token frameType;
		public FrameBoundContext start;
		public FrameBoundContext end;
		public TerminalNode RANGE() { return getToken(SqlBaseParser.RANGE, 0); }
		public List<FrameBoundContext> frameBound() {
			return getRuleContexts(FrameBoundContext.class);
		}
		public FrameBoundContext frameBound(int i) {
			return getRuleContext(FrameBoundContext.class,i);
		}
		public TerminalNode ROWS() { return getToken(SqlBaseParser.ROWS, 0); }
		public TerminalNode BETWEEN() { return getToken(SqlBaseParser.BETWEEN, 0); }
		public TerminalNode AND() { return getToken(SqlBaseParser.AND, 0); }
		public WindowFrameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_windowFrame; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterWindowFrame(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitWindowFrame(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitWindowFrame(this);
			else return visitor.visitChildren(this);
		}
	}

	public final WindowFrameContext windowFrame() throws RecognitionException {
		WindowFrameContext _localctx = new WindowFrameContext(_ctx, getState());
		enterRule(_localctx, 326, RULE_windowFrame);
		try {
			setState(3498);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,444,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3482);
				((WindowFrameContext)_localctx).frameType = match(RANGE);
				setState(3483);
				((WindowFrameContext)_localctx).start = frameBound();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3484);
				((WindowFrameContext)_localctx).frameType = match(ROWS);
				setState(3485);
				((WindowFrameContext)_localctx).start = frameBound();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3486);
				((WindowFrameContext)_localctx).frameType = match(RANGE);
				setState(3487);
				match(BETWEEN);
				setState(3488);
				((WindowFrameContext)_localctx).start = frameBound();
				setState(3489);
				match(AND);
				setState(3490);
				((WindowFrameContext)_localctx).end = frameBound();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3492);
				((WindowFrameContext)_localctx).frameType = match(ROWS);
				setState(3493);
				match(BETWEEN);
				setState(3494);
				((WindowFrameContext)_localctx).start = frameBound();
				setState(3495);
				match(AND);
				setState(3496);
				((WindowFrameContext)_localctx).end = frameBound();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class FrameBoundContext extends ParserRuleContext {
		public Token boundType;
		public TerminalNode UNBOUNDED() { return getToken(SqlBaseParser.UNBOUNDED, 0); }
		public TerminalNode PRECEDING() { return getToken(SqlBaseParser.PRECEDING, 0); }
		public TerminalNode FOLLOWING() { return getToken(SqlBaseParser.FOLLOWING, 0); }
		public TerminalNode ROW() { return getToken(SqlBaseParser.ROW, 0); }
		public TerminalNode CURRENT() { return getToken(SqlBaseParser.CURRENT, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public FrameBoundContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_frameBound; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterFrameBound(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitFrameBound(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitFrameBound(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FrameBoundContext frameBound() throws RecognitionException {
		FrameBoundContext _localctx = new FrameBoundContext(_ctx, getState());
		enterRule(_localctx, 328, RULE_frameBound);
		int _la;
		try {
			setState(3507);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,445,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3500);
				match(UNBOUNDED);
				setState(3501);
				((FrameBoundContext)_localctx).boundType = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==FOLLOWING || _la==PRECEDING) ) {
					((FrameBoundContext)_localctx).boundType = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3502);
				((FrameBoundContext)_localctx).boundType = match(CURRENT);
				setState(3503);
				match(ROW);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3504);
				expression();
				setState(3505);
				((FrameBoundContext)_localctx).boundType = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==FOLLOWING || _la==PRECEDING) ) {
					((FrameBoundContext)_localctx).boundType = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class QualifiedNameListContext extends ParserRuleContext {
		public List<QualifiedNameContext> qualifiedName() {
			return getRuleContexts(QualifiedNameContext.class);
		}
		public QualifiedNameContext qualifiedName(int i) {
			return getRuleContext(QualifiedNameContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SqlBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SqlBaseParser.COMMA, i);
		}
		public QualifiedNameListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_qualifiedNameList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterQualifiedNameList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitQualifiedNameList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitQualifiedNameList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final QualifiedNameListContext qualifiedNameList() throws RecognitionException {
		QualifiedNameListContext _localctx = new QualifiedNameListContext(_ctx, getState());
		enterRule(_localctx, 330, RULE_qualifiedNameList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3509);
			qualifiedName();
			setState(3514);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3510);
				match(COMMA);
				setState(3511);
				qualifiedName();
				}
				}
				setState(3516);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class FunctionNameContext extends ParserRuleContext {
		public QualifiedNameContext qualifiedName() {
			return getRuleContext(QualifiedNameContext.class,0);
		}
		public TerminalNode FILTER() { return getToken(SqlBaseParser.FILTER, 0); }
		public TerminalNode LEFT() { return getToken(SqlBaseParser.LEFT, 0); }
		public TerminalNode RIGHT() { return getToken(SqlBaseParser.RIGHT, 0); }
		public FunctionNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_functionName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterFunctionName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitFunctionName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitFunctionName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FunctionNameContext functionName() throws RecognitionException {
		FunctionNameContext _localctx = new FunctionNameContext(_ctx, getState());
		enterRule(_localctx, 332, RULE_functionName);
		try {
			setState(3521);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,447,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3517);
				qualifiedName();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3518);
				match(FILTER);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3519);
				match(LEFT);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3520);
				match(RIGHT);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class QualifiedNameContext extends ParserRuleContext {
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public List<TerminalNode> DOT() { return getTokens(SqlBaseParser.DOT); }
		public TerminalNode DOT(int i) {
			return getToken(SqlBaseParser.DOT, i);
		}
		public QualifiedNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_qualifiedName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterQualifiedName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitQualifiedName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitQualifiedName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final QualifiedNameContext qualifiedName() throws RecognitionException {
		QualifiedNameContext _localctx = new QualifiedNameContext(_ctx, getState());
		enterRule(_localctx, 334, RULE_qualifiedName);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3523);
			identifier();
			setState(3528);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,448,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(3524);
					match(DOT);
					setState(3525);
					identifier();
					}
					} 
				}
				setState(3530);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,448,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ErrorCapturingIdentifierContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public ErrorCapturingIdentifierExtraContext errorCapturingIdentifierExtra() {
			return getRuleContext(ErrorCapturingIdentifierExtraContext.class,0);
		}
		public ErrorCapturingIdentifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_errorCapturingIdentifier; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterErrorCapturingIdentifier(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitErrorCapturingIdentifier(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitErrorCapturingIdentifier(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ErrorCapturingIdentifierContext errorCapturingIdentifier() throws RecognitionException {
		ErrorCapturingIdentifierContext _localctx = new ErrorCapturingIdentifierContext(_ctx, getState());
		enterRule(_localctx, 336, RULE_errorCapturingIdentifier);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3531);
			identifier();
			setState(3532);
			errorCapturingIdentifierExtra();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ErrorCapturingIdentifierExtraContext extends ParserRuleContext {
		public ErrorCapturingIdentifierExtraContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_errorCapturingIdentifierExtra; }
	 
		public ErrorCapturingIdentifierExtraContext() { }
		public void copyFrom(ErrorCapturingIdentifierExtraContext ctx) {
			super.copyFrom(ctx);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class ErrorIdentContext extends ErrorCapturingIdentifierExtraContext {
		public List<TerminalNode> MINUS() { return getTokens(SqlBaseParser.MINUS); }
		public TerminalNode MINUS(int i) {
			return getToken(SqlBaseParser.MINUS, i);
		}
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public ErrorIdentContext(ErrorCapturingIdentifierExtraContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterErrorIdent(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitErrorIdent(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitErrorIdent(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class RealIdentContext extends ErrorCapturingIdentifierExtraContext {
		public RealIdentContext(ErrorCapturingIdentifierExtraContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterRealIdent(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitRealIdent(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitRealIdent(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ErrorCapturingIdentifierExtraContext errorCapturingIdentifierExtra() throws RecognitionException {
		ErrorCapturingIdentifierExtraContext _localctx = new ErrorCapturingIdentifierExtraContext(_ctx, getState());
		enterRule(_localctx, 338, RULE_errorCapturingIdentifierExtra);
		try {
			int _alt;
			setState(3541);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,450,_ctx) ) {
			case 1:
				_localctx = new ErrorIdentContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(3536); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						setState(3534);
						match(MINUS);
						setState(3535);
						identifier();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(3538); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,449,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			case 2:
				_localctx = new RealIdentContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class IdentifierContext extends ParserRuleContext {
		public StrictIdentifierContext strictIdentifier() {
			return getRuleContext(StrictIdentifierContext.class,0);
		}
		public StrictNonReservedContext strictNonReserved() {
			return getRuleContext(StrictNonReservedContext.class,0);
		}
		public IdentifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_identifier; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterIdentifier(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitIdentifier(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitIdentifier(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IdentifierContext identifier() throws RecognitionException {
		IdentifierContext _localctx = new IdentifierContext(_ctx, getState());
		enterRule(_localctx, 340, RULE_identifier);
		try {
			setState(3546);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,451,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3543);
				strictIdentifier();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3544);
				if (!(!SQL_standard_keyword_behavior)) throw new FailedPredicateException(this, "!SQL_standard_keyword_behavior");
				setState(3545);
				strictNonReserved();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class StrictIdentifierContext extends ParserRuleContext {
		public StrictIdentifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_strictIdentifier; }
	 
		public StrictIdentifierContext() { }
		public void copyFrom(StrictIdentifierContext ctx) {
			super.copyFrom(ctx);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class QuotedIdentifierAlternativeContext extends StrictIdentifierContext {
		public QuotedIdentifierContext quotedIdentifier() {
			return getRuleContext(QuotedIdentifierContext.class,0);
		}
		public QuotedIdentifierAlternativeContext(StrictIdentifierContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterQuotedIdentifierAlternative(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitQuotedIdentifierAlternative(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitQuotedIdentifierAlternative(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class UnquotedIdentifierContext extends StrictIdentifierContext {
		public TerminalNode IDENTIFIER() { return getToken(SqlBaseParser.IDENTIFIER, 0); }
		public AnsiNonReservedContext ansiNonReserved() {
			return getRuleContext(AnsiNonReservedContext.class,0);
		}
		public NonReservedContext nonReserved() {
			return getRuleContext(NonReservedContext.class,0);
		}
		public UnquotedIdentifierContext(StrictIdentifierContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterUnquotedIdentifier(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitUnquotedIdentifier(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitUnquotedIdentifier(this);
			else return visitor.visitChildren(this);
		}
	}

	public final StrictIdentifierContext strictIdentifier() throws RecognitionException {
		StrictIdentifierContext _localctx = new StrictIdentifierContext(_ctx, getState());
		enterRule(_localctx, 342, RULE_strictIdentifier);
		try {
			setState(3554);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,452,_ctx) ) {
			case 1:
				_localctx = new UnquotedIdentifierContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(3548);
				match(IDENTIFIER);
				}
				break;
			case 2:
				_localctx = new QuotedIdentifierAlternativeContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(3549);
				quotedIdentifier();
				}
				break;
			case 3:
				_localctx = new UnquotedIdentifierContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(3550);
				if (!(SQL_standard_keyword_behavior)) throw new FailedPredicateException(this, "SQL_standard_keyword_behavior");
				setState(3551);
				ansiNonReserved();
				}
				break;
			case 4:
				_localctx = new UnquotedIdentifierContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(3552);
				if (!(!SQL_standard_keyword_behavior)) throw new FailedPredicateException(this, "!SQL_standard_keyword_behavior");
				setState(3553);
				nonReserved();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class QuotedIdentifierContext extends ParserRuleContext {
		public TerminalNode BACKQUOTED_IDENTIFIER() { return getToken(SqlBaseParser.BACKQUOTED_IDENTIFIER, 0); }
		public TerminalNode DOUBLEQUOTED_STRING() { return getToken(SqlBaseParser.DOUBLEQUOTED_STRING, 0); }
		public QuotedIdentifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_quotedIdentifier; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterQuotedIdentifier(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitQuotedIdentifier(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitQuotedIdentifier(this);
			else return visitor.visitChildren(this);
		}
	}

	public final QuotedIdentifierContext quotedIdentifier() throws RecognitionException {
		QuotedIdentifierContext _localctx = new QuotedIdentifierContext(_ctx, getState());
		enterRule(_localctx, 344, RULE_quotedIdentifier);
		try {
			setState(3559);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,453,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3556);
				match(BACKQUOTED_IDENTIFIER);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3557);
				if (!(double_quoted_identifiers)) throw new FailedPredicateException(this, "double_quoted_identifiers");
				setState(3558);
				match(DOUBLEQUOTED_STRING);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class BackQuotedIdentifierContext extends ParserRuleContext {
		public TerminalNode BACKQUOTED_IDENTIFIER() { return getToken(SqlBaseParser.BACKQUOTED_IDENTIFIER, 0); }
		public BackQuotedIdentifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_backQuotedIdentifier; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterBackQuotedIdentifier(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitBackQuotedIdentifier(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitBackQuotedIdentifier(this);
			else return visitor.visitChildren(this);
		}
	}

	public final BackQuotedIdentifierContext backQuotedIdentifier() throws RecognitionException {
		BackQuotedIdentifierContext _localctx = new BackQuotedIdentifierContext(_ctx, getState());
		enterRule(_localctx, 346, RULE_backQuotedIdentifier);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3561);
			match(BACKQUOTED_IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class NumberContext extends ParserRuleContext {
		public NumberContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_number; }
	 
		public NumberContext() { }
		public void copyFrom(NumberContext ctx) {
			super.copyFrom(ctx);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class DecimalLiteralContext extends NumberContext {
		public TerminalNode DECIMAL_VALUE() { return getToken(SqlBaseParser.DECIMAL_VALUE, 0); }
		public TerminalNode MINUS() { return getToken(SqlBaseParser.MINUS, 0); }
		public DecimalLiteralContext(NumberContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterDecimalLiteral(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitDecimalLiteral(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitDecimalLiteral(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class BigIntLiteralContext extends NumberContext {
		public TerminalNode BIGINT_LITERAL() { return getToken(SqlBaseParser.BIGINT_LITERAL, 0); }
		public TerminalNode MINUS() { return getToken(SqlBaseParser.MINUS, 0); }
		public BigIntLiteralContext(NumberContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterBigIntLiteral(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitBigIntLiteral(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitBigIntLiteral(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class TinyIntLiteralContext extends NumberContext {
		public TerminalNode TINYINT_LITERAL() { return getToken(SqlBaseParser.TINYINT_LITERAL, 0); }
		public TerminalNode MINUS() { return getToken(SqlBaseParser.MINUS, 0); }
		public TinyIntLiteralContext(NumberContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterTinyIntLiteral(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitTinyIntLiteral(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitTinyIntLiteral(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class LegacyDecimalLiteralContext extends NumberContext {
		public TerminalNode EXPONENT_VALUE() { return getToken(SqlBaseParser.EXPONENT_VALUE, 0); }
		public TerminalNode DECIMAL_VALUE() { return getToken(SqlBaseParser.DECIMAL_VALUE, 0); }
		public TerminalNode MINUS() { return getToken(SqlBaseParser.MINUS, 0); }
		public LegacyDecimalLiteralContext(NumberContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterLegacyDecimalLiteral(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitLegacyDecimalLiteral(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitLegacyDecimalLiteral(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class BigDecimalLiteralContext extends NumberContext {
		public TerminalNode BIGDECIMAL_LITERAL() { return getToken(SqlBaseParser.BIGDECIMAL_LITERAL, 0); }
		public TerminalNode MINUS() { return getToken(SqlBaseParser.MINUS, 0); }
		public BigDecimalLiteralContext(NumberContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterBigDecimalLiteral(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitBigDecimalLiteral(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitBigDecimalLiteral(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class ExponentLiteralContext extends NumberContext {
		public TerminalNode EXPONENT_VALUE() { return getToken(SqlBaseParser.EXPONENT_VALUE, 0); }
		public TerminalNode MINUS() { return getToken(SqlBaseParser.MINUS, 0); }
		public ExponentLiteralContext(NumberContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterExponentLiteral(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitExponentLiteral(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitExponentLiteral(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class DoubleLiteralContext extends NumberContext {
		public TerminalNode DOUBLE_LITERAL() { return getToken(SqlBaseParser.DOUBLE_LITERAL, 0); }
		public TerminalNode MINUS() { return getToken(SqlBaseParser.MINUS, 0); }
		public DoubleLiteralContext(NumberContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterDoubleLiteral(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitDoubleLiteral(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitDoubleLiteral(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class IntegerLiteralContext extends NumberContext {
		public TerminalNode INTEGER_VALUE() { return getToken(SqlBaseParser.INTEGER_VALUE, 0); }
		public TerminalNode MINUS() { return getToken(SqlBaseParser.MINUS, 0); }
		public IntegerLiteralContext(NumberContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterIntegerLiteral(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitIntegerLiteral(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitIntegerLiteral(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class FloatLiteralContext extends NumberContext {
		public TerminalNode FLOAT_LITERAL() { return getToken(SqlBaseParser.FLOAT_LITERAL, 0); }
		public TerminalNode MINUS() { return getToken(SqlBaseParser.MINUS, 0); }
		public FloatLiteralContext(NumberContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterFloatLiteral(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitFloatLiteral(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitFloatLiteral(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class SmallIntLiteralContext extends NumberContext {
		public TerminalNode SMALLINT_LITERAL() { return getToken(SqlBaseParser.SMALLINT_LITERAL, 0); }
		public TerminalNode MINUS() { return getToken(SqlBaseParser.MINUS, 0); }
		public SmallIntLiteralContext(NumberContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterSmallIntLiteral(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitSmallIntLiteral(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitSmallIntLiteral(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NumberContext number() throws RecognitionException {
		NumberContext _localctx = new NumberContext(_ctx, getState());
		enterRule(_localctx, 348, RULE_number);
		int _la;
		try {
			setState(3606);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,464,_ctx) ) {
			case 1:
				_localctx = new ExponentLiteralContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(3563);
				if (!(!legacy_exponent_literal_as_decimal_enabled)) throw new FailedPredicateException(this, "!legacy_exponent_literal_as_decimal_enabled");
				setState(3565);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==MINUS) {
					{
					setState(3564);
					match(MINUS);
					}
				}

				setState(3567);
				match(EXPONENT_VALUE);
				}
				break;
			case 2:
				_localctx = new DecimalLiteralContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(3568);
				if (!(!legacy_exponent_literal_as_decimal_enabled)) throw new FailedPredicateException(this, "!legacy_exponent_literal_as_decimal_enabled");
				setState(3570);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==MINUS) {
					{
					setState(3569);
					match(MINUS);
					}
				}

				setState(3572);
				match(DECIMAL_VALUE);
				}
				break;
			case 3:
				_localctx = new LegacyDecimalLiteralContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(3573);
				if (!(legacy_exponent_literal_as_decimal_enabled)) throw new FailedPredicateException(this, "legacy_exponent_literal_as_decimal_enabled");
				setState(3575);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==MINUS) {
					{
					setState(3574);
					match(MINUS);
					}
				}

				setState(3577);
				_la = _input.LA(1);
				if ( !(_la==EXPONENT_VALUE || _la==DECIMAL_VALUE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 4:
				_localctx = new IntegerLiteralContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(3579);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==MINUS) {
					{
					setState(3578);
					match(MINUS);
					}
				}

				setState(3581);
				match(INTEGER_VALUE);
				}
				break;
			case 5:
				_localctx = new BigIntLiteralContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(3583);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==MINUS) {
					{
					setState(3582);
					match(MINUS);
					}
				}

				setState(3585);
				match(BIGINT_LITERAL);
				}
				break;
			case 6:
				_localctx = new SmallIntLiteralContext(_localctx);
				enterOuterAlt(_localctx, 6);
				{
				setState(3587);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==MINUS) {
					{
					setState(3586);
					match(MINUS);
					}
				}

				setState(3589);
				match(SMALLINT_LITERAL);
				}
				break;
			case 7:
				_localctx = new TinyIntLiteralContext(_localctx);
				enterOuterAlt(_localctx, 7);
				{
				setState(3591);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==MINUS) {
					{
					setState(3590);
					match(MINUS);
					}
				}

				setState(3593);
				match(TINYINT_LITERAL);
				}
				break;
			case 8:
				_localctx = new DoubleLiteralContext(_localctx);
				enterOuterAlt(_localctx, 8);
				{
				setState(3595);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==MINUS) {
					{
					setState(3594);
					match(MINUS);
					}
				}

				setState(3597);
				match(DOUBLE_LITERAL);
				}
				break;
			case 9:
				_localctx = new FloatLiteralContext(_localctx);
				enterOuterAlt(_localctx, 9);
				{
				setState(3599);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==MINUS) {
					{
					setState(3598);
					match(MINUS);
					}
				}

				setState(3601);
				match(FLOAT_LITERAL);
				}
				break;
			case 10:
				_localctx = new BigDecimalLiteralContext(_localctx);
				enterOuterAlt(_localctx, 10);
				{
				setState(3603);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==MINUS) {
					{
					setState(3602);
					match(MINUS);
					}
				}

				setState(3605);
				match(BIGDECIMAL_LITERAL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AlterColumnActionContext extends ParserRuleContext {
		public Token setOrDrop;
		public Token dropDefault;
		public TerminalNode TYPE() { return getToken(SqlBaseParser.TYPE, 0); }
		public DataTypeContext dataType() {
			return getRuleContext(DataTypeContext.class,0);
		}
		public CommentSpecContext commentSpec() {
			return getRuleContext(CommentSpecContext.class,0);
		}
		public ColPositionContext colPosition() {
			return getRuleContext(ColPositionContext.class,0);
		}
		public TerminalNode NOT() { return getToken(SqlBaseParser.NOT, 0); }
		public TerminalNode NULL() { return getToken(SqlBaseParser.NULL, 0); }
		public TerminalNode SET() { return getToken(SqlBaseParser.SET, 0); }
		public TerminalNode DROP() { return getToken(SqlBaseParser.DROP, 0); }
		public DefaultExpressionContext defaultExpression() {
			return getRuleContext(DefaultExpressionContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(SqlBaseParser.DEFAULT, 0); }
		public AlterColumnActionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterColumnAction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterAlterColumnAction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitAlterColumnAction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitAlterColumnAction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterColumnActionContext alterColumnAction() throws RecognitionException {
		AlterColumnActionContext _localctx = new AlterColumnActionContext(_ctx, getState());
		enterRule(_localctx, 350, RULE_alterColumnAction);
		int _la;
		try {
			setState(3619);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,465,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3608);
				match(TYPE);
				setState(3609);
				dataType();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3610);
				commentSpec();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3611);
				colPosition();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3612);
				((AlterColumnActionContext)_localctx).setOrDrop = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==DROP || _la==SET) ) {
					((AlterColumnActionContext)_localctx).setOrDrop = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3613);
				match(NOT);
				setState(3614);
				match(NULL);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(3615);
				match(SET);
				setState(3616);
				defaultExpression();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(3617);
				((AlterColumnActionContext)_localctx).dropDefault = match(DROP);
				setState(3618);
				match(DEFAULT);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class StringLitContext extends ParserRuleContext {
		public TerminalNode STRING() { return getToken(SqlBaseParser.STRING, 0); }
		public TerminalNode DOUBLEQUOTED_STRING() { return getToken(SqlBaseParser.DOUBLEQUOTED_STRING, 0); }
		public StringLitContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stringLit; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterStringLit(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitStringLit(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitStringLit(this);
			else return visitor.visitChildren(this);
		}
	}

	public final StringLitContext stringLit() throws RecognitionException {
		StringLitContext _localctx = new StringLitContext(_ctx, getState());
		enterRule(_localctx, 352, RULE_stringLit);
		try {
			setState(3624);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,466,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3621);
				match(STRING);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3622);
				if (!(!double_quoted_identifiers)) throw new FailedPredicateException(this, "!double_quoted_identifiers");
				setState(3623);
				match(DOUBLEQUOTED_STRING);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CommentContext extends ParserRuleContext {
		public StringLitContext stringLit() {
			return getRuleContext(StringLitContext.class,0);
		}
		public TerminalNode NULL() { return getToken(SqlBaseParser.NULL, 0); }
		public CommentContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_comment; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterComment(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitComment(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitComment(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CommentContext comment() throws RecognitionException {
		CommentContext _localctx = new CommentContext(_ctx, getState());
		enterRule(_localctx, 354, RULE_comment);
		try {
			setState(3628);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,467,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3626);
				stringLit();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3627);
				match(NULL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class VersionContext extends ParserRuleContext {
		public TerminalNode INTEGER_VALUE() { return getToken(SqlBaseParser.INTEGER_VALUE, 0); }
		public StringLitContext stringLit() {
			return getRuleContext(StringLitContext.class,0);
		}
		public VersionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_version; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterVersion(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitVersion(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitVersion(this);
			else return visitor.visitChildren(this);
		}
	}

	public final VersionContext version() throws RecognitionException {
		VersionContext _localctx = new VersionContext(_ctx, getState());
		enterRule(_localctx, 356, RULE_version);
		try {
			setState(3632);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,468,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3630);
				match(INTEGER_VALUE);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3631);
				stringLit();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AnsiNonReservedContext extends ParserRuleContext {
		public TerminalNode ADD() { return getToken(SqlBaseParser.ADD, 0); }
		public TerminalNode AFTER() { return getToken(SqlBaseParser.AFTER, 0); }
		public TerminalNode ALTER() { return getToken(SqlBaseParser.ALTER, 0); }
		public TerminalNode ALWAYS() { return getToken(SqlBaseParser.ALWAYS, 0); }
		public TerminalNode ANALYZE() { return getToken(SqlBaseParser.ANALYZE, 0); }
		public TerminalNode ANTI() { return getToken(SqlBaseParser.ANTI, 0); }
		public TerminalNode ANY_VALUE() { return getToken(SqlBaseParser.ANY_VALUE, 0); }
		public TerminalNode ARCHIVE() { return getToken(SqlBaseParser.ARCHIVE, 0); }
		public TerminalNode ARRAY() { return getToken(SqlBaseParser.ARRAY, 0); }
		public TerminalNode ASC() { return getToken(SqlBaseParser.ASC, 0); }
		public TerminalNode AT() { return getToken(SqlBaseParser.AT, 0); }
		public TerminalNode BETWEEN() { return getToken(SqlBaseParser.BETWEEN, 0); }
		public TerminalNode BUCKET() { return getToken(SqlBaseParser.BUCKET, 0); }
		public TerminalNode BUCKETS() { return getToken(SqlBaseParser.BUCKETS, 0); }
		public TerminalNode BY() { return getToken(SqlBaseParser.BY, 0); }
		public TerminalNode CACHE() { return getToken(SqlBaseParser.CACHE, 0); }
		public TerminalNode CASCADE() { return getToken(SqlBaseParser.CASCADE, 0); }
		public TerminalNode CATALOG() { return getToken(SqlBaseParser.CATALOG, 0); }
		public TerminalNode CATALOGS() { return getToken(SqlBaseParser.CATALOGS, 0); }
		public TerminalNode CHANGE() { return getToken(SqlBaseParser.CHANGE, 0); }
		public TerminalNode CLEAR() { return getToken(SqlBaseParser.CLEAR, 0); }
		public TerminalNode CLUSTER() { return getToken(SqlBaseParser.CLUSTER, 0); }
		public TerminalNode CLUSTERED() { return getToken(SqlBaseParser.CLUSTERED, 0); }
		public TerminalNode CODEGEN() { return getToken(SqlBaseParser.CODEGEN, 0); }
		public TerminalNode COLLECTION() { return getToken(SqlBaseParser.COLLECTION, 0); }
		public TerminalNode COLUMNS() { return getToken(SqlBaseParser.COLUMNS, 0); }
		public TerminalNode COMMENT() { return getToken(SqlBaseParser.COMMENT, 0); }
		public TerminalNode COMMIT() { return getToken(SqlBaseParser.COMMIT, 0); }
		public TerminalNode COMPACT() { return getToken(SqlBaseParser.COMPACT, 0); }
		public TerminalNode COMPACTIONS() { return getToken(SqlBaseParser.COMPACTIONS, 0); }
		public TerminalNode COMPUTE() { return getToken(SqlBaseParser.COMPUTE, 0); }
		public TerminalNode CONCATENATE() { return getToken(SqlBaseParser.CONCATENATE, 0); }
		public TerminalNode COST() { return getToken(SqlBaseParser.COST, 0); }
		public TerminalNode CUBE() { return getToken(SqlBaseParser.CUBE, 0); }
		public TerminalNode CURRENT() { return getToken(SqlBaseParser.CURRENT, 0); }
		public TerminalNode DATA() { return getToken(SqlBaseParser.DATA, 0); }
		public TerminalNode DATABASE() { return getToken(SqlBaseParser.DATABASE, 0); }
		public TerminalNode DATABASES() { return getToken(SqlBaseParser.DATABASES, 0); }
		public TerminalNode DATEADD() { return getToken(SqlBaseParser.DATEADD, 0); }
		public TerminalNode DATEDIFF() { return getToken(SqlBaseParser.DATEDIFF, 0); }
		public TerminalNode DAY() { return getToken(SqlBaseParser.DAY, 0); }
		public TerminalNode DAYS() { return getToken(SqlBaseParser.DAYS, 0); }
		public TerminalNode DAYOFYEAR() { return getToken(SqlBaseParser.DAYOFYEAR, 0); }
		public TerminalNode DBPROPERTIES() { return getToken(SqlBaseParser.DBPROPERTIES, 0); }
		public TerminalNode DEFAULT() { return getToken(SqlBaseParser.DEFAULT, 0); }
		public TerminalNode DEFINED() { return getToken(SqlBaseParser.DEFINED, 0); }
		public TerminalNode DELETE() { return getToken(SqlBaseParser.DELETE, 0); }
		public TerminalNode DELIMITED() { return getToken(SqlBaseParser.DELIMITED, 0); }
		public TerminalNode DESC() { return getToken(SqlBaseParser.DESC, 0); }
		public TerminalNode DESCRIBE() { return getToken(SqlBaseParser.DESCRIBE, 0); }
		public TerminalNode DFS() { return getToken(SqlBaseParser.DFS, 0); }
		public TerminalNode DIRECTORIES() { return getToken(SqlBaseParser.DIRECTORIES, 0); }
		public TerminalNode DIRECTORY() { return getToken(SqlBaseParser.DIRECTORY, 0); }
		public TerminalNode DISTRIBUTE() { return getToken(SqlBaseParser.DISTRIBUTE, 0); }
		public TerminalNode DIV() { return getToken(SqlBaseParser.DIV, 0); }
		public TerminalNode DROP() { return getToken(SqlBaseParser.DROP, 0); }
		public TerminalNode ESCAPED() { return getToken(SqlBaseParser.ESCAPED, 0); }
		public TerminalNode EXCHANGE() { return getToken(SqlBaseParser.EXCHANGE, 0); }
		public TerminalNode EXCLUDE() { return getToken(SqlBaseParser.EXCLUDE, 0); }
		public TerminalNode EXISTS() { return getToken(SqlBaseParser.EXISTS, 0); }
		public TerminalNode EXPLAIN() { return getToken(SqlBaseParser.EXPLAIN, 0); }
		public TerminalNode EXPORT() { return getToken(SqlBaseParser.EXPORT, 0); }
		public TerminalNode EXTENDED() { return getToken(SqlBaseParser.EXTENDED, 0); }
		public TerminalNode EXTERNAL() { return getToken(SqlBaseParser.EXTERNAL, 0); }
		public TerminalNode EXTRACT() { return getToken(SqlBaseParser.EXTRACT, 0); }
		public TerminalNode FIELDS() { return getToken(SqlBaseParser.FIELDS, 0); }
		public TerminalNode FILEFORMAT() { return getToken(SqlBaseParser.FILEFORMAT, 0); }
		public TerminalNode FIRST() { return getToken(SqlBaseParser.FIRST, 0); }
		public TerminalNode FOLLOWING() { return getToken(SqlBaseParser.FOLLOWING, 0); }
		public TerminalNode FORMAT() { return getToken(SqlBaseParser.FORMAT, 0); }
		public TerminalNode FORMATTED() { return getToken(SqlBaseParser.FORMATTED, 0); }
		public TerminalNode FUNCTION() { return getToken(SqlBaseParser.FUNCTION, 0); }
		public TerminalNode FUNCTIONS() { return getToken(SqlBaseParser.FUNCTIONS, 0); }
		public TerminalNode GENERATED() { return getToken(SqlBaseParser.GENERATED, 0); }
		public TerminalNode GLOBAL() { return getToken(SqlBaseParser.GLOBAL, 0); }
		public TerminalNode GROUPING() { return getToken(SqlBaseParser.GROUPING, 0); }
		public TerminalNode HOUR() { return getToken(SqlBaseParser.HOUR, 0); }
		public TerminalNode HOURS() { return getToken(SqlBaseParser.HOURS, 0); }
		public TerminalNode IF() { return getToken(SqlBaseParser.IF, 0); }
		public TerminalNode IGNORE() { return getToken(SqlBaseParser.IGNORE, 0); }
		public TerminalNode IMPORT() { return getToken(SqlBaseParser.IMPORT, 0); }
		public TerminalNode INCLUDE() { return getToken(SqlBaseParser.INCLUDE, 0); }
		public TerminalNode INDEX() { return getToken(SqlBaseParser.INDEX, 0); }
		public TerminalNode INDEXES() { return getToken(SqlBaseParser.INDEXES, 0); }
		public TerminalNode INPATH() { return getToken(SqlBaseParser.INPATH, 0); }
		public TerminalNode INPUTFORMAT() { return getToken(SqlBaseParser.INPUTFORMAT, 0); }
		public TerminalNode INSERT() { return getToken(SqlBaseParser.INSERT, 0); }
		public TerminalNode INTERVAL() { return getToken(SqlBaseParser.INTERVAL, 0); }
		public TerminalNode ITEMS() { return getToken(SqlBaseParser.ITEMS, 0); }
		public TerminalNode KEYS() { return getToken(SqlBaseParser.KEYS, 0); }
		public TerminalNode LAST() { return getToken(SqlBaseParser.LAST, 0); }
		public TerminalNode LAZY() { return getToken(SqlBaseParser.LAZY, 0); }
		public TerminalNode LIKE() { return getToken(SqlBaseParser.LIKE, 0); }
		public TerminalNode ILIKE() { return getToken(SqlBaseParser.ILIKE, 0); }
		public TerminalNode LIMIT() { return getToken(SqlBaseParser.LIMIT, 0); }
		public TerminalNode LINES() { return getToken(SqlBaseParser.LINES, 0); }
		public TerminalNode LIST() { return getToken(SqlBaseParser.LIST, 0); }
		public TerminalNode LOAD() { return getToken(SqlBaseParser.LOAD, 0); }
		public TerminalNode LOCAL() { return getToken(SqlBaseParser.LOCAL, 0); }
		public TerminalNode LOCATION() { return getToken(SqlBaseParser.LOCATION, 0); }
		public TerminalNode LOCK() { return getToken(SqlBaseParser.LOCK, 0); }
		public TerminalNode LOCKS() { return getToken(SqlBaseParser.LOCKS, 0); }
		public TerminalNode LOGICAL() { return getToken(SqlBaseParser.LOGICAL, 0); }
		public TerminalNode MACRO() { return getToken(SqlBaseParser.MACRO, 0); }
		public TerminalNode MAP() { return getToken(SqlBaseParser.MAP, 0); }
		public TerminalNode MATCHED() { return getToken(SqlBaseParser.MATCHED, 0); }
		public TerminalNode MERGE() { return getToken(SqlBaseParser.MERGE, 0); }
		public TerminalNode MICROSECOND() { return getToken(SqlBaseParser.MICROSECOND, 0); }
		public TerminalNode MICROSECONDS() { return getToken(SqlBaseParser.MICROSECONDS, 0); }
		public TerminalNode MILLISECOND() { return getToken(SqlBaseParser.MILLISECOND, 0); }
		public TerminalNode MILLISECONDS() { return getToken(SqlBaseParser.MILLISECONDS, 0); }
		public TerminalNode MINUTE() { return getToken(SqlBaseParser.MINUTE, 0); }
		public TerminalNode MINUTES() { return getToken(SqlBaseParser.MINUTES, 0); }
		public TerminalNode MONTH() { return getToken(SqlBaseParser.MONTH, 0); }
		public TerminalNode MONTHS() { return getToken(SqlBaseParser.MONTHS, 0); }
		public TerminalNode MSCK() { return getToken(SqlBaseParser.MSCK, 0); }
		public TerminalNode NAMESPACE() { return getToken(SqlBaseParser.NAMESPACE, 0); }
		public TerminalNode NAMESPACES() { return getToken(SqlBaseParser.NAMESPACES, 0); }
		public TerminalNode NANOSECOND() { return getToken(SqlBaseParser.NANOSECOND, 0); }
		public TerminalNode NANOSECONDS() { return getToken(SqlBaseParser.NANOSECONDS, 0); }
		public TerminalNode NO() { return getToken(SqlBaseParser.NO, 0); }
		public TerminalNode NULLS() { return getToken(SqlBaseParser.NULLS, 0); }
		public TerminalNode OF() { return getToken(SqlBaseParser.OF, 0); }
		public TerminalNode OPTION() { return getToken(SqlBaseParser.OPTION, 0); }
		public TerminalNode OPTIONS() { return getToken(SqlBaseParser.OPTIONS, 0); }
		public TerminalNode OUT() { return getToken(SqlBaseParser.OUT, 0); }
		public TerminalNode OUTPUTFORMAT() { return getToken(SqlBaseParser.OUTPUTFORMAT, 0); }
		public TerminalNode OVER() { return getToken(SqlBaseParser.OVER, 0); }
		public TerminalNode OVERLAY() { return getToken(SqlBaseParser.OVERLAY, 0); }
		public TerminalNode OVERWRITE() { return getToken(SqlBaseParser.OVERWRITE, 0); }
		public TerminalNode PARTITION() { return getToken(SqlBaseParser.PARTITION, 0); }
		public TerminalNode PARTITIONED() { return getToken(SqlBaseParser.PARTITIONED, 0); }
		public TerminalNode PARTITIONS() { return getToken(SqlBaseParser.PARTITIONS, 0); }
		public TerminalNode PERCENTLIT() { return getToken(SqlBaseParser.PERCENTLIT, 0); }
		public TerminalNode PIVOT() { return getToken(SqlBaseParser.PIVOT, 0); }
		public TerminalNode PLACING() { return getToken(SqlBaseParser.PLACING, 0); }
		public TerminalNode POSITION() { return getToken(SqlBaseParser.POSITION, 0); }
		public TerminalNode PRECEDING() { return getToken(SqlBaseParser.PRECEDING, 0); }
		public TerminalNode PRINCIPALS() { return getToken(SqlBaseParser.PRINCIPALS, 0); }
		public TerminalNode PROPERTIES() { return getToken(SqlBaseParser.PROPERTIES, 0); }
		public TerminalNode PURGE() { return getToken(SqlBaseParser.PURGE, 0); }
		public TerminalNode QUARTER() { return getToken(SqlBaseParser.QUARTER, 0); }
		public TerminalNode QUERY() { return getToken(SqlBaseParser.QUERY, 0); }
		public TerminalNode RANGE() { return getToken(SqlBaseParser.RANGE, 0); }
		public TerminalNode RECORDREADER() { return getToken(SqlBaseParser.RECORDREADER, 0); }
		public TerminalNode RECORDWRITER() { return getToken(SqlBaseParser.RECORDWRITER, 0); }
		public TerminalNode RECOVER() { return getToken(SqlBaseParser.RECOVER, 0); }
		public TerminalNode REDUCE() { return getToken(SqlBaseParser.REDUCE, 0); }
		public TerminalNode REFRESH() { return getToken(SqlBaseParser.REFRESH, 0); }
		public TerminalNode RENAME() { return getToken(SqlBaseParser.RENAME, 0); }
		public TerminalNode REPAIR() { return getToken(SqlBaseParser.REPAIR, 0); }
		public TerminalNode REPEATABLE() { return getToken(SqlBaseParser.REPEATABLE, 0); }
		public TerminalNode REPLACE() { return getToken(SqlBaseParser.REPLACE, 0); }
		public TerminalNode RESET() { return getToken(SqlBaseParser.RESET, 0); }
		public TerminalNode RESPECT() { return getToken(SqlBaseParser.RESPECT, 0); }
		public TerminalNode RESTRICT() { return getToken(SqlBaseParser.RESTRICT, 0); }
		public TerminalNode REVOKE() { return getToken(SqlBaseParser.REVOKE, 0); }
		public TerminalNode RLIKE() { return getToken(SqlBaseParser.RLIKE, 0); }
		public TerminalNode ROLE() { return getToken(SqlBaseParser.ROLE, 0); }
		public TerminalNode ROLES() { return getToken(SqlBaseParser.ROLES, 0); }
		public TerminalNode ROLLBACK() { return getToken(SqlBaseParser.ROLLBACK, 0); }
		public TerminalNode ROLLUP() { return getToken(SqlBaseParser.ROLLUP, 0); }
		public TerminalNode ROW() { return getToken(SqlBaseParser.ROW, 0); }
		public TerminalNode ROWS() { return getToken(SqlBaseParser.ROWS, 0); }
		public TerminalNode SCHEMA() { return getToken(SqlBaseParser.SCHEMA, 0); }
		public TerminalNode SCHEMAS() { return getToken(SqlBaseParser.SCHEMAS, 0); }
		public TerminalNode SECOND() { return getToken(SqlBaseParser.SECOND, 0); }
		public TerminalNode SECONDS() { return getToken(SqlBaseParser.SECONDS, 0); }
		public TerminalNode SEMI() { return getToken(SqlBaseParser.SEMI, 0); }
		public TerminalNode SEPARATED() { return getToken(SqlBaseParser.SEPARATED, 0); }
		public TerminalNode SERDE() { return getToken(SqlBaseParser.SERDE, 0); }
		public TerminalNode SERDEPROPERTIES() { return getToken(SqlBaseParser.SERDEPROPERTIES, 0); }
		public TerminalNode SET() { return getToken(SqlBaseParser.SET, 0); }
		public TerminalNode SETMINUS() { return getToken(SqlBaseParser.SETMINUS, 0); }
		public TerminalNode SETS() { return getToken(SqlBaseParser.SETS, 0); }
		public TerminalNode SHOW() { return getToken(SqlBaseParser.SHOW, 0); }
		public TerminalNode SKEWED() { return getToken(SqlBaseParser.SKEWED, 0); }
		public TerminalNode SORT() { return getToken(SqlBaseParser.SORT, 0); }
		public TerminalNode SORTED() { return getToken(SqlBaseParser.SORTED, 0); }
		public TerminalNode SOURCE() { return getToken(SqlBaseParser.SOURCE, 0); }
		public TerminalNode START() { return getToken(SqlBaseParser.START, 0); }
		public TerminalNode STATISTICS() { return getToken(SqlBaseParser.STATISTICS, 0); }
		public TerminalNode STORED() { return getToken(SqlBaseParser.STORED, 0); }
		public TerminalNode STRATIFY() { return getToken(SqlBaseParser.STRATIFY, 0); }
		public TerminalNode STRUCT() { return getToken(SqlBaseParser.STRUCT, 0); }
		public TerminalNode SUBSTR() { return getToken(SqlBaseParser.SUBSTR, 0); }
		public TerminalNode SUBSTRING() { return getToken(SqlBaseParser.SUBSTRING, 0); }
		public TerminalNode SYNC() { return getToken(SqlBaseParser.SYNC, 0); }
		public TerminalNode SYSTEM_TIME() { return getToken(SqlBaseParser.SYSTEM_TIME, 0); }
		public TerminalNode SYSTEM_VERSION() { return getToken(SqlBaseParser.SYSTEM_VERSION, 0); }
		public TerminalNode TABLES() { return getToken(SqlBaseParser.TABLES, 0); }
		public TerminalNode TABLESAMPLE() { return getToken(SqlBaseParser.TABLESAMPLE, 0); }
		public TerminalNode TARGET() { return getToken(SqlBaseParser.TARGET, 0); }
		public TerminalNode TBLPROPERTIES() { return getToken(SqlBaseParser.TBLPROPERTIES, 0); }
		public TerminalNode TEMPORARY() { return getToken(SqlBaseParser.TEMPORARY, 0); }
		public TerminalNode TERMINATED() { return getToken(SqlBaseParser.TERMINATED, 0); }
		public TerminalNode TIMESTAMP() { return getToken(SqlBaseParser.TIMESTAMP, 0); }
		public TerminalNode TIMESTAMPADD() { return getToken(SqlBaseParser.TIMESTAMPADD, 0); }
		public TerminalNode TIMESTAMPDIFF() { return getToken(SqlBaseParser.TIMESTAMPDIFF, 0); }
		public TerminalNode TOUCH() { return getToken(SqlBaseParser.TOUCH, 0); }
		public TerminalNode TRANSACTION() { return getToken(SqlBaseParser.TRANSACTION, 0); }
		public TerminalNode TRANSACTIONS() { return getToken(SqlBaseParser.TRANSACTIONS, 0); }
		public TerminalNode TRANSFORM() { return getToken(SqlBaseParser.TRANSFORM, 0); }
		public TerminalNode TRIM() { return getToken(SqlBaseParser.TRIM, 0); }
		public TerminalNode TRUE() { return getToken(SqlBaseParser.TRUE, 0); }
		public TerminalNode TRUNCATE() { return getToken(SqlBaseParser.TRUNCATE, 0); }
		public TerminalNode TRY_CAST() { return getToken(SqlBaseParser.TRY_CAST, 0); }
		public TerminalNode TYPE() { return getToken(SqlBaseParser.TYPE, 0); }
		public TerminalNode UNARCHIVE() { return getToken(SqlBaseParser.UNARCHIVE, 0); }
		public TerminalNode UNBOUNDED() { return getToken(SqlBaseParser.UNBOUNDED, 0); }
		public TerminalNode UNCACHE() { return getToken(SqlBaseParser.UNCACHE, 0); }
		public TerminalNode UNLOCK() { return getToken(SqlBaseParser.UNLOCK, 0); }
		public TerminalNode UNPIVOT() { return getToken(SqlBaseParser.UNPIVOT, 0); }
		public TerminalNode UNSET() { return getToken(SqlBaseParser.UNSET, 0); }
		public TerminalNode UPDATE() { return getToken(SqlBaseParser.UPDATE, 0); }
		public TerminalNode USE() { return getToken(SqlBaseParser.USE, 0); }
		public TerminalNode VALUES() { return getToken(SqlBaseParser.VALUES, 0); }
		public TerminalNode VERSION() { return getToken(SqlBaseParser.VERSION, 0); }
		public TerminalNode VIEW() { return getToken(SqlBaseParser.VIEW, 0); }
		public TerminalNode VIEWS() { return getToken(SqlBaseParser.VIEWS, 0); }
		public TerminalNode WEEK() { return getToken(SqlBaseParser.WEEK, 0); }
		public TerminalNode WEEKS() { return getToken(SqlBaseParser.WEEKS, 0); }
		public TerminalNode WINDOW() { return getToken(SqlBaseParser.WINDOW, 0); }
		public TerminalNode YEAR() { return getToken(SqlBaseParser.YEAR, 0); }
		public TerminalNode YEARS() { return getToken(SqlBaseParser.YEARS, 0); }
		public TerminalNode ZONE() { return getToken(SqlBaseParser.ZONE, 0); }
		public AnsiNonReservedContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ansiNonReserved; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterAnsiNonReserved(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitAnsiNonReserved(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitAnsiNonReserved(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AnsiNonReservedContext ansiNonReserved() throws RecognitionException {
		AnsiNonReservedContext _localctx = new AnsiNonReservedContext(_ctx, getState());
		enterRule(_localctx, 358, RULE_ansiNonReserved);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3634);
			_la = _input.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 7349166091306713088L) != 0) || ((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & -2355607283540688897L) != 0) || ((((_la - 131)) & ~0x3f) == 0 && ((1L << (_la - 131)) & -5420539548377654691L) != 0) || ((((_la - 195)) & ~0x3f) == 0 && ((1L << (_la - 195)) & -36609343457593393L) != 0) || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & 32227220532875231L) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class StrictNonReservedContext extends ParserRuleContext {
		public TerminalNode ANTI() { return getToken(SqlBaseParser.ANTI, 0); }
		public TerminalNode CROSS() { return getToken(SqlBaseParser.CROSS, 0); }
		public TerminalNode EXCEPT() { return getToken(SqlBaseParser.EXCEPT, 0); }
		public TerminalNode FULL() { return getToken(SqlBaseParser.FULL, 0); }
		public TerminalNode INNER() { return getToken(SqlBaseParser.INNER, 0); }
		public TerminalNode INTERSECT() { return getToken(SqlBaseParser.INTERSECT, 0); }
		public TerminalNode JOIN() { return getToken(SqlBaseParser.JOIN, 0); }
		public TerminalNode LATERAL() { return getToken(SqlBaseParser.LATERAL, 0); }
		public TerminalNode LEFT() { return getToken(SqlBaseParser.LEFT, 0); }
		public TerminalNode NATURAL() { return getToken(SqlBaseParser.NATURAL, 0); }
		public TerminalNode ON() { return getToken(SqlBaseParser.ON, 0); }
		public TerminalNode RIGHT() { return getToken(SqlBaseParser.RIGHT, 0); }
		public TerminalNode SEMI() { return getToken(SqlBaseParser.SEMI, 0); }
		public TerminalNode SETMINUS() { return getToken(SqlBaseParser.SETMINUS, 0); }
		public TerminalNode UNION() { return getToken(SqlBaseParser.UNION, 0); }
		public TerminalNode USING() { return getToken(SqlBaseParser.USING, 0); }
		public StrictNonReservedContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_strictNonReserved; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterStrictNonReserved(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitStrictNonReserved(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitStrictNonReserved(this);
			else return visitor.visitChildren(this);
		}
	}

	public final StrictNonReservedContext strictNonReserved() throws RecognitionException {
		StrictNonReservedContext _localctx = new StrictNonReservedContext(_ctx, getState());
		enterRule(_localctx, 360, RULE_strictNonReserved);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3636);
			_la = _input.LA(1);
			if ( !(_la==ANTI || _la==CROSS || ((((_la - 93)) & ~0x3f) == 0 && ((1L << (_la - 93)) & 20557019150811137L) != 0) || ((((_la - 176)) & ~0x3f) == 0 && ((1L << (_la - 176)) & 2251799813685377L) != 0) || ((((_la - 240)) & ~0x3f) == 0 && ((1L << (_la - 240)) & 577586652210266177L) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class NonReservedContext extends ParserRuleContext {
		public TerminalNode ADD() { return getToken(SqlBaseParser.ADD, 0); }
		public TerminalNode AFTER() { return getToken(SqlBaseParser.AFTER, 0); }
		public TerminalNode ALL() { return getToken(SqlBaseParser.ALL, 0); }
		public TerminalNode ALTER() { return getToken(SqlBaseParser.ALTER, 0); }
		public TerminalNode ALWAYS() { return getToken(SqlBaseParser.ALWAYS, 0); }
		public TerminalNode ANALYZE() { return getToken(SqlBaseParser.ANALYZE, 0); }
		public TerminalNode AND() { return getToken(SqlBaseParser.AND, 0); }
		public TerminalNode ANY() { return getToken(SqlBaseParser.ANY, 0); }
		public TerminalNode ANY_VALUE() { return getToken(SqlBaseParser.ANY_VALUE, 0); }
		public TerminalNode ARCHIVE() { return getToken(SqlBaseParser.ARCHIVE, 0); }
		public TerminalNode ARRAY() { return getToken(SqlBaseParser.ARRAY, 0); }
		public TerminalNode AS() { return getToken(SqlBaseParser.AS, 0); }
		public TerminalNode ASC() { return getToken(SqlBaseParser.ASC, 0); }
		public TerminalNode AT() { return getToken(SqlBaseParser.AT, 0); }
		public TerminalNode AUTHORIZATION() { return getToken(SqlBaseParser.AUTHORIZATION, 0); }
		public TerminalNode BETWEEN() { return getToken(SqlBaseParser.BETWEEN, 0); }
		public TerminalNode BOTH() { return getToken(SqlBaseParser.BOTH, 0); }
		public TerminalNode BUCKET() { return getToken(SqlBaseParser.BUCKET, 0); }
		public TerminalNode BUCKETS() { return getToken(SqlBaseParser.BUCKETS, 0); }
		public TerminalNode BY() { return getToken(SqlBaseParser.BY, 0); }
		public TerminalNode CACHE() { return getToken(SqlBaseParser.CACHE, 0); }
		public TerminalNode CASCADE() { return getToken(SqlBaseParser.CASCADE, 0); }
		public TerminalNode CASE() { return getToken(SqlBaseParser.CASE, 0); }
		public TerminalNode CAST() { return getToken(SqlBaseParser.CAST, 0); }
		public TerminalNode CATALOG() { return getToken(SqlBaseParser.CATALOG, 0); }
		public TerminalNode CATALOGS() { return getToken(SqlBaseParser.CATALOGS, 0); }
		public TerminalNode CHANGE() { return getToken(SqlBaseParser.CHANGE, 0); }
		public TerminalNode CHECK() { return getToken(SqlBaseParser.CHECK, 0); }
		public TerminalNode CLEAR() { return getToken(SqlBaseParser.CLEAR, 0); }
		public TerminalNode CLUSTER() { return getToken(SqlBaseParser.CLUSTER, 0); }
		public TerminalNode CLUSTERED() { return getToken(SqlBaseParser.CLUSTERED, 0); }
		public TerminalNode CODEGEN() { return getToken(SqlBaseParser.CODEGEN, 0); }
		public TerminalNode COLLATE() { return getToken(SqlBaseParser.COLLATE, 0); }
		public TerminalNode COLLECTION() { return getToken(SqlBaseParser.COLLECTION, 0); }
		public TerminalNode COLUMN() { return getToken(SqlBaseParser.COLUMN, 0); }
		public TerminalNode COLUMNS() { return getToken(SqlBaseParser.COLUMNS, 0); }
		public TerminalNode COMMENT() { return getToken(SqlBaseParser.COMMENT, 0); }
		public TerminalNode COMMIT() { return getToken(SqlBaseParser.COMMIT, 0); }
		public TerminalNode COMPACT() { return getToken(SqlBaseParser.COMPACT, 0); }
		public TerminalNode COMPACTIONS() { return getToken(SqlBaseParser.COMPACTIONS, 0); }
		public TerminalNode COMPUTE() { return getToken(SqlBaseParser.COMPUTE, 0); }
		public TerminalNode CONCATENATE() { return getToken(SqlBaseParser.CONCATENATE, 0); }
		public TerminalNode CONSTRAINT() { return getToken(SqlBaseParser.CONSTRAINT, 0); }
		public TerminalNode COST() { return getToken(SqlBaseParser.COST, 0); }
		public TerminalNode CREATE() { return getToken(SqlBaseParser.CREATE, 0); }
		public TerminalNode CUBE() { return getToken(SqlBaseParser.CUBE, 0); }
		public TerminalNode CURRENT() { return getToken(SqlBaseParser.CURRENT, 0); }
		public TerminalNode CURRENT_DATE() { return getToken(SqlBaseParser.CURRENT_DATE, 0); }
		public TerminalNode CURRENT_TIME() { return getToken(SqlBaseParser.CURRENT_TIME, 0); }
		public TerminalNode CURRENT_TIMESTAMP() { return getToken(SqlBaseParser.CURRENT_TIMESTAMP, 0); }
		public TerminalNode CURRENT_USER() { return getToken(SqlBaseParser.CURRENT_USER, 0); }
		public TerminalNode DATA() { return getToken(SqlBaseParser.DATA, 0); }
		public TerminalNode DATABASE() { return getToken(SqlBaseParser.DATABASE, 0); }
		public TerminalNode DATABASES() { return getToken(SqlBaseParser.DATABASES, 0); }
		public TerminalNode DATEADD() { return getToken(SqlBaseParser.DATEADD, 0); }
		public TerminalNode DATEDIFF() { return getToken(SqlBaseParser.DATEDIFF, 0); }
		public TerminalNode DAY() { return getToken(SqlBaseParser.DAY, 0); }
		public TerminalNode DAYS() { return getToken(SqlBaseParser.DAYS, 0); }
		public TerminalNode DAYOFYEAR() { return getToken(SqlBaseParser.DAYOFYEAR, 0); }
		public TerminalNode DBPROPERTIES() { return getToken(SqlBaseParser.DBPROPERTIES, 0); }
		public TerminalNode DEFAULT() { return getToken(SqlBaseParser.DEFAULT, 0); }
		public TerminalNode DEFINED() { return getToken(SqlBaseParser.DEFINED, 0); }
		public TerminalNode DELETE() { return getToken(SqlBaseParser.DELETE, 0); }
		public TerminalNode DELIMITED() { return getToken(SqlBaseParser.DELIMITED, 0); }
		public TerminalNode DESC() { return getToken(SqlBaseParser.DESC, 0); }
		public TerminalNode DESCRIBE() { return getToken(SqlBaseParser.DESCRIBE, 0); }
		public TerminalNode DFS() { return getToken(SqlBaseParser.DFS, 0); }
		public TerminalNode DIRECTORIES() { return getToken(SqlBaseParser.DIRECTORIES, 0); }
		public TerminalNode DIRECTORY() { return getToken(SqlBaseParser.DIRECTORY, 0); }
		public TerminalNode DISTINCT() { return getToken(SqlBaseParser.DISTINCT, 0); }
		public TerminalNode DISTRIBUTE() { return getToken(SqlBaseParser.DISTRIBUTE, 0); }
		public TerminalNode DIV() { return getToken(SqlBaseParser.DIV, 0); }
		public TerminalNode DROP() { return getToken(SqlBaseParser.DROP, 0); }
		public TerminalNode ELSE() { return getToken(SqlBaseParser.ELSE, 0); }
		public TerminalNode END() { return getToken(SqlBaseParser.END, 0); }
		public TerminalNode ESCAPE() { return getToken(SqlBaseParser.ESCAPE, 0); }
		public TerminalNode ESCAPED() { return getToken(SqlBaseParser.ESCAPED, 0); }
		public TerminalNode EXCHANGE() { return getToken(SqlBaseParser.EXCHANGE, 0); }
		public TerminalNode EXCLUDE() { return getToken(SqlBaseParser.EXCLUDE, 0); }
		public TerminalNode EXISTS() { return getToken(SqlBaseParser.EXISTS, 0); }
		public TerminalNode EXPLAIN() { return getToken(SqlBaseParser.EXPLAIN, 0); }
		public TerminalNode EXPORT() { return getToken(SqlBaseParser.EXPORT, 0); }
		public TerminalNode EXTENDED() { return getToken(SqlBaseParser.EXTENDED, 0); }
		public TerminalNode EXTERNAL() { return getToken(SqlBaseParser.EXTERNAL, 0); }
		public TerminalNode EXTRACT() { return getToken(SqlBaseParser.EXTRACT, 0); }
		public TerminalNode FALSE() { return getToken(SqlBaseParser.FALSE, 0); }
		public TerminalNode FETCH() { return getToken(SqlBaseParser.FETCH, 0); }
		public TerminalNode FILTER() { return getToken(SqlBaseParser.FILTER, 0); }
		public TerminalNode FIELDS() { return getToken(SqlBaseParser.FIELDS, 0); }
		public TerminalNode FILEFORMAT() { return getToken(SqlBaseParser.FILEFORMAT, 0); }
		public TerminalNode FIRST() { return getToken(SqlBaseParser.FIRST, 0); }
		public TerminalNode FOLLOWING() { return getToken(SqlBaseParser.FOLLOWING, 0); }
		public TerminalNode FOR() { return getToken(SqlBaseParser.FOR, 0); }
		public TerminalNode FOREIGN() { return getToken(SqlBaseParser.FOREIGN, 0); }
		public TerminalNode FORMAT() { return getToken(SqlBaseParser.FORMAT, 0); }
		public TerminalNode FORMATTED() { return getToken(SqlBaseParser.FORMATTED, 0); }
		public TerminalNode FROM() { return getToken(SqlBaseParser.FROM, 0); }
		public TerminalNode FUNCTION() { return getToken(SqlBaseParser.FUNCTION, 0); }
		public TerminalNode FUNCTIONS() { return getToken(SqlBaseParser.FUNCTIONS, 0); }
		public TerminalNode GENERATED() { return getToken(SqlBaseParser.GENERATED, 0); }
		public TerminalNode GLOBAL() { return getToken(SqlBaseParser.GLOBAL, 0); }
		public TerminalNode GRANT() { return getToken(SqlBaseParser.GRANT, 0); }
		public TerminalNode GROUP() { return getToken(SqlBaseParser.GROUP, 0); }
		public TerminalNode GROUPING() { return getToken(SqlBaseParser.GROUPING, 0); }
		public TerminalNode HAVING() { return getToken(SqlBaseParser.HAVING, 0); }
		public TerminalNode HOUR() { return getToken(SqlBaseParser.HOUR, 0); }
		public TerminalNode HOURS() { return getToken(SqlBaseParser.HOURS, 0); }
		public TerminalNode IF() { return getToken(SqlBaseParser.IF, 0); }
		public TerminalNode IGNORE() { return getToken(SqlBaseParser.IGNORE, 0); }
		public TerminalNode IMPORT() { return getToken(SqlBaseParser.IMPORT, 0); }
		public TerminalNode IN() { return getToken(SqlBaseParser.IN, 0); }
		public TerminalNode INCLUDE() { return getToken(SqlBaseParser.INCLUDE, 0); }
		public TerminalNode INDEX() { return getToken(SqlBaseParser.INDEX, 0); }
		public TerminalNode INDEXES() { return getToken(SqlBaseParser.INDEXES, 0); }
		public TerminalNode INPATH() { return getToken(SqlBaseParser.INPATH, 0); }
		public TerminalNode INPUTFORMAT() { return getToken(SqlBaseParser.INPUTFORMAT, 0); }
		public TerminalNode INSERT() { return getToken(SqlBaseParser.INSERT, 0); }
		public TerminalNode INTERVAL() { return getToken(SqlBaseParser.INTERVAL, 0); }
		public TerminalNode INTO() { return getToken(SqlBaseParser.INTO, 0); }
		public TerminalNode IS() { return getToken(SqlBaseParser.IS, 0); }
		public TerminalNode ITEMS() { return getToken(SqlBaseParser.ITEMS, 0); }
		public TerminalNode KEYS() { return getToken(SqlBaseParser.KEYS, 0); }
		public TerminalNode LAST() { return getToken(SqlBaseParser.LAST, 0); }
		public TerminalNode LAZY() { return getToken(SqlBaseParser.LAZY, 0); }
		public TerminalNode LEADING() { return getToken(SqlBaseParser.LEADING, 0); }
		public TerminalNode LIKE() { return getToken(SqlBaseParser.LIKE, 0); }
		public TerminalNode ILIKE() { return getToken(SqlBaseParser.ILIKE, 0); }
		public TerminalNode LIMIT() { return getToken(SqlBaseParser.LIMIT, 0); }
		public TerminalNode LINES() { return getToken(SqlBaseParser.LINES, 0); }
		public TerminalNode LIST() { return getToken(SqlBaseParser.LIST, 0); }
		public TerminalNode LOAD() { return getToken(SqlBaseParser.LOAD, 0); }
		public TerminalNode LOCAL() { return getToken(SqlBaseParser.LOCAL, 0); }
		public TerminalNode LOCATION() { return getToken(SqlBaseParser.LOCATION, 0); }
		public TerminalNode LOCK() { return getToken(SqlBaseParser.LOCK, 0); }
		public TerminalNode LOCKS() { return getToken(SqlBaseParser.LOCKS, 0); }
		public TerminalNode LOGICAL() { return getToken(SqlBaseParser.LOGICAL, 0); }
		public TerminalNode MACRO() { return getToken(SqlBaseParser.MACRO, 0); }
		public TerminalNode MAP() { return getToken(SqlBaseParser.MAP, 0); }
		public TerminalNode MATCHED() { return getToken(SqlBaseParser.MATCHED, 0); }
		public TerminalNode MERGE() { return getToken(SqlBaseParser.MERGE, 0); }
		public TerminalNode MICROSECOND() { return getToken(SqlBaseParser.MICROSECOND, 0); }
		public TerminalNode MICROSECONDS() { return getToken(SqlBaseParser.MICROSECONDS, 0); }
		public TerminalNode MILLISECOND() { return getToken(SqlBaseParser.MILLISECOND, 0); }
		public TerminalNode MILLISECONDS() { return getToken(SqlBaseParser.MILLISECONDS, 0); }
		public TerminalNode MINUTE() { return getToken(SqlBaseParser.MINUTE, 0); }
		public TerminalNode MINUTES() { return getToken(SqlBaseParser.MINUTES, 0); }
		public TerminalNode MONTH() { return getToken(SqlBaseParser.MONTH, 0); }
		public TerminalNode MONTHS() { return getToken(SqlBaseParser.MONTHS, 0); }
		public TerminalNode MSCK() { return getToken(SqlBaseParser.MSCK, 0); }
		public TerminalNode NAMESPACE() { return getToken(SqlBaseParser.NAMESPACE, 0); }
		public TerminalNode NAMESPACES() { return getToken(SqlBaseParser.NAMESPACES, 0); }
		public TerminalNode NANOSECOND() { return getToken(SqlBaseParser.NANOSECOND, 0); }
		public TerminalNode NANOSECONDS() { return getToken(SqlBaseParser.NANOSECONDS, 0); }
		public TerminalNode NO() { return getToken(SqlBaseParser.NO, 0); }
		public TerminalNode NOT() { return getToken(SqlBaseParser.NOT, 0); }
		public TerminalNode NULL() { return getToken(SqlBaseParser.NULL, 0); }
		public TerminalNode NULLS() { return getToken(SqlBaseParser.NULLS, 0); }
		public TerminalNode OF() { return getToken(SqlBaseParser.OF, 0); }
		public TerminalNode OFFSET() { return getToken(SqlBaseParser.OFFSET, 0); }
		public TerminalNode ONLY() { return getToken(SqlBaseParser.ONLY, 0); }
		public TerminalNode OPTION() { return getToken(SqlBaseParser.OPTION, 0); }
		public TerminalNode OPTIONS() { return getToken(SqlBaseParser.OPTIONS, 0); }
		public TerminalNode OR() { return getToken(SqlBaseParser.OR, 0); }
		public TerminalNode ORDER() { return getToken(SqlBaseParser.ORDER, 0); }
		public TerminalNode OUT() { return getToken(SqlBaseParser.OUT, 0); }
		public TerminalNode OUTER() { return getToken(SqlBaseParser.OUTER, 0); }
		public TerminalNode OUTPUTFORMAT() { return getToken(SqlBaseParser.OUTPUTFORMAT, 0); }
		public TerminalNode OVER() { return getToken(SqlBaseParser.OVER, 0); }
		public TerminalNode OVERLAPS() { return getToken(SqlBaseParser.OVERLAPS, 0); }
		public TerminalNode OVERLAY() { return getToken(SqlBaseParser.OVERLAY, 0); }
		public TerminalNode OVERWRITE() { return getToken(SqlBaseParser.OVERWRITE, 0); }
		public TerminalNode PARTITION() { return getToken(SqlBaseParser.PARTITION, 0); }
		public TerminalNode PARTITIONED() { return getToken(SqlBaseParser.PARTITIONED, 0); }
		public TerminalNode PARTITIONS() { return getToken(SqlBaseParser.PARTITIONS, 0); }
		public TerminalNode PERCENTILE_CONT() { return getToken(SqlBaseParser.PERCENTILE_CONT, 0); }
		public TerminalNode PERCENTILE_DISC() { return getToken(SqlBaseParser.PERCENTILE_DISC, 0); }
		public TerminalNode PERCENTLIT() { return getToken(SqlBaseParser.PERCENTLIT, 0); }
		public TerminalNode PIVOT() { return getToken(SqlBaseParser.PIVOT, 0); }
		public TerminalNode PLACING() { return getToken(SqlBaseParser.PLACING, 0); }
		public TerminalNode POSITION() { return getToken(SqlBaseParser.POSITION, 0); }
		public TerminalNode PRECEDING() { return getToken(SqlBaseParser.PRECEDING, 0); }
		public TerminalNode PRIMARY() { return getToken(SqlBaseParser.PRIMARY, 0); }
		public TerminalNode PRINCIPALS() { return getToken(SqlBaseParser.PRINCIPALS, 0); }
		public TerminalNode PROPERTIES() { return getToken(SqlBaseParser.PROPERTIES, 0); }
		public TerminalNode PURGE() { return getToken(SqlBaseParser.PURGE, 0); }
		public TerminalNode QUARTER() { return getToken(SqlBaseParser.QUARTER, 0); }
		public TerminalNode QUERY() { return getToken(SqlBaseParser.QUERY, 0); }
		public TerminalNode RANGE() { return getToken(SqlBaseParser.RANGE, 0); }
		public TerminalNode RECORDREADER() { return getToken(SqlBaseParser.RECORDREADER, 0); }
		public TerminalNode RECORDWRITER() { return getToken(SqlBaseParser.RECORDWRITER, 0); }
		public TerminalNode RECOVER() { return getToken(SqlBaseParser.RECOVER, 0); }
		public TerminalNode REDUCE() { return getToken(SqlBaseParser.REDUCE, 0); }
		public TerminalNode REFERENCES() { return getToken(SqlBaseParser.REFERENCES, 0); }
		public TerminalNode REFRESH() { return getToken(SqlBaseParser.REFRESH, 0); }
		public TerminalNode RENAME() { return getToken(SqlBaseParser.RENAME, 0); }
		public TerminalNode REPAIR() { return getToken(SqlBaseParser.REPAIR, 0); }
		public TerminalNode REPEATABLE() { return getToken(SqlBaseParser.REPEATABLE, 0); }
		public TerminalNode REPLACE() { return getToken(SqlBaseParser.REPLACE, 0); }
		public TerminalNode RESET() { return getToken(SqlBaseParser.RESET, 0); }
		public TerminalNode RESPECT() { return getToken(SqlBaseParser.RESPECT, 0); }
		public TerminalNode RESTRICT() { return getToken(SqlBaseParser.RESTRICT, 0); }
		public TerminalNode REVOKE() { return getToken(SqlBaseParser.REVOKE, 0); }
		public TerminalNode RLIKE() { return getToken(SqlBaseParser.RLIKE, 0); }
		public TerminalNode ROLE() { return getToken(SqlBaseParser.ROLE, 0); }
		public TerminalNode ROLES() { return getToken(SqlBaseParser.ROLES, 0); }
		public TerminalNode ROLLBACK() { return getToken(SqlBaseParser.ROLLBACK, 0); }
		public TerminalNode ROLLUP() { return getToken(SqlBaseParser.ROLLUP, 0); }
		public TerminalNode ROW() { return getToken(SqlBaseParser.ROW, 0); }
		public TerminalNode ROWS() { return getToken(SqlBaseParser.ROWS, 0); }
		public TerminalNode SCHEMA() { return getToken(SqlBaseParser.SCHEMA, 0); }
		public TerminalNode SCHEMAS() { return getToken(SqlBaseParser.SCHEMAS, 0); }
		public TerminalNode SECOND() { return getToken(SqlBaseParser.SECOND, 0); }
		public TerminalNode SECONDS() { return getToken(SqlBaseParser.SECONDS, 0); }
		public TerminalNode SELECT() { return getToken(SqlBaseParser.SELECT, 0); }
		public TerminalNode SEPARATED() { return getToken(SqlBaseParser.SEPARATED, 0); }
		public TerminalNode SERDE() { return getToken(SqlBaseParser.SERDE, 0); }
		public TerminalNode SERDEPROPERTIES() { return getToken(SqlBaseParser.SERDEPROPERTIES, 0); }
		public TerminalNode SESSION_USER() { return getToken(SqlBaseParser.SESSION_USER, 0); }
		public TerminalNode SET() { return getToken(SqlBaseParser.SET, 0); }
		public TerminalNode SETS() { return getToken(SqlBaseParser.SETS, 0); }
		public TerminalNode SHOW() { return getToken(SqlBaseParser.SHOW, 0); }
		public TerminalNode SKEWED() { return getToken(SqlBaseParser.SKEWED, 0); }
		public TerminalNode SOME() { return getToken(SqlBaseParser.SOME, 0); }
		public TerminalNode SORT() { return getToken(SqlBaseParser.SORT, 0); }
		public TerminalNode SORTED() { return getToken(SqlBaseParser.SORTED, 0); }
		public TerminalNode SOURCE() { return getToken(SqlBaseParser.SOURCE, 0); }
		public TerminalNode START() { return getToken(SqlBaseParser.START, 0); }
		public TerminalNode STATISTICS() { return getToken(SqlBaseParser.STATISTICS, 0); }
		public TerminalNode STORED() { return getToken(SqlBaseParser.STORED, 0); }
		public TerminalNode STRATIFY() { return getToken(SqlBaseParser.STRATIFY, 0); }
		public TerminalNode STRUCT() { return getToken(SqlBaseParser.STRUCT, 0); }
		public TerminalNode SUBSTR() { return getToken(SqlBaseParser.SUBSTR, 0); }
		public TerminalNode SUBSTRING() { return getToken(SqlBaseParser.SUBSTRING, 0); }
		public TerminalNode SYNC() { return getToken(SqlBaseParser.SYNC, 0); }
		public TerminalNode SYSTEM_TIME() { return getToken(SqlBaseParser.SYSTEM_TIME, 0); }
		public TerminalNode SYSTEM_VERSION() { return getToken(SqlBaseParser.SYSTEM_VERSION, 0); }
		public TerminalNode TABLE() { return getToken(SqlBaseParser.TABLE, 0); }
		public TerminalNode TABLES() { return getToken(SqlBaseParser.TABLES, 0); }
		public TerminalNode TABLESAMPLE() { return getToken(SqlBaseParser.TABLESAMPLE, 0); }
		public TerminalNode TARGET() { return getToken(SqlBaseParser.TARGET, 0); }
		public TerminalNode TBLPROPERTIES() { return getToken(SqlBaseParser.TBLPROPERTIES, 0); }
		public TerminalNode TEMPORARY() { return getToken(SqlBaseParser.TEMPORARY, 0); }
		public TerminalNode TERMINATED() { return getToken(SqlBaseParser.TERMINATED, 0); }
		public TerminalNode THEN() { return getToken(SqlBaseParser.THEN, 0); }
		public TerminalNode TIME() { return getToken(SqlBaseParser.TIME, 0); }
		public TerminalNode TIMESTAMP() { return getToken(SqlBaseParser.TIMESTAMP, 0); }
		public TerminalNode TIMESTAMPADD() { return getToken(SqlBaseParser.TIMESTAMPADD, 0); }
		public TerminalNode TIMESTAMPDIFF() { return getToken(SqlBaseParser.TIMESTAMPDIFF, 0); }
		public TerminalNode TO() { return getToken(SqlBaseParser.TO, 0); }
		public TerminalNode TOUCH() { return getToken(SqlBaseParser.TOUCH, 0); }
		public TerminalNode TRAILING() { return getToken(SqlBaseParser.TRAILING, 0); }
		public TerminalNode TRANSACTION() { return getToken(SqlBaseParser.TRANSACTION, 0); }
		public TerminalNode TRANSACTIONS() { return getToken(SqlBaseParser.TRANSACTIONS, 0); }
		public TerminalNode TRANSFORM() { return getToken(SqlBaseParser.TRANSFORM, 0); }
		public TerminalNode TRIM() { return getToken(SqlBaseParser.TRIM, 0); }
		public TerminalNode TRUE() { return getToken(SqlBaseParser.TRUE, 0); }
		public TerminalNode TRUNCATE() { return getToken(SqlBaseParser.TRUNCATE, 0); }
		public TerminalNode TRY_CAST() { return getToken(SqlBaseParser.TRY_CAST, 0); }
		public TerminalNode TYPE() { return getToken(SqlBaseParser.TYPE, 0); }
		public TerminalNode UNARCHIVE() { return getToken(SqlBaseParser.UNARCHIVE, 0); }
		public TerminalNode UNBOUNDED() { return getToken(SqlBaseParser.UNBOUNDED, 0); }
		public TerminalNode UNCACHE() { return getToken(SqlBaseParser.UNCACHE, 0); }
		public TerminalNode UNIQUE() { return getToken(SqlBaseParser.UNIQUE, 0); }
		public TerminalNode UNKNOWN() { return getToken(SqlBaseParser.UNKNOWN, 0); }
		public TerminalNode UNLOCK() { return getToken(SqlBaseParser.UNLOCK, 0); }
		public TerminalNode UNPIVOT() { return getToken(SqlBaseParser.UNPIVOT, 0); }
		public TerminalNode UNSET() { return getToken(SqlBaseParser.UNSET, 0); }
		public TerminalNode UPDATE() { return getToken(SqlBaseParser.UPDATE, 0); }
		public TerminalNode USE() { return getToken(SqlBaseParser.USE, 0); }
		public TerminalNode USER() { return getToken(SqlBaseParser.USER, 0); }
		public TerminalNode VALUES() { return getToken(SqlBaseParser.VALUES, 0); }
		public TerminalNode VERSION() { return getToken(SqlBaseParser.VERSION, 0); }
		public TerminalNode VIEW() { return getToken(SqlBaseParser.VIEW, 0); }
		public TerminalNode VIEWS() { return getToken(SqlBaseParser.VIEWS, 0); }
		public TerminalNode WEEK() { return getToken(SqlBaseParser.WEEK, 0); }
		public TerminalNode WEEKS() { return getToken(SqlBaseParser.WEEKS, 0); }
		public TerminalNode WHEN() { return getToken(SqlBaseParser.WHEN, 0); }
		public TerminalNode WHERE() { return getToken(SqlBaseParser.WHERE, 0); }
		public TerminalNode WINDOW() { return getToken(SqlBaseParser.WINDOW, 0); }
		public TerminalNode WITH() { return getToken(SqlBaseParser.WITH, 0); }
		public TerminalNode WITHIN() { return getToken(SqlBaseParser.WITHIN, 0); }
		public TerminalNode YEAR() { return getToken(SqlBaseParser.YEAR, 0); }
		public TerminalNode YEARS() { return getToken(SqlBaseParser.YEARS, 0); }
		public TerminalNode ZONE() { return getToken(SqlBaseParser.ZONE, 0); }
		public NonReservedContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_nonReserved; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterNonReserved(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitNonReserved(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitNonReserved(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NonReservedContext nonReserved() throws RecognitionException {
		NonReservedContext _localctx = new NonReservedContext(_ctx, getState());
		enterRule(_localctx, 362, RULE_nonReserved);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3638);
			_la = _input.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & -1152921504608960512L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & -1125900443713537L) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & -36310271996272913L) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & -18295907845931009L) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & 288221562878820351L) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public boolean sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 44:
			return queryTerm_sempred((QueryTermContext)_localctx, predIndex);
		case 126:
			return booleanExpression_sempred((BooleanExpressionContext)_localctx, predIndex);
		case 128:
			return valueExpression_sempred((ValueExpressionContext)_localctx, predIndex);
		case 130:
			return primaryExpression_sempred((PrimaryExpressionContext)_localctx, predIndex);
		case 170:
			return identifier_sempred((IdentifierContext)_localctx, predIndex);
		case 171:
			return strictIdentifier_sempred((StrictIdentifierContext)_localctx, predIndex);
		case 172:
			return quotedIdentifier_sempred((QuotedIdentifierContext)_localctx, predIndex);
		case 174:
			return number_sempred((NumberContext)_localctx, predIndex);
		case 176:
			return stringLit_sempred((StringLitContext)_localctx, predIndex);
		}
		return true;
	}
	private boolean queryTerm_sempred(QueryTermContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0:
			return precpred(_ctx, 3);
		case 1:
			return legacy_setops_precedence_enabled;
		case 2:
			return precpred(_ctx, 2);
		case 3:
			return !legacy_setops_precedence_enabled;
		case 4:
			return precpred(_ctx, 1);
		case 5:
			return !legacy_setops_precedence_enabled;
		}
		return true;
	}
	private boolean booleanExpression_sempred(BooleanExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 6:
			return precpred(_ctx, 2);
		case 7:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean valueExpression_sempred(ValueExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 8:
			return precpred(_ctx, 6);
		case 9:
			return precpred(_ctx, 5);
		case 10:
			return precpred(_ctx, 4);
		case 11:
			return precpred(_ctx, 3);
		case 12:
			return precpred(_ctx, 2);
		case 13:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean primaryExpression_sempred(PrimaryExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 14:
			return precpred(_ctx, 10);
		case 15:
			return precpred(_ctx, 7);
		}
		return true;
	}
	private boolean identifier_sempred(IdentifierContext _localctx, int predIndex) {
		switch (predIndex) {
		case 16:
			return !SQL_standard_keyword_behavior;
		}
		return true;
	}
	private boolean strictIdentifier_sempred(StrictIdentifierContext _localctx, int predIndex) {
		switch (predIndex) {
		case 17:
			return SQL_standard_keyword_behavior;
		case 18:
			return !SQL_standard_keyword_behavior;
		}
		return true;
	}
	private boolean quotedIdentifier_sempred(QuotedIdentifierContext _localctx, int predIndex) {
		switch (predIndex) {
		case 19:
			return double_quoted_identifiers;
		}
		return true;
	}
	private boolean number_sempred(NumberContext _localctx, int predIndex) {
		switch (predIndex) {
		case 20:
			return !legacy_exponent_literal_as_decimal_enabled;
		case 21:
			return !legacy_exponent_literal_as_decimal_enabled;
		case 22:
			return legacy_exponent_literal_as_decimal_enabled;
		}
		return true;
	}
	private boolean stringLit_sempred(StringLitContext _localctx, int predIndex) {
		switch (predIndex) {
		case 23:
			return !double_quoted_identifiers;
		}
		return true;
	}

	private static final String _serializedATNSegment0 =
		"\u0004\u0001\u0161\u0e39\u0002\u0000\u0007\u0000\u0002\u0001\u0007\u0001"+
		"\u0002\u0002\u0007\u0002\u0002\u0003\u0007\u0003\u0002\u0004\u0007\u0004"+
		"\u0002\u0005\u0007\u0005\u0002\u0006\u0007\u0006\u0002\u0007\u0007\u0007"+
		"\u0002\b\u0007\b\u0002\t\u0007\t\u0002\n\u0007\n\u0002\u000b\u0007\u000b"+
		"\u0002\f\u0007\f\u0002\r\u0007\r\u0002\u000e\u0007\u000e\u0002\u000f\u0007"+
		"\u000f\u0002\u0010\u0007\u0010\u0002\u0011\u0007\u0011\u0002\u0012\u0007"+
		"\u0012\u0002\u0013\u0007\u0013\u0002\u0014\u0007\u0014\u0002\u0015\u0007"+
		"\u0015\u0002\u0016\u0007\u0016\u0002\u0017\u0007\u0017\u0002\u0018\u0007"+
		"\u0018\u0002\u0019\u0007\u0019\u0002\u001a\u0007\u001a\u0002\u001b\u0007"+
		"\u001b\u0002\u001c\u0007\u001c\u0002\u001d\u0007\u001d\u0002\u001e\u0007"+
		"\u001e\u0002\u001f\u0007\u001f\u0002 \u0007 \u0002!\u0007!\u0002\"\u0007"+
		"\"\u0002#\u0007#\u0002$\u0007$\u0002%\u0007%\u0002&\u0007&\u0002\'\u0007"+
		"\'\u0002(\u0007(\u0002)\u0007)\u0002*\u0007*\u0002+\u0007+\u0002,\u0007"+
		",\u0002-\u0007-\u0002.\u0007.\u0002/\u0007/\u00020\u00070\u00021\u0007"+
		"1\u00022\u00072\u00023\u00073\u00024\u00074\u00025\u00075\u00026\u0007"+
		"6\u00027\u00077\u00028\u00078\u00029\u00079\u0002:\u0007:\u0002;\u0007"+
		";\u0002<\u0007<\u0002=\u0007=\u0002>\u0007>\u0002?\u0007?\u0002@\u0007"+
		"@\u0002A\u0007A\u0002B\u0007B\u0002C\u0007C\u0002D\u0007D\u0002E\u0007"+
		"E\u0002F\u0007F\u0002G\u0007G\u0002H\u0007H\u0002I\u0007I\u0002J\u0007"+
		"J\u0002K\u0007K\u0002L\u0007L\u0002M\u0007M\u0002N\u0007N\u0002O\u0007"+
		"O\u0002P\u0007P\u0002Q\u0007Q\u0002R\u0007R\u0002S\u0007S\u0002T\u0007"+
		"T\u0002U\u0007U\u0002V\u0007V\u0002W\u0007W\u0002X\u0007X\u0002Y\u0007"+
		"Y\u0002Z\u0007Z\u0002[\u0007[\u0002\\\u0007\\\u0002]\u0007]\u0002^\u0007"+
		"^\u0002_\u0007_\u0002`\u0007`\u0002a\u0007a\u0002b\u0007b\u0002c\u0007"+
		"c\u0002d\u0007d\u0002e\u0007e\u0002f\u0007f\u0002g\u0007g\u0002h\u0007"+
		"h\u0002i\u0007i\u0002j\u0007j\u0002k\u0007k\u0002l\u0007l\u0002m\u0007"+
		"m\u0002n\u0007n\u0002o\u0007o\u0002p\u0007p\u0002q\u0007q\u0002r\u0007"+
		"r\u0002s\u0007s\u0002t\u0007t\u0002u\u0007u\u0002v\u0007v\u0002w\u0007"+
		"w\u0002x\u0007x\u0002y\u0007y\u0002z\u0007z\u0002{\u0007{\u0002|\u0007"+
		"|\u0002}\u0007}\u0002~\u0007~\u0002\u007f\u0007\u007f\u0002\u0080\u0007"+
		"\u0080\u0002\u0081\u0007\u0081\u0002\u0082\u0007\u0082\u0002\u0083\u0007"+
		"\u0083\u0002\u0084\u0007\u0084\u0002\u0085\u0007\u0085\u0002\u0086\u0007"+
		"\u0086\u0002\u0087\u0007\u0087\u0002\u0088\u0007\u0088\u0002\u0089\u0007"+
		"\u0089\u0002\u008a\u0007\u008a\u0002\u008b\u0007\u008b\u0002\u008c\u0007"+
		"\u008c\u0002\u008d\u0007\u008d\u0002\u008e\u0007\u008e\u0002\u008f\u0007"+
		"\u008f\u0002\u0090\u0007\u0090\u0002\u0091\u0007\u0091\u0002\u0092\u0007"+
		"\u0092\u0002\u0093\u0007\u0093\u0002\u0094\u0007\u0094\u0002\u0095\u0007"+
		"\u0095\u0002\u0096\u0007\u0096\u0002\u0097\u0007\u0097\u0002\u0098\u0007"+
		"\u0098\u0002\u0099\u0007\u0099\u0002\u009a\u0007\u009a\u0002\u009b\u0007"+
		"\u009b\u0002\u009c\u0007\u009c\u0002\u009d\u0007\u009d\u0002\u009e\u0007"+
		"\u009e\u0002\u009f\u0007\u009f\u0002\u00a0\u0007\u00a0\u0002\u00a1\u0007"+
		"\u00a1\u0002\u00a2\u0007\u00a2\u0002\u00a3\u0007\u00a3\u0002\u00a4\u0007"+
		"\u00a4\u0002\u00a5\u0007\u00a5\u0002\u00a6\u0007\u00a6\u0002\u00a7\u0007"+
		"\u00a7\u0002\u00a8\u0007\u00a8\u0002\u00a9\u0007\u00a9\u0002\u00aa\u0007"+
		"\u00aa\u0002\u00ab\u0007\u00ab\u0002\u00ac\u0007\u00ac\u0002\u00ad\u0007"+
		"\u00ad\u0002\u00ae\u0007\u00ae\u0002\u00af\u0007\u00af\u0002\u00b0\u0007"+
		"\u00b0\u0002\u00b1\u0007\u00b1\u0002\u00b2\u0007\u00b2\u0002\u00b3\u0007"+
		"\u00b3\u0002\u00b4\u0007\u00b4\u0002\u00b5\u0007\u00b5\u0001\u0000\u0001"+
		"\u0000\u0005\u0000\u016f\b\u0000\n\u0000\f\u0000\u0172\t\u0000\u0001\u0000"+
		"\u0001\u0000\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0002\u0001\u0002"+
		"\u0001\u0002\u0001\u0003\u0001\u0003\u0001\u0003\u0001\u0004\u0001\u0004"+
		"\u0001\u0004\u0001\u0005\u0001\u0005\u0001\u0005\u0001\u0006\u0001\u0006"+
		"\u0001\u0006\u0001\u0007\u0001\u0007\u0003\u0007\u018a\b\u0007\u0001\u0007"+
		"\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007"+
		"\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0003\u0007\u0197\b\u0007"+
		"\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0003\u0007"+
		"\u019e\b\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007"+
		"\u0001\u0007\u0005\u0007\u01a6\b\u0007\n\u0007\f\u0007\u01a9\t\u0007\u0001"+
		"\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001"+
		"\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001"+
		"\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0003\u0007\u01bc"+
		"\b\u0007\u0001\u0007\u0001\u0007\u0003\u0007\u01c0\b\u0007\u0001\u0007"+
		"\u0001\u0007\u0001\u0007\u0001\u0007\u0003\u0007\u01c6\b\u0007\u0001\u0007"+
		"\u0003\u0007\u01c9\b\u0007\u0001\u0007\u0003\u0007\u01cc\b\u0007\u0001"+
		"\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0003\u0007\u01d3"+
		"\b\u0007\u0001\u0007\u0003\u0007\u01d6\b\u0007\u0001\u0007\u0001\u0007"+
		"\u0003\u0007\u01da\b\u0007\u0001\u0007\u0003\u0007\u01dd\b\u0007\u0001"+
		"\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0003\u0007\u01e4"+
		"\b\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001"+
		"\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0005\u0007\u01ef\b\u0007\n"+
		"\u0007\f\u0007\u01f2\t\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001"+
		"\u0007\u0001\u0007\u0003\u0007\u01f9\b\u0007\u0001\u0007\u0003\u0007\u01fc"+
		"\b\u0007\u0001\u0007\u0001\u0007\u0003\u0007\u0200\b\u0007\u0001\u0007"+
		"\u0003\u0007\u0203\b\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007"+
		"\u0003\u0007\u0209\b\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007"+
		"\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0003\u0007"+
		"\u0214\b\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0003\u0007"+
		"\u021a\b\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0003\u0007\u021f\b"+
		"\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001"+
		"\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001"+
		"\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001"+
		"\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001"+
		"\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001"+
		"\u0007\u0001\u0007\u0001\u0007\u0003\u0007\u0241\b\u0007\u0001\u0007\u0001"+
		"\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001"+
		"\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0003\u0007\u024e\b\u0007\u0001"+
		"\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001"+
		"\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001"+
		"\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001"+
		"\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0003\u0007\u0267"+
		"\b\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001"+
		"\u0007\u0001\u0007\u0003\u0007\u0270\b\u0007\u0001\u0007\u0001\u0007\u0003"+
		"\u0007\u0274\b\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0003"+
		"\u0007\u027a\b\u0007\u0001\u0007\u0001\u0007\u0003\u0007\u027e\b\u0007"+
		"\u0001\u0007\u0001\u0007\u0001\u0007\u0003\u0007\u0283\b\u0007\u0001\u0007"+
		"\u0001\u0007\u0001\u0007\u0001\u0007\u0003\u0007\u0289\b\u0007\u0001\u0007"+
		"\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007"+
		"\u0001\u0007\u0001\u0007\u0001\u0007\u0003\u0007\u0295\b\u0007\u0001\u0007"+
		"\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0003\u0007"+
		"\u029d\b\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0003\u0007"+
		"\u02a3\b\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007"+
		"\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007"+
		"\u0003\u0007\u02b0\b\u0007\u0001\u0007\u0004\u0007\u02b3\b\u0007\u000b"+
		"\u0007\f\u0007\u02b4\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001"+
		"\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001"+
		"\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0003\u0007\u02c5\b\u0007\u0001"+
		"\u0007\u0001\u0007\u0001\u0007\u0005\u0007\u02ca\b\u0007\n\u0007\f\u0007"+
		"\u02cd\t\u0007\u0001\u0007\u0003\u0007\u02d0\b\u0007\u0001\u0007\u0001"+
		"\u0007\u0001\u0007\u0001\u0007\u0003\u0007\u02d6\b\u0007\u0001\u0007\u0001"+
		"\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001"+
		"\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0003"+
		"\u0007\u02e5\b\u0007\u0001\u0007\u0001\u0007\u0003\u0007\u02e9\b\u0007"+
		"\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0003\u0007\u02ef\b\u0007"+
		"\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0003\u0007\u02f5\b\u0007"+
		"\u0001\u0007\u0003\u0007\u02f8\b\u0007\u0001\u0007\u0003\u0007\u02fb\b"+
		"\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0003\u0007\u0301"+
		"\b\u0007\u0001\u0007\u0001\u0007\u0003\u0007\u0305\b\u0007\u0001\u0007"+
		"\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0005\u0007"+
		"\u030d\b\u0007\n\u0007\f\u0007\u0310\t\u0007\u0001\u0007\u0001\u0007\u0001"+
		"\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0003\u0007\u0318\b\u0007\u0001"+
		"\u0007\u0003\u0007\u031b\b\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001"+
		"\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0003\u0007\u0324\b\u0007\u0001"+
		"\u0007\u0001\u0007\u0001\u0007\u0003\u0007\u0329\b\u0007\u0001\u0007\u0001"+
		"\u0007\u0001\u0007\u0001\u0007\u0003\u0007\u032f\b\u0007\u0001\u0007\u0001"+
		"\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0003\u0007\u0336\b\u0007\u0001"+
		"\u0007\u0003\u0007\u0339\b\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001"+
		"\u0007\u0003\u0007\u033f\b\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001"+
		"\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0005\u0007\u0348\b\u0007\n"+
		"\u0007\f\u0007\u034b\t\u0007\u0003\u0007\u034d\b\u0007\u0001\u0007\u0001"+
		"\u0007\u0003\u0007\u0351\b\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0003"+
		"\u0007\u0356\b\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0003\u0007\u035b"+
		"\b\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0003"+
		"\u0007\u0362\b\u0007\u0001\u0007\u0003\u0007\u0365\b\u0007\u0001\u0007"+
		"\u0003\u0007\u0368\b\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007"+
		"\u0001\u0007\u0003\u0007\u036f\b\u0007\u0001\u0007\u0001\u0007\u0001\u0007"+
		"\u0003\u0007\u0374\b\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007"+
		"\u0001\u0007\u0001\u0007\u0001\u0007\u0003\u0007\u037d\b\u0007\u0001\u0007"+
		"\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0003\u0007"+
		"\u0385\b\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0003\u0007"+
		"\u038b\b\u0007\u0001\u0007\u0003\u0007\u038e\b\u0007\u0001\u0007\u0003"+
		"\u0007\u0391\b\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0003"+
		"\u0007\u0397\b\u0007\u0001\u0007\u0001\u0007\u0003\u0007\u039b\b\u0007"+
		"\u0001\u0007\u0001\u0007\u0001\u0007\u0003\u0007\u03a0\b\u0007\u0001\u0007"+
		"\u0003\u0007\u03a3\b\u0007\u0001\u0007\u0001\u0007\u0003\u0007\u03a7\b"+
		"\u0007\u0003\u0007\u03a9\b\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001"+
		"\u0007\u0001\u0007\u0001\u0007\u0003\u0007\u03b1\b\u0007\u0001\u0007\u0001"+
		"\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0003\u0007\u03b9"+
		"\b\u0007\u0001\u0007\u0003\u0007\u03bc\b\u0007\u0001\u0007\u0001\u0007"+
		"\u0001\u0007\u0003\u0007\u03c1\b\u0007\u0001\u0007\u0001\u0007\u0001\u0007"+
		"\u0001\u0007\u0003\u0007\u03c7\b\u0007\u0001\u0007\u0001\u0007\u0001\u0007"+
		"\u0001\u0007\u0003\u0007\u03cd\b\u0007\u0001\u0007\u0003\u0007\u03d0\b"+
		"\u0007\u0001\u0007\u0001\u0007\u0003\u0007\u03d4\b\u0007\u0001\u0007\u0003"+
		"\u0007\u03d7\b\u0007\u0001\u0007\u0001\u0007\u0003\u0007\u03db\b\u0007"+
		"\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007"+
		"\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007"+
		"\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007"+
		"\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007"+
		"\u0005\u0007\u03f5\b\u0007\n\u0007\f\u0007\u03f8\t\u0007\u0003\u0007\u03fa"+
		"\b\u0007\u0001\u0007\u0001\u0007\u0003\u0007\u03fe\b\u0007\u0001\u0007"+
		"\u0001\u0007\u0001\u0007\u0001\u0007\u0003\u0007\u0404\b\u0007\u0001\u0007"+
		"\u0003\u0007\u0407\b\u0007\u0001\u0007\u0003\u0007\u040a\b\u0007\u0001"+
		"\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0003\u0007\u0410\b\u0007\u0001"+
		"\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0003"+
		"\u0007\u0418\b\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0003\u0007\u041d"+
		"\b\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0003\u0007\u0423"+
		"\b\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0003\u0007\u0429"+
		"\b\u0007\u0001\u0007\u0003\u0007\u042c\b\u0007\u0001\u0007\u0001\u0007"+
		"\u0001\u0007\u0001\u0007\u0001\u0007\u0003\u0007\u0433\b\u0007\u0001\u0007"+
		"\u0001\u0007\u0001\u0007\u0005\u0007\u0438\b\u0007\n\u0007\f\u0007\u043b"+
		"\t\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0005\u0007\u0440\b\u0007"+
		"\n\u0007\f\u0007\u0443\t\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001"+
		"\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001"+
		"\u0007\u0001\u0007\u0001\u0007\u0005\u0007\u0451\b\u0007\n\u0007\f\u0007"+
		"\u0454\t\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007"+
		"\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0005\u0007\u045f\b\u0007"+
		"\n\u0007\f\u0007\u0462\t\u0007\u0003\u0007\u0464\b\u0007\u0001\u0007\u0001"+
		"\u0007\u0005\u0007\u0468\b\u0007\n\u0007\f\u0007\u046b\t\u0007\u0001\u0007"+
		"\u0001\u0007\u0001\u0007\u0001\u0007\u0005\u0007\u0471\b\u0007\n\u0007"+
		"\f\u0007\u0474\t\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007"+
		"\u0005\u0007\u047a\b\u0007\n\u0007\f\u0007\u047d\t\u0007\u0001\u0007\u0001"+
		"\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0003\u0007\u0484\b\u0007\u0001"+
		"\u0007\u0001\u0007\u0001\u0007\u0003\u0007\u0489\b\u0007\u0001\u0007\u0001"+
		"\u0007\u0001\u0007\u0003\u0007\u048e\b\u0007\u0001\u0007\u0001\u0007\u0001"+
		"\u0007\u0001\u0007\u0001\u0007\u0003\u0007\u0495\b\u0007\u0001\u0007\u0001"+
		"\u0007\u0001\u0007\u0001\u0007\u0003\u0007\u049b\b\u0007\u0001\u0007\u0001"+
		"\u0007\u0001\u0007\u0003\u0007\u04a0\b\u0007\u0001\u0007\u0001\u0007\u0001"+
		"\u0007\u0001\u0007\u0005\u0007\u04a6\b\u0007\n\u0007\f\u0007\u04a9\t\u0007"+
		"\u0003\u0007\u04ab\b\u0007\u0001\b\u0001\b\u0003\b\u04af\b\b\u0001\t\u0001"+
		"\t\u0001\n\u0001\n\u0001\u000b\u0001\u000b\u0001\u000b\u0001\u000b\u0001"+
		"\u000b\u0001\u000b\u0003\u000b\u04bb\b\u000b\u0001\u000b\u0001\u000b\u0003"+
		"\u000b\u04bf\b\u000b\u0001\u000b\u0001\u000b\u0001\u000b\u0001\u000b\u0001"+
		"\u000b\u0003\u000b\u04c6\b\u000b\u0001\u000b\u0001\u000b\u0001\u000b\u0001"+
		"\u000b\u0001\u000b\u0001\u000b\u0001\u000b\u0001\u000b\u0001\u000b\u0001"+
		"\u000b\u0001\u000b\u0001\u000b\u0001\u000b\u0001\u000b\u0001\u000b\u0001"+
		"\u000b\u0001\u000b\u0001\u000b\u0001\u000b\u0001\u000b\u0001\u000b\u0001"+
		"\u000b\u0001\u000b\u0001\u000b\u0001\u000b\u0001\u000b\u0001\u000b\u0001"+
		"\u000b\u0001\u000b\u0001\u000b\u0001\u000b\u0001\u000b\u0001\u000b\u0001"+
		"\u000b\u0001\u000b\u0001\u000b\u0001\u000b\u0001\u000b\u0001\u000b\u0001"+
		"\u000b\u0001\u000b\u0001\u000b\u0001\u000b\u0001\u000b\u0001\u000b\u0001"+
		"\u000b\u0001\u000b\u0001\u000b\u0001\u000b\u0001\u000b\u0001\u000b\u0001"+
		"\u000b\u0001\u000b\u0001\u000b\u0001\u000b\u0001\u000b\u0001\u000b\u0001"+
		"\u000b\u0001\u000b\u0001\u000b\u0001\u000b\u0001\u000b\u0001\u000b\u0001"+
		"\u000b\u0001\u000b\u0001\u000b\u0001\u000b\u0001\u000b\u0001\u000b\u0001"+
		"\u000b\u0001\u000b\u0001\u000b\u0001\u000b\u0001\u000b\u0001\u000b\u0001"+
		"\u000b\u0001\u000b\u0001\u000b\u0001\u000b\u0001\u000b\u0001\u000b\u0001"+
		"\u000b\u0001\u000b\u0001\u000b\u0001\u000b\u0001\u000b\u0001\u000b\u0001"+
		"\u000b\u0001\u000b\u0001\u000b\u0001\u000b\u0001\u000b\u0001\u000b\u0001"+
		"\u000b\u0001\u000b\u0001\u000b\u0001\u000b\u0001\u000b\u0001\u000b\u0001"+
		"\u000b\u0001\u000b\u0001\u000b\u0001\u000b\u0001\u000b\u0001\u000b\u0001"+
		"\u000b\u0001\u000b\u0001\u000b\u0001\u000b\u0001\u000b\u0001\u000b\u0001"+
		"\u000b\u0001\u000b\u0001\u000b\u0003\u000b\u053a\b\u000b\u0001\u000b\u0001"+
		"\u000b\u0001\u000b\u0001\u000b\u0001\u000b\u0001\u000b\u0003\u000b\u0542"+
		"\b\u000b\u0001\u000b\u0001\u000b\u0001\u000b\u0001\u000b\u0001\u000b\u0001"+
		"\u000b\u0003\u000b\u054a\b\u000b\u0001\u000b\u0001\u000b\u0001\u000b\u0001"+
		"\u000b\u0001\u000b\u0001\u000b\u0001\u000b\u0003\u000b\u0553\b\u000b\u0001"+
		"\u000b\u0001\u000b\u0001\u000b\u0001\u000b\u0001\u000b\u0001\u000b\u0001"+
		"\u000b\u0001\u000b\u0003\u000b\u055d\b\u000b\u0001\f\u0001\f\u0003\f\u0561"+
		"\b\f\u0001\f\u0003\f\u0564\b\f\u0001\f\u0001\f\u0001\f\u0001\f\u0003\f"+
		"\u056a\b\f\u0001\f\u0001\f\u0001\r\u0001\r\u0003\r\u0570\b\r\u0001\r\u0001"+
		"\r\u0001\r\u0001\r\u0001\u000e\u0001\u000e\u0001\u000e\u0001\u000e\u0001"+
		"\u000e\u0001\u000e\u0003\u000e\u057c\b\u000e\u0001\u000e\u0001\u000e\u0001"+
		"\u000e\u0001\u000e\u0001\u000f\u0001\u000f\u0001\u000f\u0001\u000f\u0001"+
		"\u000f\u0001\u000f\u0003\u000f\u0588\b\u000f\u0001\u000f\u0001\u000f\u0001"+
		"\u000f\u0003\u000f\u058d\b\u000f\u0001\u0010\u0001\u0010\u0001\u0010\u0001"+
		"\u0011\u0001\u0011\u0001\u0011\u0001\u0012\u0003\u0012\u0596\b\u0012\u0001"+
		"\u0012\u0001\u0012\u0001\u0012\u0001\u0013\u0001\u0013\u0001\u0013\u0003"+
		"\u0013\u059e\b\u0013\u0001\u0013\u0001\u0013\u0001\u0013\u0001\u0013\u0001"+
		"\u0013\u0003\u0013\u05a5\b\u0013\u0003\u0013\u05a7\b\u0013\u0001\u0013"+
		"\u0003\u0013\u05aa\b\u0013\u0001\u0013\u0001\u0013\u0001\u0013\u0003\u0013"+
		"\u05af\b\u0013\u0001\u0013\u0001\u0013\u0003\u0013\u05b3\b\u0013\u0001"+
		"\u0013\u0001\u0013\u0001\u0013\u0003\u0013\u05b8\b\u0013\u0001\u0013\u0003"+
		"\u0013\u05bb\b\u0013\u0001\u0013\u0001\u0013\u0001\u0013\u0003\u0013\u05c0"+
		"\b\u0013\u0001\u0013\u0001\u0013\u0001\u0013\u0001\u0013\u0001\u0013\u0001"+
		"\u0013\u0001\u0013\u0003\u0013\u05c9\b\u0013\u0001\u0013\u0001\u0013\u0001"+
		"\u0013\u0003\u0013\u05ce\b\u0013\u0001\u0013\u0003\u0013\u05d1\b\u0013"+
		"\u0001\u0013\u0001\u0013\u0001\u0013\u0003\u0013\u05d6\b\u0013\u0001\u0013"+
		"\u0001\u0013\u0003\u0013\u05da\b\u0013\u0001\u0013\u0001\u0013\u0001\u0013"+
		"\u0003\u0013\u05df\b\u0013\u0003\u0013\u05e1\b\u0013\u0001\u0014\u0001"+
		"\u0014\u0003\u0014\u05e5\b\u0014\u0001\u0015\u0001\u0015\u0001\u0015\u0001"+
		"\u0015\u0001\u0015\u0005\u0015\u05ec\b\u0015\n\u0015\f\u0015\u05ef\t\u0015"+
		"\u0001\u0015\u0001\u0015\u0001\u0016\u0001\u0016\u0001\u0016\u0003\u0016"+
		"\u05f6\b\u0016\u0001\u0016\u0001\u0016\u0001\u0016\u0001\u0016\u0003\u0016"+
		"\u05fc\b\u0016\u0001\u0017\u0001\u0017\u0001\u0018\u0001\u0018\u0001\u0019"+
		"\u0001\u0019\u0001\u0019\u0001\u0019\u0001\u0019\u0003\u0019\u0607\b\u0019"+
		"\u0001\u001a\u0001\u001a\u0001\u001a\u0005\u001a\u060c\b\u001a\n\u001a"+
		"\f\u001a\u060f\t\u001a\u0001\u001b\u0001\u001b\u0001\u001b\u0001\u001b"+
		"\u0005\u001b\u0615\b\u001b\n\u001b\f\u001b\u0618\t\u001b\u0001\u001c\u0001"+
		"\u001c\u0003\u001c\u061c\b\u001c\u0001\u001c\u0003\u001c\u061f\b\u001c"+
		"\u0001\u001c\u0001\u001c\u0001\u001c\u0001\u001c\u0001\u001d\u0001\u001d"+
		"\u0001\u001d\u0001\u001e\u0001\u001e\u0001\u001e\u0001\u001e\u0001\u001e"+
		"\u0001\u001e\u0001\u001e\u0001\u001e\u0001\u001e\u0001\u001e\u0001\u001e"+
		"\u0001\u001e\u0001\u001e\u0005\u001e\u0635\b\u001e\n\u001e\f\u001e\u0638"+
		"\t\u001e\u0001\u001f\u0001\u001f\u0001\u001f\u0001\u001f\u0005\u001f\u063e"+
		"\b\u001f\n\u001f\f\u001f\u0641\t\u001f\u0001\u001f\u0001\u001f\u0001 "+
		"\u0001 \u0003 \u0647\b \u0001 \u0003 \u064a\b \u0001!\u0001!\u0001!\u0005"+
		"!\u064f\b!\n!\f!\u0652\t!\u0001!\u0003!\u0655\b!\u0001\"\u0001\"\u0001"+
		"\"\u0001\"\u0003\"\u065b\b\"\u0001#\u0001#\u0001#\u0001#\u0005#\u0661"+
		"\b#\n#\f#\u0664\t#\u0001#\u0001#\u0001$\u0001$\u0001$\u0001$\u0005$\u066c"+
		"\b$\n$\f$\u066f\t$\u0001$\u0001$\u0001%\u0001%\u0001%\u0001%\u0001%\u0001"+
		"%\u0003%\u0679\b%\u0001&\u0001&\u0001&\u0001&\u0001&\u0001&\u0003&\u0681"+
		"\b&\u0001\'\u0001\'\u0001\'\u0001\'\u0003\'\u0687\b\'\u0001(\u0001(\u0001"+
		"(\u0001)\u0001)\u0001)\u0001)\u0001)\u0004)\u0691\b)\u000b)\f)\u0692\u0001"+
		")\u0001)\u0001)\u0001)\u0001)\u0003)\u069a\b)\u0001)\u0001)\u0001)\u0001"+
		")\u0001)\u0003)\u06a1\b)\u0001)\u0001)\u0001)\u0001)\u0001)\u0001)\u0001"+
		")\u0001)\u0001)\u0001)\u0003)\u06ad\b)\u0001)\u0001)\u0001)\u0001)\u0005"+
		")\u06b3\b)\n)\f)\u06b6\t)\u0001)\u0005)\u06b9\b)\n)\f)\u06bc\t)\u0001"+
		")\u0005)\u06bf\b)\n)\f)\u06c2\t)\u0003)\u06c4\b)\u0001*\u0001*\u0001*"+
		"\u0001*\u0001*\u0005*\u06cb\b*\n*\f*\u06ce\t*\u0003*\u06d0\b*\u0001*\u0001"+
		"*\u0001*\u0001*\u0001*\u0005*\u06d7\b*\n*\f*\u06da\t*\u0003*\u06dc\b*"+
		"\u0001*\u0001*\u0001*\u0001*\u0001*\u0005*\u06e3\b*\n*\f*\u06e6\t*\u0003"+
		"*\u06e8\b*\u0001*\u0001*\u0001*\u0001*\u0001*\u0005*\u06ef\b*\n*\f*\u06f2"+
		"\t*\u0003*\u06f4\b*\u0001*\u0003*\u06f7\b*\u0001*\u0001*\u0001*\u0003"+
		"*\u06fc\b*\u0003*\u06fe\b*\u0001*\u0001*\u0003*\u0702\b*\u0001+\u0001"+
		"+\u0001+\u0001,\u0001,\u0001,\u0001,\u0001,\u0001,\u0001,\u0003,\u070e"+
		"\b,\u0001,\u0001,\u0001,\u0001,\u0001,\u0003,\u0715\b,\u0001,\u0001,\u0001"+
		",\u0001,\u0001,\u0003,\u071c\b,\u0001,\u0005,\u071f\b,\n,\f,\u0722\t,"+
		"\u0001-\u0001-\u0001-\u0001-\u0001-\u0001-\u0001-\u0001-\u0001-\u0003"+
		"-\u072d\b-\u0001.\u0001.\u0003.\u0731\b.\u0001.\u0001.\u0003.\u0735\b"+
		".\u0001/\u0001/\u0004/\u0739\b/\u000b/\f/\u073a\u00010\u00010\u00030\u073f"+
		"\b0\u00010\u00010\u00010\u00010\u00050\u0745\b0\n0\f0\u0748\t0\u00010"+
		"\u00030\u074b\b0\u00010\u00030\u074e\b0\u00010\u00030\u0751\b0\u00010"+
		"\u00030\u0754\b0\u00010\u00010\u00030\u0758\b0\u00011\u00011\u00031\u075c"+
		"\b1\u00011\u00051\u075f\b1\n1\f1\u0762\t1\u00011\u00031\u0765\b1\u0001"+
		"1\u00031\u0768\b1\u00011\u00031\u076b\b1\u00011\u00031\u076e\b1\u0001"+
		"1\u00011\u00031\u0772\b1\u00011\u00051\u0775\b1\n1\f1\u0778\t1\u00011"+
		"\u00031\u077b\b1\u00011\u00031\u077e\b1\u00011\u00031\u0781\b1\u00011"+
		"\u00031\u0784\b1\u00031\u0786\b1\u00012\u00012\u00012\u00012\u00032\u078c"+
		"\b2\u00012\u00012\u00012\u00012\u00012\u00032\u0793\b2\u00012\u00012\u0001"+
		"2\u00032\u0798\b2\u00012\u00032\u079b\b2\u00012\u00032\u079e\b2\u0001"+
		"2\u00012\u00032\u07a2\b2\u00012\u00012\u00012\u00012\u00012\u00012\u0001"+
		"2\u00012\u00032\u07ac\b2\u00012\u00012\u00032\u07b0\b2\u00032\u07b2\b"+
		"2\u00012\u00032\u07b5\b2\u00012\u00012\u00032\u07b9\b2\u00013\u00013\u0005"+
		"3\u07bd\b3\n3\f3\u07c0\t3\u00013\u00033\u07c3\b3\u00013\u00013\u00014"+
		"\u00014\u00014\u00015\u00015\u00015\u00015\u00035\u07ce\b5\u00015\u0001"+
		"5\u00015\u00016\u00016\u00016\u00016\u00016\u00036\u07d8\b6\u00016\u0001"+
		"6\u00036\u07dc\b6\u00016\u00016\u00016\u00017\u00017\u00017\u00017\u0001"+
		"7\u00017\u00017\u00037\u07e8\b7\u00017\u00017\u00017\u00018\u00018\u0001"+
		"8\u00018\u00018\u00018\u00018\u00038\u07f4\b8\u00019\u00019\u00019\u0001"+
		"9\u00019\u00019\u00019\u00019\u00019\u00019\u00019\u00059\u0801\b9\n9"+
		"\f9\u0804\t9\u00019\u00019\u00039\u0808\b9\u0001:\u0001:\u0001:\u0001"+
		":\u0003:\u080e\b:\u0001;\u0001;\u0001;\u0005;\u0813\b;\n;\f;\u0816\t;"+
		"\u0001<\u0001<\u0001<\u0001<\u0001=\u0001=\u0001=\u0001>\u0001>\u0001"+
		">\u0001?\u0001?\u0001?\u0003?\u0825\b?\u0001?\u0005?\u0828\b?\n?\f?\u082b"+
		"\t?\u0001?\u0001?\u0001@\u0001@\u0001@\u0001@\u0001@\u0001@\u0005@\u0835"+
		"\b@\n@\f@\u0838\t@\u0001@\u0001@\u0003@\u083c\b@\u0001A\u0001A\u0001A"+
		"\u0001A\u0005A\u0842\bA\nA\fA\u0845\tA\u0001A\u0005A\u0848\bA\nA\fA\u084b"+
		"\tA\u0001A\u0003A\u084e\bA\u0001A\u0003A\u0851\bA\u0001B\u0003B\u0854"+
		"\bB\u0001B\u0001B\u0001B\u0001B\u0001B\u0003B\u085b\bB\u0001B\u0001B\u0001"+
		"B\u0001B\u0003B\u0861\bB\u0001C\u0001C\u0001C\u0001C\u0001C\u0005C\u0868"+
		"\bC\nC\fC\u086b\tC\u0001C\u0001C\u0001C\u0001C\u0001C\u0005C\u0872\bC"+
		"\nC\fC\u0875\tC\u0001C\u0001C\u0001C\u0001C\u0001C\u0001C\u0001C\u0001"+
		"C\u0001C\u0001C\u0005C\u0881\bC\nC\fC\u0884\tC\u0001C\u0001C\u0003C\u0888"+
		"\bC\u0003C\u088a\bC\u0001D\u0001D\u0003D\u088e\bD\u0001E\u0001E\u0001"+
		"E\u0001E\u0001E\u0005E\u0895\bE\nE\fE\u0898\tE\u0001E\u0001E\u0001E\u0001"+
		"E\u0001E\u0001E\u0001E\u0001E\u0005E\u08a2\bE\nE\fE\u08a5\tE\u0001E\u0001"+
		"E\u0003E\u08a9\bE\u0001F\u0001F\u0003F\u08ad\bF\u0001G\u0001G\u0001G\u0001"+
		"G\u0005G\u08b3\bG\nG\fG\u08b6\tG\u0003G\u08b8\bG\u0001G\u0001G\u0003G"+
		"\u08bc\bG\u0001H\u0001H\u0001H\u0001H\u0001H\u0001H\u0001H\u0001H\u0001"+
		"H\u0001H\u0005H\u08c8\bH\nH\fH\u08cb\tH\u0001H\u0001H\u0001H\u0001I\u0001"+
		"I\u0001I\u0001I\u0001I\u0005I\u08d5\bI\nI\fI\u08d8\tI\u0001I\u0001I\u0003"+
		"I\u08dc\bI\u0001J\u0001J\u0003J\u08e0\bJ\u0001J\u0003J\u08e3\bJ\u0001"+
		"K\u0001K\u0003K\u08e7\bK\u0001K\u0001K\u0001K\u0001K\u0003K\u08ed\bK\u0001"+
		"K\u0003K\u08f0\bK\u0001L\u0001L\u0001L\u0001M\u0001M\u0003M\u08f7\bM\u0001"+
		"N\u0001N\u0001N\u0001N\u0001N\u0001N\u0001N\u0001N\u0005N\u0901\bN\nN"+
		"\fN\u0904\tN\u0001N\u0001N\u0001O\u0001O\u0001O\u0001O\u0005O\u090c\b"+
		"O\nO\fO\u090f\tO\u0001O\u0001O\u0001O\u0001O\u0001O\u0001O\u0001O\u0001"+
		"O\u0005O\u0919\bO\nO\fO\u091c\tO\u0001O\u0001O\u0001P\u0001P\u0001P\u0001"+
		"P\u0005P\u0924\bP\nP\fP\u0927\tP\u0001P\u0001P\u0003P\u092b\bP\u0001Q"+
		"\u0001Q\u0001R\u0001R\u0001S\u0001S\u0003S\u0933\bS\u0001T\u0001T\u0001"+
		"U\u0003U\u0938\bU\u0001U\u0001U\u0001V\u0001V\u0001V\u0003V\u093f\bV\u0001"+
		"V\u0001V\u0001V\u0001V\u0001V\u0005V\u0946\bV\nV\fV\u0949\tV\u0003V\u094b"+
		"\bV\u0001V\u0001V\u0001V\u0003V\u0950\bV\u0001V\u0001V\u0001V\u0005V\u0955"+
		"\bV\nV\fV\u0958\tV\u0003V\u095a\bV\u0001W\u0001W\u0001X\u0003X\u095f\b"+
		"X\u0001X\u0001X\u0005X\u0963\bX\nX\fX\u0966\tX\u0001Y\u0001Y\u0001Y\u0003"+
		"Y\u096b\bY\u0001Z\u0001Z\u0001Z\u0003Z\u0970\bZ\u0001Z\u0001Z\u0003Z\u0974"+
		"\bZ\u0001Z\u0001Z\u0001Z\u0001Z\u0003Z\u097a\bZ\u0001Z\u0001Z\u0003Z\u097e"+
		"\bZ\u0001[\u0003[\u0981\b[\u0001[\u0001[\u0001[\u0003[\u0986\b[\u0001"+
		"[\u0003[\u0989\b[\u0001[\u0001[\u0001[\u0003[\u098e\b[\u0001[\u0001[\u0003"+
		"[\u0992\b[\u0001[\u0003[\u0995\b[\u0001[\u0003[\u0998\b[\u0001\\\u0001"+
		"\\\u0001\\\u0001\\\u0003\\\u099e\b\\\u0001]\u0001]\u0001]\u0003]\u09a3"+
		"\b]\u0001]\u0001]\u0001]\u0001]\u0001]\u0003]\u09aa\b]\u0001^\u0003^\u09ad"+
		"\b^\u0001^\u0001^\u0001^\u0001^\u0001^\u0001^\u0001^\u0001^\u0001^\u0001"+
		"^\u0001^\u0001^\u0001^\u0001^\u0001^\u0001^\u0003^\u09bf\b^\u0003^\u09c1"+
		"\b^\u0001^\u0003^\u09c4\b^\u0001_\u0001_\u0001_\u0001_\u0001`\u0001`\u0001"+
		"`\u0005`\u09cd\b`\n`\f`\u09d0\t`\u0001a\u0001a\u0001a\u0001a\u0005a\u09d6"+
		"\ba\na\fa\u09d9\ta\u0001a\u0001a\u0001b\u0001b\u0003b\u09df\bb\u0001c"+
		"\u0001c\u0001c\u0001c\u0005c\u09e5\bc\nc\fc\u09e8\tc\u0001c\u0001c\u0001"+
		"d\u0001d\u0003d\u09ee\bd\u0001e\u0001e\u0003e\u09f2\be\u0001e\u0003e\u09f5"+
		"\be\u0001e\u0001e\u0001e\u0001e\u0001e\u0001e\u0003e\u09fd\be\u0001e\u0001"+
		"e\u0001e\u0001e\u0001e\u0001e\u0003e\u0a05\be\u0001e\u0001e\u0001e\u0001"+
		"e\u0003e\u0a0b\be\u0001f\u0001f\u0001f\u0001f\u0005f\u0a11\bf\nf\ff\u0a14"+
		"\tf\u0001f\u0001f\u0001g\u0001g\u0001g\u0001g\u0001g\u0005g\u0a1d\bg\n"+
		"g\fg\u0a20\tg\u0003g\u0a22\bg\u0001g\u0001g\u0001g\u0001h\u0003h\u0a28"+
		"\bh\u0001h\u0001h\u0003h\u0a2c\bh\u0003h\u0a2e\bh\u0001i\u0001i\u0001"+
		"i\u0001i\u0001i\u0001i\u0001i\u0003i\u0a37\bi\u0001i\u0001i\u0001i\u0001"+
		"i\u0001i\u0001i\u0001i\u0001i\u0001i\u0001i\u0003i\u0a43\bi\u0003i\u0a45"+
		"\bi\u0001i\u0001i\u0001i\u0001i\u0001i\u0003i\u0a4c\bi\u0001i\u0001i\u0001"+
		"i\u0001i\u0001i\u0003i\u0a53\bi\u0001i\u0001i\u0001i\u0001i\u0003i\u0a59"+
		"\bi\u0001i\u0001i\u0001i\u0001i\u0003i\u0a5f\bi\u0003i\u0a61\bi\u0001"+
		"j\u0001j\u0001j\u0005j\u0a66\bj\nj\fj\u0a69\tj\u0001k\u0001k\u0001k\u0005"+
		"k\u0a6e\bk\nk\fk\u0a71\tk\u0001l\u0001l\u0001l\u0005l\u0a76\bl\nl\fl\u0a79"+
		"\tl\u0001m\u0001m\u0001m\u0003m\u0a7e\bm\u0001n\u0001n\u0001n\u0003n\u0a83"+
		"\bn\u0001n\u0001n\u0001o\u0001o\u0001o\u0003o\u0a8a\bo\u0001o\u0001o\u0001"+
		"p\u0001p\u0003p\u0a90\bp\u0001p\u0001p\u0003p\u0a94\bp\u0003p\u0a96\b"+
		"p\u0001q\u0001q\u0001q\u0005q\u0a9b\bq\nq\fq\u0a9e\tq\u0001q\u0001q\u0001"+
		"q\u0001q\u0001q\u0001q\u0003q\u0aa6\bq\u0001r\u0001r\u0001s\u0001s\u0001"+
		"s\u0005s\u0aad\bs\ns\fs\u0ab0\ts\u0001t\u0001t\u0001t\u0001t\u0001t\u0001"+
		"u\u0001u\u0001u\u0005u\u0aba\bu\nu\fu\u0abd\tu\u0001v\u0001v\u0001v\u0001"+
		"v\u0001w\u0001w\u0001x\u0001x\u0001x\u0001x\u0005x\u0ac9\bx\nx\fx\u0acc"+
		"\tx\u0001x\u0001x\u0001y\u0001y\u0003y\u0ad2\by\u0001z\u0001z\u0001z\u0001"+
		"z\u0001z\u0001z\u0005z\u0ada\bz\nz\fz\u0add\tz\u0001z\u0001z\u0003z\u0ae1"+
		"\bz\u0001{\u0001{\u0003{\u0ae5\b{\u0001|\u0001|\u0001}\u0001}\u0001}\u0005"+
		"}\u0aec\b}\n}\f}\u0aef\t}\u0001~\u0001~\u0001~\u0001~\u0001~\u0001~\u0001"+
		"~\u0001~\u0001~\u0001~\u0003~\u0afb\b~\u0003~\u0afd\b~\u0001~\u0001~\u0001"+
		"~\u0001~\u0001~\u0001~\u0005~\u0b05\b~\n~\f~\u0b08\t~\u0001\u007f\u0003"+
		"\u007f\u0b0b\b\u007f\u0001\u007f\u0001\u007f\u0001\u007f\u0001\u007f\u0001"+
		"\u007f\u0001\u007f\u0003\u007f\u0b13\b\u007f\u0001\u007f\u0001\u007f\u0001"+
		"\u007f\u0001\u007f\u0001\u007f\u0005\u007f\u0b1a\b\u007f\n\u007f\f\u007f"+
		"\u0b1d\t\u007f\u0001\u007f\u0001\u007f\u0001\u007f\u0003\u007f\u0b22\b"+
		"\u007f\u0001\u007f\u0001\u007f\u0001\u007f\u0001\u007f\u0001\u007f\u0001"+
		"\u007f\u0003\u007f\u0b2a\b\u007f\u0001\u007f\u0001\u007f\u0001\u007f\u0003"+
		"\u007f\u0b2f\b\u007f\u0001\u007f\u0001\u007f\u0001\u007f\u0001\u007f\u0001"+
		"\u007f\u0001\u007f\u0001\u007f\u0001\u007f\u0005\u007f\u0b39\b\u007f\n"+
		"\u007f\f\u007f\u0b3c\t\u007f\u0001\u007f\u0001\u007f\u0003\u007f\u0b40"+
		"\b\u007f\u0001\u007f\u0003\u007f\u0b43\b\u007f\u0001\u007f\u0001\u007f"+
		"\u0001\u007f\u0001\u007f\u0003\u007f\u0b49\b\u007f\u0001\u007f\u0001\u007f"+
		"\u0003\u007f\u0b4d\b\u007f\u0001\u007f\u0001\u007f\u0001\u007f\u0003\u007f"+
		"\u0b52\b\u007f\u0001\u007f\u0001\u007f\u0001\u007f\u0003\u007f\u0b57\b"+
		"\u007f\u0001\u007f\u0001\u007f\u0001\u007f\u0003\u007f\u0b5c\b\u007f\u0001"+
		"\u0080\u0001\u0080\u0001\u0080\u0001\u0080\u0003\u0080\u0b62\b\u0080\u0001"+
		"\u0080\u0001\u0080\u0001\u0080\u0001\u0080\u0001\u0080\u0001\u0080\u0001"+
		"\u0080\u0001\u0080\u0001\u0080\u0001\u0080\u0001\u0080\u0001\u0080\u0001"+
		"\u0080\u0001\u0080\u0001\u0080\u0001\u0080\u0001\u0080\u0001\u0080\u0001"+
		"\u0080\u0005\u0080\u0b77\b\u0080\n\u0080\f\u0080\u0b7a\t\u0080\u0001\u0081"+
		"\u0001\u0081\u0001\u0082\u0001\u0082\u0001\u0082\u0001\u0082\u0001\u0082"+
		"\u0001\u0082\u0001\u0082\u0001\u0082\u0001\u0082\u0001\u0082\u0001\u0082"+
		"\u0001\u0082\u0001\u0082\u0001\u0082\u0001\u0082\u0001\u0082\u0001\u0082"+
		"\u0001\u0082\u0001\u0082\u0001\u0082\u0001\u0082\u0001\u0082\u0004\u0082"+
		"\u0b94\b\u0082\u000b\u0082\f\u0082\u0b95\u0001\u0082\u0001\u0082\u0003"+
		"\u0082\u0b9a\b\u0082\u0001\u0082\u0001\u0082\u0001\u0082\u0001\u0082\u0001"+
		"\u0082\u0004\u0082\u0ba1\b\u0082\u000b\u0082\f\u0082\u0ba2\u0001\u0082"+
		"\u0001\u0082\u0003\u0082\u0ba7\b\u0082\u0001\u0082\u0001\u0082\u0001\u0082"+
		"\u0001\u0082\u0001\u0082\u0001\u0082\u0001\u0082\u0001\u0082\u0001\u0082"+
		"\u0001\u0082\u0001\u0082\u0001\u0082\u0001\u0082\u0001\u0082\u0005\u0082"+
		"\u0bb7\b\u0082\n\u0082\f\u0082\u0bba\t\u0082\u0003\u0082\u0bbc\b\u0082"+
		"\u0001\u0082\u0001\u0082\u0001\u0082\u0001\u0082\u0001\u0082\u0001\u0082"+
		"\u0003\u0082\u0bc4\b\u0082\u0001\u0082\u0001\u0082\u0001\u0082\u0001\u0082"+
		"\u0001\u0082\u0001\u0082\u0001\u0082\u0003\u0082\u0bcd\b\u0082\u0001\u0082"+
		"\u0001\u0082\u0001\u0082\u0001\u0082\u0001\u0082\u0001\u0082\u0001\u0082"+
		"\u0003\u0082\u0bd6\b\u0082\u0001\u0082\u0001\u0082\u0001\u0082\u0001\u0082"+
		"\u0001\u0082\u0001\u0082\u0001\u0082\u0001\u0082\u0001\u0082\u0001\u0082"+
		"\u0001\u0082\u0001\u0082\u0001\u0082\u0001\u0082\u0001\u0082\u0001\u0082"+
		"\u0001\u0082\u0001\u0082\u0001\u0082\u0001\u0082\u0004\u0082\u0bec\b\u0082"+
		"\u000b\u0082\f\u0082\u0bed\u0001\u0082\u0001\u0082\u0001\u0082\u0001\u0082"+
		"\u0001\u0082\u0001\u0082\u0001\u0082\u0001\u0082\u0001\u0082\u0003\u0082"+
		"\u0bf9\b\u0082\u0001\u0082\u0001\u0082\u0001\u0082\u0005\u0082\u0bfe\b"+
		"\u0082\n\u0082\f\u0082\u0c01\t\u0082\u0003\u0082\u0c03\b\u0082\u0001\u0082"+
		"\u0001\u0082\u0001\u0082\u0001\u0082\u0001\u0082\u0001\u0082\u0001\u0082"+
		"\u0003\u0082\u0c0c\b\u0082\u0001\u0082\u0001\u0082\u0003\u0082\u0c10\b"+
		"\u0082\u0001\u0082\u0001\u0082\u0003\u0082\u0c14\b\u0082\u0001\u0082\u0001"+
		"\u0082\u0001\u0082\u0001\u0082\u0001\u0082\u0001\u0082\u0001\u0082\u0001"+
		"\u0082\u0004\u0082\u0c1e\b\u0082\u000b\u0082\f\u0082\u0c1f\u0001\u0082"+
		"\u0001\u0082\u0001\u0082\u0001\u0082\u0001\u0082\u0001\u0082\u0001\u0082"+
		"\u0001\u0082\u0001\u0082\u0001\u0082\u0001\u0082\u0001\u0082\u0001\u0082"+
		"\u0001\u0082\u0001\u0082\u0001\u0082\u0001\u0082\u0001\u0082\u0001\u0082"+
		"\u0001\u0082\u0001\u0082\u0001\u0082\u0001\u0082\u0001\u0082\u0001\u0082"+
		"\u0001\u0082\u0001\u0082\u0003\u0082\u0c3d\b\u0082\u0001\u0082\u0001\u0082"+
		"\u0001\u0082\u0001\u0082\u0001\u0082\u0003\u0082\u0c44\b\u0082\u0001\u0082"+
		"\u0003\u0082\u0c47\b\u0082\u0001\u0082\u0001\u0082\u0001\u0082\u0001\u0082"+
		"\u0001\u0082\u0001\u0082\u0001\u0082\u0001\u0082\u0001\u0082\u0001\u0082"+
		"\u0001\u0082\u0001\u0082\u0001\u0082\u0003\u0082\u0c56\b\u0082\u0001\u0082"+
		"\u0001\u0082\u0001\u0082\u0001\u0082\u0001\u0082\u0001\u0082\u0001\u0082"+
		"\u0001\u0082\u0001\u0082\u0001\u0082\u0001\u0082\u0001\u0082\u0001\u0082"+
		"\u0001\u0082\u0001\u0082\u0001\u0082\u0001\u0082\u0001\u0082\u0001\u0082"+
		"\u0003\u0082\u0c6b\b\u0082\u0001\u0082\u0001\u0082\u0003\u0082\u0c6f\b"+
		"\u0082\u0003\u0082\u0c71\b\u0082\u0001\u0082\u0001\u0082\u0001\u0082\u0001"+
		"\u0082\u0001\u0082\u0001\u0082\u0001\u0082\u0001\u0082\u0005\u0082\u0c7b"+
		"\b\u0082\n\u0082\f\u0082\u0c7e\t\u0082\u0001\u0083\u0001\u0083\u0001\u0083"+
		"\u0005\u0083\u0c83\b\u0083\n\u0083\f\u0083\u0c86\t\u0083\u0001\u0084\u0001"+
		"\u0084\u0001\u0084\u0001\u0084\u0001\u0084\u0001\u0084\u0001\u0084\u0001"+
		"\u0084\u0001\u0084\u0001\u0084\u0004\u0084\u0c92\b\u0084\u000b\u0084\f"+
		"\u0084\u0c93\u0001\u0084\u0003\u0084\u0c97\b\u0084\u0001\u0085\u0001\u0085"+
		"\u0001\u0086\u0001\u0086\u0001\u0087\u0001\u0087\u0001\u0088\u0001\u0088"+
		"\u0001\u0089\u0001\u0089\u0001\u0089\u0003\u0089\u0ca4\b\u0089\u0001\u008a"+
		"\u0001\u008a\u0003\u008a\u0ca8\b\u008a\u0001\u008b\u0001\u008b\u0001\u008b"+
		"\u0004\u008b\u0cad\b\u008b\u000b\u008b\f\u008b\u0cae\u0001\u008c\u0001"+
		"\u008c\u0001\u008c\u0003\u008c\u0cb4\b\u008c\u0001\u008d\u0001\u008d\u0001"+
		"\u008d\u0001\u008d\u0001\u008d\u0001\u008e\u0003\u008e\u0cbc\b\u008e\u0001"+
		"\u008e\u0001\u008e\u0001\u008e\u0003\u008e\u0cc1\b\u008e\u0001\u008f\u0001"+
		"\u008f\u0001\u0090\u0001\u0090\u0001\u0091\u0001\u0091\u0001\u0091\u0003"+
		"\u0091\u0cca\b\u0091\u0001\u0092\u0001\u0092\u0001\u0092\u0001\u0092\u0001"+
		"\u0092\u0001\u0092\u0001\u0092\u0001\u0092\u0001\u0092\u0001\u0092\u0001"+
		"\u0092\u0001\u0092\u0001\u0092\u0001\u0092\u0001\u0092\u0003\u0092\u0cdb"+
		"\b\u0092\u0001\u0092\u0001\u0092\u0003\u0092\u0cdf\b\u0092\u0001\u0092"+
		"\u0001\u0092\u0001\u0092\u0001\u0092\u0003\u0092\u0ce5\b\u0092\u0001\u0092"+
		"\u0001\u0092\u0001\u0092\u0001\u0092\u0003\u0092\u0ceb\b\u0092\u0001\u0092"+
		"\u0001\u0092\u0001\u0092\u0001\u0092\u0001\u0092\u0005\u0092\u0cf2\b\u0092"+
		"\n\u0092\f\u0092\u0cf5\t\u0092\u0001\u0092\u0003\u0092\u0cf8\b\u0092\u0003"+
		"\u0092\u0cfa\b\u0092\u0001\u0093\u0001\u0093\u0001\u0093\u0005\u0093\u0cff"+
		"\b\u0093\n\u0093\f\u0093\u0d02\t\u0093\u0001\u0094\u0001\u0094\u0001\u0094"+
		"\u0005\u0094\u0d07\b\u0094\n\u0094\f\u0094\u0d0a\t\u0094\u0001\u0095\u0001"+
		"\u0095\u0001\u0095\u0001\u0095\u0001\u0095\u0003\u0095\u0d11\b\u0095\u0001"+
		"\u0096\u0001\u0096\u0001\u0096\u0001\u0097\u0001\u0097\u0001\u0097\u0005"+
		"\u0097\u0d19\b\u0097\n\u0097\f\u0097\u0d1c\t\u0097\u0001\u0098\u0001\u0098"+
		"\u0001\u0098\u0001\u0098\u0003\u0098\u0d22\b\u0098\u0001\u0098\u0003\u0098"+
		"\u0d25\b\u0098\u0001\u0099\u0001\u0099\u0001\u0099\u0005\u0099\u0d2a\b"+
		"\u0099\n\u0099\f\u0099\u0d2d\t\u0099\u0001\u009a\u0001\u009a\u0001\u009a"+
		"\u0005\u009a\u0d32\b\u009a\n\u009a\f\u009a\u0d35\t\u009a\u0001\u009b\u0001"+
		"\u009b\u0001\u009b\u0001\u009b\u0001\u009b\u0003\u009b\u0d3c\b\u009b\u0001"+
		"\u009c\u0001\u009c\u0001\u009c\u0001\u009c\u0001\u009c\u0001\u009c\u0001"+
		"\u009c\u0001\u009d\u0001\u009d\u0001\u009d\u0005\u009d\u0d48\b\u009d\n"+
		"\u009d\f\u009d\u0d4b\t\u009d\u0001\u009e\u0001\u009e\u0003\u009e\u0d4f"+
		"\b\u009e\u0001\u009e\u0001\u009e\u0001\u009e\u0003\u009e\u0d54\b\u009e"+
		"\u0001\u009e\u0003\u009e\u0d57\b\u009e\u0001\u009f\u0001\u009f\u0001\u009f"+
		"\u0001\u009f\u0001\u009f\u0001\u00a0\u0001\u00a0\u0001\u00a0\u0001\u00a0"+
		"\u0005\u00a0\u0d62\b\u00a0\n\u00a0\f\u00a0\u0d65\t\u00a0\u0001\u00a1\u0001"+
		"\u00a1\u0001\u00a1\u0001\u00a1\u0001\u00a2\u0001\u00a2\u0001\u00a2\u0001"+
		"\u00a2\u0001\u00a2\u0001\u00a2\u0001\u00a2\u0001\u00a2\u0001\u00a2\u0001"+
		"\u00a2\u0001\u00a2\u0005\u00a2\u0d76\b\u00a2\n\u00a2\f\u00a2\u0d79\t\u00a2"+
		"\u0001\u00a2\u0001\u00a2\u0001\u00a2\u0001\u00a2\u0001\u00a2\u0005\u00a2"+
		"\u0d80\b\u00a2\n\u00a2\f\u00a2\u0d83\t\u00a2\u0003\u00a2\u0d85\b\u00a2"+
		"\u0001\u00a2\u0001\u00a2\u0001\u00a2\u0001\u00a2\u0001\u00a2\u0005\u00a2"+
		"\u0d8c\b\u00a2\n\u00a2\f\u00a2\u0d8f\t\u00a2\u0003\u00a2\u0d91\b\u00a2"+
		"\u0003\u00a2\u0d93\b\u00a2\u0001\u00a2\u0003\u00a2\u0d96\b\u00a2\u0001"+
		"\u00a2\u0003\u00a2\u0d99\b\u00a2\u0001\u00a3\u0001\u00a3\u0001\u00a3\u0001"+
		"\u00a3\u0001\u00a3\u0001\u00a3\u0001\u00a3\u0001\u00a3\u0001\u00a3\u0001"+
		"\u00a3\u0001\u00a3\u0001\u00a3\u0001\u00a3\u0001\u00a3\u0001\u00a3\u0001"+
		"\u00a3\u0003\u00a3\u0dab\b\u00a3\u0001\u00a4\u0001\u00a4\u0001\u00a4\u0001"+
		"\u00a4\u0001\u00a4\u0001\u00a4\u0001\u00a4\u0003\u00a4\u0db4\b\u00a4\u0001"+
		"\u00a5\u0001\u00a5\u0001\u00a5\u0005\u00a5\u0db9\b\u00a5\n\u00a5\f\u00a5"+
		"\u0dbc\t\u00a5\u0001\u00a6\u0001\u00a6\u0001\u00a6\u0001\u00a6\u0003\u00a6"+
		"\u0dc2\b\u00a6\u0001\u00a7\u0001\u00a7\u0001\u00a7\u0005\u00a7\u0dc7\b"+
		"\u00a7\n\u00a7\f\u00a7\u0dca\t\u00a7\u0001\u00a8\u0001\u00a8\u0001\u00a8"+
		"\u0001\u00a9\u0001\u00a9\u0004\u00a9\u0dd1\b\u00a9\u000b\u00a9\f\u00a9"+
		"\u0dd2\u0001\u00a9\u0003\u00a9\u0dd6\b\u00a9\u0001\u00aa\u0001\u00aa\u0001"+
		"\u00aa\u0003\u00aa\u0ddb\b\u00aa\u0001\u00ab\u0001\u00ab\u0001\u00ab\u0001"+
		"\u00ab\u0001\u00ab\u0001\u00ab\u0003\u00ab\u0de3\b\u00ab\u0001\u00ac\u0001"+
		"\u00ac\u0001\u00ac\u0003\u00ac\u0de8\b\u00ac\u0001\u00ad\u0001\u00ad\u0001"+
		"\u00ae\u0001\u00ae\u0003\u00ae\u0dee\b\u00ae\u0001\u00ae\u0001\u00ae\u0001"+
		"\u00ae\u0003\u00ae\u0df3\b\u00ae\u0001\u00ae\u0001\u00ae\u0001\u00ae\u0003"+
		"\u00ae\u0df8\b\u00ae\u0001\u00ae\u0001\u00ae\u0003\u00ae\u0dfc\b\u00ae"+
		"\u0001\u00ae\u0001\u00ae\u0003\u00ae\u0e00\b\u00ae\u0001\u00ae\u0001\u00ae"+
		"\u0003\u00ae\u0e04\b\u00ae\u0001\u00ae\u0001\u00ae\u0003\u00ae\u0e08\b"+
		"\u00ae\u0001\u00ae\u0001\u00ae\u0003\u00ae\u0e0c\b\u00ae\u0001\u00ae\u0001"+
		"\u00ae\u0003\u00ae\u0e10\b\u00ae\u0001\u00ae\u0001\u00ae\u0003\u00ae\u0e14"+
		"\b\u00ae\u0001\u00ae\u0003\u00ae\u0e17\b\u00ae\u0001\u00af\u0001\u00af"+
		"\u0001\u00af\u0001\u00af\u0001\u00af\u0001\u00af\u0001\u00af\u0001\u00af"+
		"\u0001\u00af\u0001\u00af\u0001\u00af\u0003\u00af\u0e24\b\u00af\u0001\u00b0"+
		"\u0001\u00b0\u0001\u00b0\u0003\u00b0\u0e29\b\u00b0\u0001\u00b1\u0001\u00b1"+
		"\u0003\u00b1\u0e2d\b\u00b1\u0001\u00b2\u0001\u00b2\u0003\u00b2\u0e31\b"+
		"\u00b2\u0001\u00b3\u0001\u00b3\u0001\u00b4\u0001\u00b4\u0001\u00b5\u0001"+
		"\u00b5\u0001\u00b5\t\u03f6\u0439\u0441\u0452\u0460\u0469\u0472\u047b\u04a7"+
		"\u0004X\u00fc\u0100\u0104\u00b6\u0000\u0002\u0004\u0006\b\n\f\u000e\u0010"+
		"\u0012\u0014\u0016\u0018\u001a\u001c\u001e \"$&(*,.02468:<>@BDFHJLNPR"+
		"TVXZ\\^`bdfhjlnprtvxz|~\u0080\u0082\u0084\u0086\u0088\u008a\u008c\u008e"+
		"\u0090\u0092\u0094\u0096\u0098\u009a\u009c\u009e\u00a0\u00a2\u00a4\u00a6"+
		"\u00a8\u00aa\u00ac\u00ae\u00b0\u00b2\u00b4\u00b6\u00b8\u00ba\u00bc\u00be"+
		"\u00c0\u00c2\u00c4\u00c6\u00c8\u00ca\u00cc\u00ce\u00d0\u00d2\u00d4\u00d6"+
		"\u00d8\u00da\u00dc\u00de\u00e0\u00e2\u00e4\u00e6\u00e8\u00ea\u00ec\u00ee"+
		"\u00f0\u00f2\u00f4\u00f6\u00f8\u00fa\u00fc\u00fe\u0100\u0102\u0104\u0106"+
		"\u0108\u010a\u010c\u010e\u0110\u0112\u0114\u0116\u0118\u011a\u011c\u011e"+
		"\u0120\u0122\u0124\u0126\u0128\u012a\u012c\u012e\u0130\u0132\u0134\u0136"+
		"\u0138\u013a\u013c\u013e\u0140\u0142\u0144\u0146\u0148\u014a\u014c\u014e"+
		"\u0150\u0152\u0154\u0156\u0158\u015a\u015c\u015e\u0160\u0162\u0164\u0166"+
		"\u0168\u016a\u0000;\u0002\u0000KK\u00d0\u00d0\u0002\u0000$$\u00e1\u00e1"+
		"\u0002\u0000qq\u0080\u0080\u0001\u000012\u0002\u0000\u0108\u0108\u012e"+
		"\u012e\u0002\u0000\u0011\u0011))\u0005\u0000..::ccpp\u009e\u009e\u0001"+
		"\u0000PQ\u0002\u0000ccpp\u0003\u0000\u000e\u000eXX\u0105\u0105\u0002\u0000"+
		"\u000e\u000e\u0098\u0098\u0003\u0000GG\u00ac\u00ac\u00ed\u00ed\u0003\u0000"+
		"HH\u00ad\u00ad\u00ee\u00ee\u0004\u0000]]\u0088\u0088\u00f6\u00f6\u0122"+
		"\u0122\u0003\u0000]]\u00f6\u00f6\u0122\u0122\u0002\u0000\u001b\u001bP"+
		"P\u0002\u0000kk\u008f\u008f\u0002\u0000\u0107\u0107\u012d\u012d\u0002"+
		"\u0000\u0106\u0106\u0111\u0111\u0002\u0000==\u00e8\u00e8\u0002\u0000_"+
		"_\u0081\u0081\u0002\u0000\u0010\u0010UU\u0002\u0000\u0156\u0156\u0158"+
		"\u0158\u0001\u0000\n\r\u0001\u0000\u0094\u0095\u0003\u0000\u0010\u0010"+
		"\u0016\u0016\u00fa\u00fa\u0003\u0000ff\u011b\u011b\u0124\u0124\u0002\u0000"+
		"\u0142\u0143\u0148\u0148\u0003\u0000WW\u0144\u0144\u0146\u0147\u0002\u0000"+
		"\u0142\u0143\u014b\u014b\u000b\u0000CCEE{{\u00a3\u00a3\u00a5\u00a5\u00a7"+
		"\u00a7\u00a9\u00a9\u00d2\u00d2\u00eb\u00eb\u0130\u0130\u0137\u0137\u0003"+
		"\u0000??AB\u012a\u012a\u0002\u0000II\u0112\u0112\u0002\u0000JJ\u0113\u0113"+
		"\u0002\u0000&&\u011d\u011d\u0002\u0000~~\u00e0\u00e0\u0001\u0000\u0103"+
		"\u0104\u0002\u0000\u0004\u0004qq\u0002\u0000\u0004\u0004mm\u0003\u0000"+
		"\u001f\u001f\u0092\u0092\u0116\u0116\u0001\u0000\u00c7\u00c8\u0001\u0000"+
		"\u013a\u0141\u0003\u0000WW\u0142\u0144\u0146\u014c\u0004\u0000\u0014\u0014"+
		"\u0080\u0080\u00b2\u00b2\u00bb\u00bb\u0002\u0000ff\u011b\u011b\u0001\u0000"+
		"\u0142\u0143\u0007\u0000CD{|\u00a3\u00aa\u00ae\u00af\u00eb\u00ec\u0130"+
		"\u0131\u0137\u0138\u0006\u0000CC{{\u00a7\u00a7\u00a9\u00a9\u00eb\u00eb"+
		"\u0137\u0137\u0002\u0000\u00a9\u00a9\u0137\u0137\u0004\u0000CC{{\u00a7"+
		"\u00a7\u00eb\u00eb\u0003\u0000{{\u00a7\u00a7\u00eb\u00eb\u0002\u0000V"+
		"V\u00c4\u00c4\u0002\u0000\u00bc\u00bc\u00fb\u00fb\u0002\u0000ll\u00cd"+
		"\u00cd\u0001\u0000\u0157\u0158\u0002\u0000XX\u00f5\u00f53\u0000\u000e"+
		"\u000f\u0011\u0013\u0015\u0015\u0017\u0019\u001b\u001c\u001e\u001e $\'"+
		")+.0028::=>CTVX\\\\^ehhjlopsvyy{\u007f\u0081\u0083\u0085\u0087\u0089\u0089"+
		"\u008c\u008c\u008e\u008f\u0091\u0091\u0094\u00af\u00b1\u00b1\u00b4\u00b5"+
		"\u00b9\u00ba\u00bd\u00bd\u00bf\u00c0\u00c2\u00c6\u00c9\u00cd\u00cf\u00d8"+
		"\u00da\u00e2\u00e4\u00ee\u00f0\u00f3\u00f5\u00f9\u00fb\u0107\u0109\u010e"+
		"\u0111\u0113\u0115\u0115\u0117\u0121\u0125\u0129\u012c\u0131\u0134\u0134"+
		"\u0137\u0139\u0010\u0000\u0015\u0015<<]]rr\u0084\u0084\u0088\u0088\u008d"+
		"\u008d\u0090\u0090\u0093\u0093\u00b0\u00b0\u00b7\u00b7\u00e3\u00e3\u00f0"+
		"\u00f0\u00f6\u00f6\u0122\u0122\u012b\u012b\u0011\u0000\u000e\u0014\u0016"+
		";=\\^qs\u0083\u0085\u0087\u0089\u008c\u008e\u008f\u0091\u0092\u0094\u00af"+
		"\u00b1\u00b6\u00b8\u00e2\u00e4\u00ef\u00f1\u00f5\u00f7\u0121\u0123\u012a"+
		"\u012c\u0139\u1047\u0000\u016c\u0001\u0000\u0000\u0000\u0002\u0175\u0001"+
		"\u0000\u0000\u0000\u0004\u0178\u0001\u0000\u0000\u0000\u0006\u017b\u0001"+
		"\u0000\u0000\u0000\b\u017e\u0001\u0000\u0000\u0000\n\u0181\u0001\u0000"+
		"\u0000\u0000\f\u0184\u0001\u0000\u0000\u0000\u000e\u04aa\u0001\u0000\u0000"+
		"\u0000\u0010\u04ae\u0001\u0000\u0000\u0000\u0012\u04b0\u0001\u0000\u0000"+
		"\u0000\u0014\u04b2\u0001\u0000\u0000\u0000\u0016\u055c\u0001\u0000\u0000"+
		"\u0000\u0018\u055e\u0001\u0000\u0000\u0000\u001a\u056f\u0001\u0000\u0000"+
		"\u0000\u001c\u0575\u0001\u0000\u0000\u0000\u001e\u0581\u0001\u0000\u0000"+
		"\u0000 \u058e\u0001\u0000\u0000\u0000\"\u0591\u0001\u0000\u0000\u0000"+
		"$\u0595\u0001\u0000\u0000\u0000&\u05e0\u0001\u0000\u0000\u0000(\u05e2"+
		"\u0001\u0000\u0000\u0000*\u05e6\u0001\u0000\u0000\u0000,\u05fb\u0001\u0000"+
		"\u0000\u0000.\u05fd\u0001\u0000\u0000\u00000\u05ff\u0001\u0000\u0000\u0000"+
		"2\u0606\u0001\u0000\u0000\u00004\u0608\u0001\u0000\u0000\u00006\u0610"+
		"\u0001\u0000\u0000\u00008\u0619\u0001\u0000\u0000\u0000:\u0624\u0001\u0000"+
		"\u0000\u0000<\u0636\u0001\u0000\u0000\u0000>\u0639\u0001\u0000\u0000\u0000"+
		"@\u0644\u0001\u0000\u0000\u0000B\u0654\u0001\u0000\u0000\u0000D\u065a"+
		"\u0001\u0000\u0000\u0000F\u065c\u0001\u0000\u0000\u0000H\u0667\u0001\u0000"+
		"\u0000\u0000J\u0678\u0001\u0000\u0000\u0000L\u0680\u0001\u0000\u0000\u0000"+
		"N\u0682\u0001\u0000\u0000\u0000P\u0688\u0001\u0000\u0000\u0000R\u06c3"+
		"\u0001\u0000\u0000\u0000T\u06cf\u0001\u0000\u0000\u0000V\u0703\u0001\u0000"+
		"\u0000\u0000X\u0706\u0001\u0000\u0000\u0000Z\u072c\u0001\u0000\u0000\u0000"+
		"\\\u072e\u0001\u0000\u0000\u0000^\u0736\u0001\u0000\u0000\u0000`\u0757"+
		"\u0001\u0000\u0000\u0000b\u0785\u0001\u0000\u0000\u0000d\u079a\u0001\u0000"+
		"\u0000\u0000f\u07ba\u0001\u0000\u0000\u0000h\u07c6\u0001\u0000\u0000\u0000"+
		"j\u07c9\u0001\u0000\u0000\u0000l\u07d2\u0001\u0000\u0000\u0000n\u07e0"+
		"\u0001\u0000\u0000\u0000p\u07f3\u0001\u0000\u0000\u0000r\u0807\u0001\u0000"+
		"\u0000\u0000t\u080d\u0001\u0000\u0000\u0000v\u080f\u0001\u0000\u0000\u0000"+
		"x\u0817\u0001\u0000\u0000\u0000z\u081b\u0001\u0000\u0000\u0000|\u081e"+
		"\u0001\u0000\u0000\u0000~\u0821\u0001\u0000\u0000\u0000\u0080\u083b\u0001"+
		"\u0000\u0000\u0000\u0082\u083d\u0001\u0000\u0000\u0000\u0084\u0860\u0001"+
		"\u0000\u0000\u0000\u0086\u0889\u0001\u0000\u0000\u0000\u0088\u088d\u0001"+
		"\u0000\u0000\u0000\u008a\u08a8\u0001\u0000\u0000\u0000\u008c\u08ac\u0001"+
		"\u0000\u0000\u0000\u008e\u08bb\u0001\u0000\u0000\u0000\u0090\u08bd\u0001"+
		"\u0000\u0000\u0000\u0092\u08db\u0001\u0000\u0000\u0000\u0094\u08dd\u0001"+
		"\u0000\u0000\u0000\u0096\u08e4\u0001\u0000\u0000\u0000\u0098\u08f1\u0001"+
		"\u0000\u0000\u0000\u009a\u08f6\u0001\u0000\u0000\u0000\u009c\u08f8\u0001"+
		"\u0000\u0000\u0000\u009e\u0907\u0001\u0000\u0000\u0000\u00a0\u091f\u0001"+
		"\u0000\u0000\u0000\u00a2\u092c\u0001\u0000\u0000\u0000\u00a4\u092e\u0001"+
		"\u0000\u0000\u0000\u00a6\u0930\u0001\u0000\u0000\u0000\u00a8\u0934\u0001"+
		"\u0000\u0000\u0000\u00aa\u0937\u0001\u0000\u0000\u0000\u00ac\u093b\u0001"+
		"\u0000\u0000\u0000\u00ae\u095b\u0001\u0000\u0000\u0000\u00b0\u095e\u0001"+
		"\u0000\u0000\u0000\u00b2\u096a\u0001\u0000\u0000\u0000\u00b4\u097d\u0001"+
		"\u0000\u0000\u0000\u00b6\u0997\u0001\u0000\u0000\u0000\u00b8\u099d\u0001"+
		"\u0000\u0000\u0000\u00ba\u099f\u0001\u0000\u0000\u0000\u00bc\u09c3\u0001"+
		"\u0000\u0000\u0000\u00be\u09c5\u0001\u0000\u0000\u0000\u00c0\u09c9\u0001"+
		"\u0000\u0000\u0000\u00c2\u09d1\u0001\u0000\u0000\u0000\u00c4\u09dc\u0001"+
		"\u0000\u0000\u0000\u00c6\u09e0\u0001\u0000\u0000\u0000\u00c8\u09eb\u0001"+
		"\u0000\u0000\u0000\u00ca\u0a0a\u0001\u0000\u0000\u0000\u00cc\u0a0c\u0001"+
		"\u0000\u0000\u0000\u00ce\u0a17\u0001\u0000\u0000\u0000\u00d0\u0a2d\u0001"+
		"\u0000\u0000\u0000\u00d2\u0a60\u0001\u0000\u0000\u0000\u00d4\u0a62\u0001"+
		"\u0000\u0000\u0000\u00d6\u0a6a\u0001\u0000\u0000\u0000\u00d8\u0a72\u0001"+
		"\u0000\u0000\u0000\u00da\u0a7a\u0001\u0000\u0000\u0000\u00dc\u0a82\u0001"+
		"\u0000\u0000\u0000\u00de\u0a89\u0001\u0000\u0000\u0000\u00e0\u0a8d\u0001"+
		"\u0000\u0000\u0000\u00e2\u0aa5\u0001\u0000\u0000\u0000\u00e4\u0aa7\u0001"+
		"\u0000\u0000\u0000\u00e6\u0aa9\u0001\u0000\u0000\u0000\u00e8\u0ab1\u0001"+
		"\u0000\u0000\u0000\u00ea\u0ab6\u0001\u0000\u0000\u0000\u00ec\u0abe\u0001"+
		"\u0000\u0000\u0000\u00ee\u0ac2\u0001\u0000\u0000\u0000\u00f0\u0ac4\u0001"+
		"\u0000\u0000\u0000\u00f2\u0ad1\u0001\u0000\u0000\u0000\u00f4\u0ae0\u0001"+
		"\u0000\u0000\u0000\u00f6\u0ae4\u0001\u0000\u0000\u0000\u00f8\u0ae6\u0001"+
		"\u0000\u0000\u0000\u00fa\u0ae8\u0001\u0000\u0000\u0000\u00fc\u0afc\u0001"+
		"\u0000\u0000\u0000\u00fe\u0b5b\u0001\u0000\u0000\u0000\u0100\u0b61\u0001"+
		"\u0000\u0000\u0000\u0102\u0b7b\u0001\u0000\u0000\u0000\u0104\u0c70\u0001"+
		"\u0000\u0000\u0000\u0106\u0c7f\u0001\u0000\u0000\u0000\u0108\u0c96\u0001"+
		"\u0000\u0000\u0000\u010a\u0c98\u0001\u0000\u0000\u0000\u010c\u0c9a\u0001"+
		"\u0000\u0000\u0000\u010e\u0c9c\u0001\u0000\u0000\u0000\u0110\u0c9e\u0001"+
		"\u0000\u0000\u0000\u0112\u0ca0\u0001\u0000\u0000\u0000\u0114\u0ca5\u0001"+
		"\u0000\u0000\u0000\u0116\u0cac\u0001\u0000\u0000\u0000\u0118\u0cb0\u0001"+
		"\u0000\u0000\u0000\u011a\u0cb5\u0001\u0000\u0000\u0000\u011c\u0cbb\u0001"+
		"\u0000\u0000\u0000\u011e\u0cc2\u0001\u0000\u0000\u0000\u0120\u0cc4\u0001"+
		"\u0000\u0000\u0000\u0122\u0cc9\u0001\u0000\u0000\u0000\u0124\u0cf9\u0001"+
		"\u0000\u0000\u0000\u0126\u0cfb\u0001\u0000\u0000\u0000\u0128\u0d03\u0001"+
		"\u0000\u0000\u0000\u012a\u0d10\u0001\u0000\u0000\u0000\u012c\u0d12\u0001"+
		"\u0000\u0000\u0000\u012e\u0d15\u0001\u0000\u0000\u0000\u0130\u0d1d\u0001"+
		"\u0000\u0000\u0000\u0132\u0d26\u0001\u0000\u0000\u0000\u0134\u0d2e\u0001"+
		"\u0000\u0000\u0000\u0136\u0d3b\u0001\u0000\u0000\u0000\u0138\u0d3d\u0001"+
		"\u0000\u0000\u0000\u013a\u0d44\u0001\u0000\u0000\u0000\u013c\u0d4c\u0001"+
		"\u0000\u0000\u0000\u013e\u0d58\u0001\u0000\u0000\u0000\u0140\u0d5d\u0001"+
		"\u0000\u0000\u0000\u0142\u0d66\u0001\u0000\u0000\u0000\u0144\u0d98\u0001"+
		"\u0000\u0000\u0000\u0146\u0daa\u0001\u0000\u0000\u0000\u0148\u0db3\u0001"+
		"\u0000\u0000\u0000\u014a\u0db5\u0001\u0000\u0000\u0000\u014c\u0dc1\u0001"+
		"\u0000\u0000\u0000\u014e\u0dc3\u0001\u0000\u0000\u0000\u0150\u0dcb\u0001"+
		"\u0000\u0000\u0000\u0152\u0dd5\u0001\u0000\u0000\u0000\u0154\u0dda\u0001"+
		"\u0000\u0000\u0000\u0156\u0de2\u0001\u0000\u0000\u0000\u0158\u0de7\u0001"+
		"\u0000\u0000\u0000\u015a\u0de9\u0001\u0000\u0000\u0000\u015c\u0e16\u0001"+
		"\u0000\u0000\u0000\u015e\u0e23\u0001\u0000\u0000\u0000\u0160\u0e28\u0001"+
		"\u0000\u0000\u0000\u0162\u0e2c\u0001\u0000\u0000\u0000\u0164\u0e30\u0001"+
		"\u0000\u0000\u0000\u0166\u0e32\u0001\u0000\u0000\u0000\u0168\u0e34\u0001"+
		"\u0000\u0000\u0000\u016a\u0e36\u0001\u0000\u0000\u0000\u016c\u0170\u0003"+
		"\u000e\u0007\u0000\u016d\u016f\u0005\u0001\u0000\u0000\u016e\u016d\u0001"+
		"\u0000\u0000\u0000\u016f\u0172\u0001\u0000\u0000\u0000\u0170\u016e\u0001"+
		"\u0000\u0000\u0000\u0170\u0171\u0001\u0000\u0000\u0000\u0171\u0173\u0001"+
		"\u0000\u0000\u0000\u0172\u0170\u0001\u0000\u0000\u0000\u0173\u0174\u0005"+
		"\u0000\u0000\u0001\u0174\u0001\u0001\u0000\u0000\u0000\u0175\u0176\u0003"+
		"\u00e0p\u0000\u0176\u0177\u0005\u0000\u0000\u0001\u0177\u0003\u0001\u0000"+
		"\u0000\u0000\u0178\u0179\u0003\u00dcn\u0000\u0179\u017a\u0005\u0000\u0000"+
		"\u0001\u017a\u0005\u0001\u0000\u0000\u0000\u017b\u017c\u0003\u00d6k\u0000"+
		"\u017c\u017d\u0005\u0000\u0000\u0001\u017d\u0007\u0001\u0000\u0000\u0000"+
		"\u017e\u017f\u0003\u00deo\u0000\u017f\u0180\u0005\u0000\u0000\u0001\u0180"+
		"\t\u0001\u0000\u0000\u0000\u0181\u0182\u0003\u0124\u0092\u0000\u0182\u0183"+
		"\u0005\u0000\u0000\u0001\u0183\u000b\u0001\u0000\u0000\u0000\u0184\u0185"+
		"\u0003\u012e\u0097\u0000\u0185\u0186\u0005\u0000\u0000\u0001\u0186\r\u0001"+
		"\u0000\u0000\u0000\u0187\u04ab\u0003$\u0012\u0000\u0188\u018a\u00036\u001b"+
		"\u0000\u0189\u0188\u0001\u0000\u0000\u0000\u0189\u018a\u0001\u0000\u0000"+
		"\u0000\u018a\u018b\u0001\u0000\u0000\u0000\u018b\u04ab\u0003R)\u0000\u018c"+
		"\u018d\u0005\u0129\u0000\u0000\u018d\u04ab\u0003\u00d6k\u0000\u018e\u018f"+
		"\u0005\u0129\u0000\u0000\u018f\u0190\u0003.\u0017\u0000\u0190\u0191\u0003"+
		"\u00d6k\u0000\u0191\u04ab\u0001\u0000\u0000\u0000\u0192\u0193\u0005\u00f5"+
		"\u0000\u0000\u0193\u0196\u0005\'\u0000\u0000\u0194\u0197\u0003\u0154\u00aa"+
		"\u0000\u0195\u0197\u0003\u0160\u00b0\u0000\u0196\u0194\u0001\u0000\u0000"+
		"\u0000\u0196\u0195\u0001\u0000\u0000\u0000\u0197\u04ab\u0001\u0000\u0000"+
		"\u0000\u0198\u0199\u0005;\u0000\u0000\u0199\u019d\u0003.\u0017\u0000\u019a"+
		"\u019b\u0005}\u0000\u0000\u019b\u019c\u0005\u00b2\u0000\u0000\u019c\u019e"+
		"\u0005`\u0000\u0000\u019d\u019a\u0001\u0000\u0000\u0000\u019d\u019e\u0001"+
		"\u0000\u0000\u0000\u019e\u019f\u0001\u0000\u0000\u0000\u019f\u01a7\u0003"+
		"\u00d6k\u0000\u01a0\u01a6\u0003\"\u0011\u0000\u01a1\u01a6\u0003 \u0010"+
		"\u0000\u01a2\u01a3\u0005\u0135\u0000\u0000\u01a3\u01a4\u0007\u0000\u0000"+
		"\u0000\u01a4\u01a6\u0003>\u001f\u0000\u01a5\u01a0\u0001\u0000\u0000\u0000"+
		"\u01a5\u01a1\u0001\u0000\u0000\u0000\u01a5\u01a2\u0001\u0000\u0000\u0000"+
		"\u01a6\u01a9\u0001\u0000\u0000\u0000\u01a7\u01a5\u0001\u0000\u0000\u0000"+
		"\u01a7\u01a8\u0001\u0000\u0000\u0000\u01a8\u04ab\u0001\u0000\u0000\u0000"+
		"\u01a9\u01a7\u0001\u0000\u0000\u0000\u01aa\u01ab\u0005\u0011\u0000\u0000"+
		"\u01ab\u01ac\u0003.\u0017\u0000\u01ac\u01ad\u0003\u00d6k\u0000\u01ad\u01ae"+
		"\u0005\u00f5\u0000\u0000\u01ae\u01af\u0007\u0000\u0000\u0000\u01af\u01b0"+
		"\u0003>\u001f\u0000\u01b0\u04ab\u0001\u0000\u0000\u0000\u01b1\u01b2\u0005"+
		"\u0011\u0000\u0000\u01b2\u01b3\u0003.\u0017\u0000\u01b3\u01b4\u0003\u00d6"+
		"k\u0000\u01b4\u01b5\u0005\u00f5\u0000\u0000\u01b5\u01b6\u0003 \u0010\u0000"+
		"\u01b6\u04ab\u0001\u0000\u0000\u0000\u01b7\u01b8\u0005X\u0000\u0000\u01b8"+
		"\u01bb\u0003.\u0017\u0000\u01b9\u01ba\u0005}\u0000\u0000\u01ba\u01bc\u0005"+
		"`\u0000\u0000\u01bb\u01b9\u0001\u0000\u0000\u0000\u01bb\u01bc\u0001\u0000"+
		"\u0000\u0000\u01bc\u01bd\u0001\u0000\u0000\u0000\u01bd\u01bf\u0003\u00d6"+
		"k\u0000\u01be\u01c0\u0007\u0001\u0000\u0000\u01bf\u01be\u0001\u0000\u0000"+
		"\u0000\u01bf\u01c0\u0001\u0000\u0000\u0000\u01c0\u04ab\u0001\u0000\u0000"+
		"\u0000\u01c1\u01c2\u0005\u00f8\u0000\u0000\u01c2\u01c5\u00030\u0018\u0000"+
		"\u01c3\u01c4\u0007\u0002\u0000\u0000\u01c4\u01c6\u0003\u00d6k\u0000\u01c5"+
		"\u01c3\u0001\u0000\u0000\u0000\u01c5\u01c6\u0001\u0000\u0000\u0000\u01c6"+
		"\u01cb\u0001\u0000\u0000\u0000\u01c7\u01c9\u0005\u0094\u0000\u0000\u01c8"+
		"\u01c7\u0001\u0000\u0000\u0000\u01c8\u01c9\u0001\u0000\u0000\u0000\u01c9"+
		"\u01ca\u0001\u0000\u0000\u0000\u01ca\u01cc\u0003\u0160\u00b0\u0000\u01cb"+
		"\u01c8\u0001\u0000\u0000\u0000\u01cb\u01cc\u0001\u0000\u0000\u0000\u01cc"+
		"\u04ab\u0001\u0000\u0000\u0000\u01cd\u01d2\u0003\u0018\f\u0000\u01ce\u01cf"+
		"\u0005\u0002\u0000\u0000\u01cf\u01d0\u0003\u0132\u0099\u0000\u01d0\u01d1"+
		"\u0005\u0003\u0000\u0000\u01d1\u01d3\u0001\u0000\u0000\u0000\u01d2\u01ce"+
		"\u0001\u0000\u0000\u0000\u01d2\u01d3\u0001\u0000\u0000\u0000\u01d3\u01d5"+
		"\u0001\u0000\u0000\u0000\u01d4\u01d6\u0003:\u001d\u0000\u01d5\u01d4\u0001"+
		"\u0000\u0000\u0000\u01d5\u01d6\u0001\u0000\u0000\u0000\u01d6\u01d7\u0001"+
		"\u0000\u0000\u0000\u01d7\u01dc\u0003<\u001e\u0000\u01d8\u01da\u0005\u001a"+
		"\u0000\u0000\u01d9\u01d8\u0001\u0000\u0000\u0000\u01d9\u01da\u0001\u0000"+
		"\u0000\u0000\u01da\u01db\u0001\u0000\u0000\u0000\u01db\u01dd\u0003$\u0012"+
		"\u0000\u01dc\u01d9\u0001\u0000\u0000\u0000\u01dc\u01dd\u0001\u0000\u0000"+
		"\u0000\u01dd\u04ab\u0001\u0000\u0000\u0000\u01de\u01df\u0005;\u0000\u0000"+
		"\u01df\u01e3\u0005\u0108\u0000\u0000\u01e0\u01e1\u0005}\u0000\u0000\u01e1"+
		"\u01e2\u0005\u00b2\u0000\u0000\u01e2\u01e4\u0005`\u0000\u0000\u01e3\u01e0"+
		"\u0001\u0000\u0000\u0000\u01e3\u01e4\u0001\u0000\u0000\u0000\u01e4\u01e5"+
		"\u0001\u0000\u0000\u0000\u01e5\u01e6\u0003\u00dcn\u0000\u01e6\u01e7\u0005"+
		"\u0094\u0000\u0000\u01e7\u01f0\u0003\u00dcn\u0000\u01e8\u01ef\u0003:\u001d"+
		"\u0000\u01e9\u01ef\u0003\u00d2i\u0000\u01ea\u01ef\u0003J%\u0000\u01eb"+
		"\u01ef\u0003 \u0010\u0000\u01ec\u01ed\u0005\u010c\u0000\u0000\u01ed\u01ef"+
		"\u0003>\u001f\u0000\u01ee\u01e8\u0001\u0000\u0000\u0000\u01ee\u01e9\u0001"+
		"\u0000\u0000\u0000\u01ee\u01ea\u0001\u0000\u0000\u0000\u01ee\u01eb\u0001"+
		"\u0000\u0000\u0000\u01ee\u01ec\u0001\u0000\u0000\u0000\u01ef\u01f2\u0001"+
		"\u0000\u0000\u0000\u01f0\u01ee\u0001\u0000\u0000\u0000\u01f0\u01f1\u0001"+
		"\u0000\u0000\u0000\u01f1\u04ab\u0001\u0000\u0000\u0000\u01f2\u01f0\u0001"+
		"\u0000\u0000\u0000\u01f3\u01f8\u0003\u001a\r\u0000\u01f4\u01f5\u0005\u0002"+
		"\u0000\u0000\u01f5\u01f6\u0003\u0132\u0099\u0000\u01f6\u01f7\u0005\u0003"+
		"\u0000\u0000\u01f7\u01f9\u0001\u0000\u0000\u0000\u01f8\u01f4\u0001\u0000"+
		"\u0000\u0000\u01f8\u01f9\u0001\u0000\u0000\u0000\u01f9\u01fb\u0001\u0000"+
		"\u0000\u0000\u01fa\u01fc\u0003:\u001d\u0000\u01fb\u01fa\u0001\u0000\u0000"+
		"\u0000\u01fb\u01fc\u0001\u0000\u0000\u0000\u01fc\u01fd\u0001\u0000\u0000"+
		"\u0000\u01fd\u0202\u0003<\u001e\u0000\u01fe\u0200\u0005\u001a\u0000\u0000"+
		"\u01ff\u01fe\u0001\u0000\u0000\u0000\u01ff\u0200\u0001\u0000\u0000\u0000"+
		"\u0200\u0201\u0001\u0000\u0000\u0000\u0201\u0203\u0003$\u0012\u0000\u0202"+
		"\u01ff\u0001\u0000\u0000\u0000\u0202\u0203\u0001\u0000\u0000\u0000\u0203"+
		"\u04ab\u0001\u0000\u0000\u0000\u0204\u0205\u0005\u0013\u0000\u0000\u0205"+
		"\u0206\u0005\u0108\u0000\u0000\u0206\u0208\u0003\u00d6k\u0000\u0207\u0209"+
		"\u0003*\u0015\u0000\u0208\u0207\u0001\u0000\u0000\u0000\u0208\u0209\u0001"+
		"\u0000\u0000\u0000\u0209\u020a\u0001\u0000\u0000\u0000\u020a\u020b\u0005"+
		"7\u0000\u0000\u020b\u0213\u0005\u00ff\u0000\u0000\u020c\u0214\u0003\u0154"+
		"\u00aa\u0000\u020d\u020e\u0005m\u0000\u0000\u020e\u020f\u00052\u0000\u0000"+
		"\u020f\u0214\u0003\u00c0`\u0000\u0210\u0211\u0005m\u0000\u0000\u0211\u0212"+
		"\u0005\u0010\u0000\u0000\u0212\u0214\u00052\u0000\u0000\u0213\u020c\u0001"+
		"\u0000\u0000\u0000\u0213\u020d\u0001\u0000\u0000\u0000\u0213\u0210\u0001"+
		"\u0000\u0000\u0000\u0213\u0214\u0001\u0000\u0000\u0000\u0214\u04ab\u0001"+
		"\u0000\u0000\u0000\u0215\u0216\u0005\u0013\u0000\u0000\u0216\u0219\u0005"+
		"\u0109\u0000\u0000\u0217\u0218\u0007\u0002\u0000\u0000\u0218\u021a\u0003"+
		"\u00d6k\u0000\u0219\u0217\u0001\u0000\u0000\u0000\u0219\u021a\u0001\u0000"+
		"\u0000\u0000\u021a\u021b\u0001\u0000\u0000\u0000\u021b\u021c\u00057\u0000"+
		"\u0000\u021c\u021e\u0005\u00ff\u0000\u0000\u021d\u021f\u0003\u0154\u00aa"+
		"\u0000\u021e\u021d\u0001\u0000\u0000\u0000\u021e\u021f\u0001\u0000\u0000"+
		"\u0000\u021f\u04ab\u0001\u0000\u0000\u0000\u0220\u0221\u0005\u0011\u0000"+
		"\u0000\u0221\u0222\u0005\u0108\u0000\u0000\u0222\u0223\u0003\u00d6k\u0000"+
		"\u0223\u0224\u0005\u000e\u0000\u0000\u0224\u0225\u0007\u0003\u0000\u0000"+
		"\u0225\u0226\u0003\u0126\u0093\u0000\u0226\u04ab\u0001\u0000\u0000\u0000"+
		"\u0227\u0228\u0005\u0011\u0000\u0000\u0228\u0229\u0005\u0108\u0000\u0000"+
		"\u0229\u022a\u0003\u00d6k\u0000\u022a\u022b\u0005\u000e\u0000\u0000\u022b"+
		"\u022c\u0007\u0003\u0000\u0000\u022c\u022d\u0005\u0002\u0000\u0000\u022d"+
		"\u022e\u0003\u0126\u0093\u0000\u022e\u022f\u0005\u0003\u0000\u0000\u022f"+
		"\u04ab\u0001\u0000\u0000\u0000\u0230\u0231\u0005\u0011\u0000\u0000\u0231"+
		"\u0232\u0005\u0108\u0000\u0000\u0232\u0233\u0003\u00d6k\u0000\u0233\u0234"+
		"\u0005\u00db\u0000\u0000\u0234\u0235\u00051\u0000\u0000\u0235\u0236\u0003"+
		"\u00d6k\u0000\u0236\u0237\u0005\u0114\u0000\u0000\u0237\u0238\u0003\u0150"+
		"\u00a8\u0000\u0238\u04ab\u0001\u0000\u0000\u0000\u0239\u023a\u0005\u0011"+
		"\u0000\u0000\u023a\u023b\u0005\u0108\u0000\u0000\u023b\u023c\u0003\u00d6"+
		"k\u0000\u023c\u023d\u0005X\u0000\u0000\u023d\u0240\u0007\u0003\u0000\u0000"+
		"\u023e\u023f\u0005}\u0000\u0000\u023f\u0241\u0005`\u0000\u0000\u0240\u023e"+
		"\u0001\u0000\u0000\u0000\u0240\u0241\u0001\u0000\u0000\u0000\u0241\u0242"+
		"\u0001\u0000\u0000\u0000\u0242\u0243\u0005\u0002\u0000\u0000\u0243\u0244"+
		"\u0003\u00d4j\u0000\u0244\u0245\u0005\u0003\u0000\u0000\u0245\u04ab\u0001"+
		"\u0000\u0000\u0000\u0246\u0247\u0005\u0011\u0000\u0000\u0247\u0248\u0005"+
		"\u0108\u0000\u0000\u0248\u0249\u0003\u00d6k\u0000\u0249\u024a\u0005X\u0000"+
		"\u0000\u024a\u024d\u0007\u0003\u0000\u0000\u024b\u024c\u0005}\u0000\u0000"+
		"\u024c\u024e\u0005`\u0000\u0000\u024d\u024b\u0001\u0000\u0000\u0000\u024d"+
		"\u024e\u0001\u0000\u0000\u0000\u024e\u024f\u0001\u0000\u0000\u0000\u024f"+
		"\u0250\u0003\u00d4j\u0000\u0250\u04ab\u0001\u0000\u0000\u0000\u0251\u0252"+
		"\u0005\u0011\u0000\u0000\u0252\u0253\u0007\u0004\u0000\u0000\u0253\u0254"+
		"\u0003\u00d6k\u0000\u0254\u0255\u0005\u00db\u0000\u0000\u0255\u0256\u0005"+
		"\u0114\u0000\u0000\u0256\u0257\u0003\u00d6k\u0000\u0257\u04ab\u0001\u0000"+
		"\u0000\u0000\u0258\u0259\u0005\u0011\u0000\u0000\u0259\u025a\u0007\u0004"+
		"\u0000\u0000\u025a\u025b\u0003\u00d6k\u0000\u025b\u025c\u0005\u00f5\u0000"+
		"\u0000\u025c\u025d\u0005\u010c\u0000\u0000\u025d\u025e\u0003>\u001f\u0000"+
		"\u025e\u04ab\u0001\u0000\u0000\u0000\u025f\u0260\u0005\u0011\u0000\u0000"+
		"\u0260\u0261\u0007\u0004\u0000\u0000\u0261\u0262\u0003\u00d6k\u0000\u0262"+
		"\u0263\u0005\u0127\u0000\u0000\u0263\u0266\u0005\u010c\u0000\u0000\u0264"+
		"\u0265\u0005}\u0000\u0000\u0265\u0267\u0005`\u0000\u0000\u0266\u0264\u0001"+
		"\u0000\u0000\u0000\u0266\u0267\u0001\u0000\u0000\u0000\u0267\u0268\u0001"+
		"\u0000\u0000\u0000\u0268\u0269\u0003>\u001f\u0000\u0269\u04ab\u0001\u0000"+
		"\u0000\u0000\u026a\u026b\u0005\u0011\u0000\u0000\u026b\u026c\u0005\u0108"+
		"\u0000\u0000\u026c\u026d\u0003\u00d6k\u0000\u026d\u026f\u0007\u0005\u0000"+
		"\u0000\u026e\u0270\u00051\u0000\u0000\u026f\u026e\u0001\u0000\u0000\u0000"+
		"\u026f\u0270\u0001\u0000\u0000\u0000\u0270\u0271\u0001\u0000\u0000\u0000"+
		"\u0271\u0273\u0003\u00d6k\u0000\u0272\u0274\u0003\u015e\u00af\u0000\u0273"+
		"\u0272\u0001\u0000\u0000\u0000\u0273\u0274\u0001\u0000\u0000\u0000\u0274"+
		"\u04ab\u0001\u0000\u0000\u0000\u0275\u0276\u0005\u0011\u0000\u0000\u0276"+
		"\u0277\u0005\u0108\u0000\u0000\u0277\u0279\u0003\u00d6k\u0000\u0278\u027a"+
		"\u0003*\u0015\u0000\u0279\u0278\u0001\u0000\u0000\u0000\u0279\u027a\u0001"+
		"\u0000\u0000\u0000\u027a\u027b\u0001\u0000\u0000\u0000\u027b\u027d\u0005"+
		")\u0000\u0000\u027c\u027e\u00051\u0000\u0000\u027d\u027c\u0001\u0000\u0000"+
		"\u0000\u027d\u027e\u0001\u0000\u0000\u0000\u027e\u027f\u0001\u0000\u0000"+
		"\u0000\u027f\u0280\u0003\u00d6k\u0000\u0280\u0282\u0003\u0130\u0098\u0000"+
		"\u0281\u0283\u0003\u0122\u0091\u0000\u0282\u0281\u0001\u0000\u0000\u0000"+
		"\u0282\u0283\u0001\u0000\u0000\u0000\u0283\u04ab\u0001\u0000\u0000\u0000"+
		"\u0284\u0285\u0005\u0011\u0000\u0000\u0285\u0286\u0005\u0108\u0000\u0000"+
		"\u0286\u0288\u0003\u00d6k\u0000\u0287\u0289\u0003*\u0015\u0000\u0288\u0287"+
		"\u0001\u0000\u0000\u0000\u0288\u0289\u0001\u0000\u0000\u0000\u0289\u028a"+
		"\u0001\u0000\u0000\u0000\u028a\u028b\u0005\u00de\u0000\u0000\u028b\u028c"+
		"\u00052\u0000\u0000\u028c\u028d\u0005\u0002\u0000\u0000\u028d\u028e\u0003"+
		"\u0126\u0093\u0000\u028e\u028f\u0005\u0003\u0000\u0000\u028f\u04ab\u0001"+
		"\u0000\u0000\u0000\u0290\u0291\u0005\u0011\u0000\u0000\u0291\u0292\u0005"+
		"\u0108\u0000\u0000\u0292\u0294\u0003\u00d6k\u0000\u0293\u0295\u0003*\u0015"+
		"\u0000\u0294\u0293\u0001\u0000\u0000\u0000\u0294\u0295\u0001\u0000\u0000"+
		"\u0000\u0295\u0296\u0001\u0000\u0000\u0000\u0296\u0297\u0005\u00f5\u0000"+
		"\u0000\u0297\u0298\u0005\u00f2\u0000\u0000\u0298\u029c\u0003\u0160\u00b0"+
		"\u0000\u0299\u029a\u0005\u0135\u0000\u0000\u029a\u029b\u0005\u00f3\u0000"+
		"\u0000\u029b\u029d\u0003>\u001f\u0000\u029c\u0299\u0001\u0000\u0000\u0000"+
		"\u029c\u029d\u0001\u0000\u0000\u0000\u029d\u04ab\u0001\u0000\u0000\u0000"+
		"\u029e\u029f\u0005\u0011\u0000\u0000\u029f\u02a0\u0005\u0108\u0000\u0000"+
		"\u02a0\u02a2\u0003\u00d6k\u0000\u02a1\u02a3\u0003*\u0015\u0000\u02a2\u02a1"+
		"\u0001\u0000\u0000\u0000\u02a2\u02a3\u0001\u0000\u0000\u0000\u02a3\u02a4"+
		"\u0001\u0000\u0000\u0000\u02a4\u02a5\u0005\u00f5\u0000\u0000\u02a5\u02a6"+
		"\u0005\u00f3\u0000\u0000\u02a6\u02a7\u0003>\u001f\u0000\u02a7\u04ab\u0001"+
		"\u0000\u0000\u0000\u02a8\u02a9\u0005\u0011\u0000\u0000\u02a9\u02aa\u0007"+
		"\u0004\u0000\u0000\u02aa\u02ab\u0003\u00d6k\u0000\u02ab\u02af\u0005\u000e"+
		"\u0000\u0000\u02ac\u02ad\u0005}\u0000\u0000\u02ad\u02ae\u0005\u00b2\u0000"+
		"\u0000\u02ae\u02b0\u0005`\u0000\u0000\u02af\u02ac\u0001\u0000\u0000\u0000"+
		"\u02af\u02b0\u0001\u0000\u0000\u0000\u02b0\u02b2\u0001\u0000\u0000\u0000"+
		"\u02b1\u02b3\u0003(\u0014\u0000\u02b2\u02b1\u0001\u0000\u0000\u0000\u02b3"+
		"\u02b4\u0001\u0000\u0000\u0000\u02b4\u02b2\u0001\u0000\u0000\u0000\u02b4"+
		"\u02b5\u0001\u0000\u0000\u0000\u02b5\u04ab\u0001\u0000\u0000\u0000\u02b6"+
		"\u02b7\u0005\u0011\u0000\u0000\u02b7\u02b8\u0005\u0108\u0000\u0000\u02b8"+
		"\u02b9\u0003\u00d6k\u0000\u02b9\u02ba\u0003*\u0015\u0000\u02ba\u02bb\u0005"+
		"\u00db\u0000\u0000\u02bb\u02bc\u0005\u0114\u0000\u0000\u02bc\u02bd\u0003"+
		"*\u0015\u0000\u02bd\u04ab\u0001\u0000\u0000\u0000\u02be\u02bf\u0005\u0011"+
		"\u0000\u0000\u02bf\u02c0\u0007\u0004\u0000\u0000\u02c0\u02c1\u0003\u00d6"+
		"k\u0000\u02c1\u02c4\u0005X\u0000\u0000\u02c2\u02c3\u0005}\u0000\u0000"+
		"\u02c3\u02c5\u0005`\u0000\u0000\u02c4\u02c2\u0001\u0000\u0000\u0000\u02c4"+
		"\u02c5\u0001\u0000\u0000\u0000\u02c5\u02c6\u0001\u0000\u0000\u0000\u02c6"+
		"\u02cb\u0003*\u0015\u0000\u02c7\u02c8\u0005\u0004\u0000\u0000\u02c8\u02ca"+
		"\u0003*\u0015\u0000\u02c9\u02c7\u0001\u0000\u0000\u0000\u02ca\u02cd\u0001"+
		"\u0000\u0000\u0000\u02cb\u02c9\u0001\u0000\u0000\u0000\u02cb\u02cc\u0001"+
		"\u0000\u0000\u0000\u02cc\u02cf\u0001\u0000\u0000\u0000\u02cd\u02cb\u0001"+
		"\u0000\u0000\u0000\u02ce\u02d0\u0005\u00d1\u0000\u0000\u02cf\u02ce\u0001"+
		"\u0000\u0000\u0000\u02cf\u02d0\u0001\u0000\u0000\u0000\u02d0\u04ab\u0001"+
		"\u0000\u0000\u0000\u02d1\u02d2\u0005\u0011\u0000\u0000\u02d2\u02d3\u0005"+
		"\u0108\u0000\u0000\u02d3\u02d5\u0003\u00d6k\u0000\u02d4\u02d6\u0003*\u0015"+
		"\u0000\u02d5\u02d4\u0001\u0000\u0000\u0000\u02d5\u02d6\u0001\u0000\u0000"+
		"\u0000\u02d6\u02d7\u0001\u0000\u0000\u0000\u02d7\u02d8\u0005\u00f5\u0000"+
		"\u0000\u02d8\u02d9\u0003 \u0010\u0000\u02d9\u04ab\u0001\u0000\u0000\u0000"+
		"\u02da\u02db\u0005\u0011\u0000\u0000\u02db\u02dc\u0005\u0108\u0000\u0000"+
		"\u02dc\u02dd\u0003\u00d6k\u0000\u02dd\u02de\u0005\u00d7\u0000\u0000\u02de"+
		"\u02df\u0005\u00c6\u0000\u0000\u02df\u04ab\u0001\u0000\u0000\u0000\u02e0"+
		"\u02e1\u0005X\u0000\u0000\u02e1\u02e4\u0005\u0108\u0000\u0000\u02e2\u02e3"+
		"\u0005}\u0000\u0000\u02e3\u02e5\u0005`\u0000\u0000\u02e4\u02e2\u0001\u0000"+
		"\u0000\u0000\u02e4\u02e5\u0001\u0000\u0000\u0000\u02e5\u02e6\u0001\u0000"+
		"\u0000\u0000\u02e6\u02e8\u0003\u00d6k\u0000\u02e7\u02e9\u0005\u00d1\u0000"+
		"\u0000\u02e8\u02e7\u0001\u0000\u0000\u0000\u02e8\u02e9\u0001\u0000\u0000"+
		"\u0000\u02e9\u04ab\u0001\u0000\u0000\u0000\u02ea\u02eb\u0005X\u0000\u0000"+
		"\u02eb\u02ee\u0005\u012e\u0000\u0000\u02ec\u02ed\u0005}\u0000\u0000\u02ed"+
		"\u02ef\u0005`\u0000\u0000\u02ee\u02ec\u0001\u0000\u0000\u0000\u02ee\u02ef"+
		"\u0001\u0000\u0000\u0000\u02ef\u02f0\u0001\u0000\u0000\u0000\u02f0\u04ab"+
		"\u0003\u00d6k\u0000\u02f1\u02f4\u0005;\u0000\u0000\u02f2\u02f3\u0005\u00bb"+
		"\u0000\u0000\u02f3\u02f5\u0005\u00de\u0000\u0000\u02f4\u02f2\u0001\u0000"+
		"\u0000\u0000\u02f4\u02f5\u0001\u0000\u0000\u0000\u02f5\u02fa\u0001\u0000"+
		"\u0000\u0000\u02f6\u02f8\u0005v\u0000\u0000\u02f7\u02f6\u0001\u0000\u0000"+
		"\u0000\u02f7\u02f8\u0001\u0000\u0000\u0000\u02f8\u02f9\u0001\u0000\u0000"+
		"\u0000\u02f9\u02fb\u0005\u010d\u0000\u0000\u02fa\u02f7\u0001\u0000\u0000"+
		"\u0000\u02fa\u02fb\u0001\u0000\u0000\u0000\u02fb\u02fc\u0001\u0000\u0000"+
		"\u0000\u02fc\u0300\u0005\u012e\u0000\u0000\u02fd\u02fe\u0005}\u0000\u0000"+
		"\u02fe\u02ff\u0005\u00b2\u0000\u0000\u02ff\u0301\u0005`\u0000\u0000\u0300"+
		"\u02fd\u0001\u0000\u0000\u0000\u0300\u0301\u0001\u0000\u0000\u0000\u0301"+
		"\u0302\u0001\u0000\u0000\u0000\u0302\u0304\u0003\u00d6k\u0000\u0303\u0305"+
		"\u0003\u00c6c\u0000\u0304\u0303\u0001\u0000\u0000\u0000\u0304\u0305\u0001"+
		"\u0000\u0000\u0000\u0305\u030e\u0001\u0000\u0000\u0000\u0306\u030d\u0003"+
		"\"\u0011\u0000\u0307\u0308\u0005\u00c5\u0000\u0000\u0308\u0309\u0005\u00b7"+
		"\u0000\u0000\u0309\u030d\u0003\u00be_\u0000\u030a\u030b\u0005\u010c\u0000"+
		"\u0000\u030b\u030d\u0003>\u001f\u0000\u030c\u0306\u0001\u0000\u0000\u0000"+
		"\u030c\u0307\u0001\u0000\u0000\u0000\u030c\u030a\u0001\u0000\u0000\u0000"+
		"\u030d\u0310\u0001\u0000\u0000\u0000\u030e\u030c\u0001\u0000\u0000\u0000"+
		"\u030e\u030f\u0001\u0000\u0000\u0000\u030f\u0311\u0001\u0000\u0000\u0000"+
		"\u0310\u030e\u0001\u0000\u0000\u0000\u0311\u0312\u0005\u001a\u0000\u0000"+
		"\u0312\u0313\u0003$\u0012\u0000\u0313\u04ab\u0001\u0000\u0000\u0000\u0314"+
		"\u0317\u0005;\u0000\u0000\u0315\u0316\u0005\u00bb\u0000\u0000\u0316\u0318"+
		"\u0005\u00de\u0000\u0000\u0317\u0315\u0001\u0000\u0000\u0000\u0317\u0318"+
		"\u0001\u0000\u0000\u0000\u0318\u031a\u0001\u0000\u0000\u0000\u0319\u031b"+
		"\u0005v\u0000\u0000\u031a\u0319\u0001\u0000\u0000\u0000\u031a\u031b\u0001"+
		"\u0000\u0000\u0000\u031b\u031c\u0001\u0000\u0000\u0000\u031c\u031d\u0005"+
		"\u010d\u0000\u0000\u031d\u031e\u0005\u012e\u0000\u0000\u031e\u0323\u0003"+
		"\u00dcn\u0000\u031f\u0320\u0005\u0002\u0000\u0000\u0320\u0321\u0003\u012e"+
		"\u0097\u0000\u0321\u0322\u0005\u0003\u0000\u0000\u0322\u0324\u0001\u0000"+
		"\u0000\u0000\u0323\u031f\u0001\u0000\u0000\u0000\u0323\u0324\u0001\u0000"+
		"\u0000\u0000\u0324\u0325\u0001\u0000\u0000\u0000\u0325\u0328\u0003:\u001d"+
		"\u0000\u0326\u0327\u0005\u00ba\u0000\u0000\u0327\u0329\u0003>\u001f\u0000"+
		"\u0328\u0326\u0001\u0000\u0000\u0000\u0328\u0329\u0001\u0000\u0000\u0000"+
		"\u0329\u04ab\u0001\u0000\u0000\u0000\u032a\u032b\u0005\u0011\u0000\u0000"+
		"\u032b\u032c\u0005\u012e\u0000\u0000\u032c\u032e\u0003\u00d6k\u0000\u032d"+
		"\u032f\u0005\u001a\u0000\u0000\u032e\u032d\u0001\u0000\u0000\u0000\u032e"+
		"\u032f\u0001\u0000\u0000\u0000\u032f\u0330\u0001\u0000\u0000\u0000\u0330"+
		"\u0331\u0003$\u0012\u0000\u0331\u04ab\u0001\u0000\u0000\u0000\u0332\u0335"+
		"\u0005;\u0000\u0000\u0333\u0334\u0005\u00bb\u0000\u0000\u0334\u0336\u0005"+
		"\u00de\u0000\u0000\u0335\u0333\u0001\u0000\u0000\u0000\u0335\u0336\u0001"+
		"\u0000\u0000\u0000\u0336\u0338\u0001\u0000\u0000\u0000\u0337\u0339\u0005"+
		"\u010d\u0000\u0000\u0338\u0337\u0001\u0000\u0000\u0000\u0338\u0339\u0001"+
		"\u0000\u0000\u0000\u0339\u033a\u0001\u0000\u0000\u0000\u033a\u033e\u0005"+
		"s\u0000\u0000\u033b\u033c\u0005}\u0000\u0000\u033c\u033d\u0005\u00b2\u0000"+
		"\u0000\u033d\u033f\u0005`\u0000\u0000\u033e\u033b\u0001\u0000\u0000\u0000"+
		"\u033e\u033f\u0001\u0000\u0000\u0000\u033f\u0340\u0001\u0000\u0000\u0000"+
		"\u0340\u0341\u0003\u00d6k\u0000\u0341\u0342\u0005\u001a\u0000\u0000\u0342"+
		"\u034c\u0003\u0160\u00b0\u0000\u0343\u0344\u0005\u012b\u0000\u0000\u0344"+
		"\u0349\u0003P(\u0000\u0345\u0346\u0005\u0004\u0000\u0000\u0346\u0348\u0003"+
		"P(\u0000\u0347\u0345\u0001\u0000\u0000\u0000\u0348\u034b\u0001\u0000\u0000"+
		"\u0000\u0349\u0347\u0001\u0000\u0000\u0000\u0349\u034a\u0001\u0000\u0000"+
		"\u0000\u034a\u034d\u0001\u0000\u0000\u0000\u034b\u0349\u0001\u0000\u0000"+
		"\u0000\u034c\u0343\u0001\u0000\u0000\u0000\u034c\u034d\u0001\u0000\u0000"+
		"\u0000\u034d\u04ab\u0001\u0000\u0000\u0000\u034e\u0350\u0005X\u0000\u0000"+
		"\u034f\u0351\u0005\u010d\u0000\u0000\u0350\u034f\u0001\u0000\u0000\u0000"+
		"\u0350\u0351\u0001\u0000\u0000\u0000\u0351\u0352\u0001\u0000\u0000\u0000"+
		"\u0352\u0355\u0005s\u0000\u0000\u0353\u0354\u0005}\u0000\u0000\u0354\u0356"+
		"\u0005`\u0000\u0000\u0355\u0353\u0001\u0000\u0000\u0000\u0355\u0356\u0001"+
		"\u0000\u0000\u0000\u0356\u0357\u0001\u0000\u0000\u0000\u0357\u04ab\u0003"+
		"\u00d6k\u0000\u0358\u035a\u0005a\u0000\u0000\u0359\u035b\u0007\u0006\u0000"+
		"\u0000\u035a\u0359\u0001\u0000\u0000\u0000\u035a\u035b\u0001\u0000\u0000"+
		"\u0000\u035b\u035c\u0001\u0000\u0000\u0000\u035c\u04ab\u0003\u000e\u0007"+
		"\u0000\u035d\u035e\u0005\u00f8\u0000\u0000\u035e\u0361\u0005\u0109\u0000"+
		"\u0000\u035f\u0360\u0007\u0002\u0000\u0000\u0360\u0362\u0003\u00d6k\u0000"+
		"\u0361\u035f\u0001\u0000\u0000\u0000\u0361\u0362\u0001\u0000\u0000\u0000"+
		"\u0362\u0367\u0001\u0000\u0000\u0000\u0363\u0365\u0005\u0094\u0000\u0000"+
		"\u0364\u0363\u0001\u0000\u0000\u0000\u0364\u0365\u0001\u0000\u0000\u0000"+
		"\u0365\u0366\u0001\u0000\u0000\u0000\u0366\u0368\u0003\u0160\u00b0\u0000"+
		"\u0367\u0364\u0001\u0000\u0000\u0000\u0367\u0368\u0001\u0000\u0000\u0000"+
		"\u0368\u04ab\u0001\u0000\u0000\u0000\u0369\u036a\u0005\u00f8\u0000\u0000"+
		"\u036a\u036b\u0005\u0108\u0000\u0000\u036b\u036e\u0005c\u0000\u0000\u036c"+
		"\u036d\u0007\u0002\u0000\u0000\u036d\u036f\u0003\u00d6k\u0000\u036e\u036c"+
		"\u0001\u0000\u0000\u0000\u036e\u036f\u0001\u0000\u0000\u0000\u036f\u0370"+
		"\u0001\u0000\u0000\u0000\u0370\u0371\u0005\u0094\u0000\u0000\u0371\u0373"+
		"\u0003\u0160\u00b0\u0000\u0372\u0374\u0003*\u0015\u0000\u0373\u0372\u0001"+
		"\u0000\u0000\u0000\u0373\u0374\u0001\u0000\u0000\u0000\u0374\u04ab\u0001"+
		"\u0000\u0000\u0000\u0375\u0376\u0005\u00f8\u0000\u0000\u0376\u0377\u0005"+
		"\u010c\u0000\u0000\u0377\u037c\u0003\u00d6k\u0000\u0378\u0379\u0005\u0002"+
		"\u0000\u0000\u0379\u037a\u0003B!\u0000\u037a\u037b\u0005\u0003\u0000\u0000"+
		"\u037b\u037d\u0001\u0000\u0000\u0000\u037c\u0378\u0001\u0000\u0000\u0000"+
		"\u037c\u037d\u0001\u0000\u0000\u0000\u037d\u04ab\u0001\u0000\u0000\u0000"+
		"\u037e\u037f\u0005\u00f8\u0000\u0000\u037f\u0380\u00052\u0000\u0000\u0380"+
		"\u0381\u0007\u0002\u0000\u0000\u0381\u0384\u0003\u00d6k\u0000\u0382\u0383"+
		"\u0007\u0002\u0000\u0000\u0383\u0385\u0003\u00d6k\u0000\u0384\u0382\u0001"+
		"\u0000\u0000\u0000\u0384\u0385\u0001\u0000\u0000\u0000\u0385\u04ab\u0001"+
		"\u0000\u0000\u0000\u0386\u0387\u0005\u00f8\u0000\u0000\u0387\u038a\u0005"+
		"\u012f\u0000\u0000\u0388\u0389\u0007\u0002\u0000\u0000\u0389\u038b\u0003"+
		"\u00d6k\u0000\u038a\u0388\u0001\u0000\u0000\u0000\u038a\u038b\u0001\u0000"+
		"\u0000\u0000\u038b\u0390\u0001\u0000\u0000\u0000\u038c\u038e\u0005\u0094"+
		"\u0000\u0000\u038d\u038c\u0001\u0000\u0000\u0000\u038d\u038e\u0001\u0000"+
		"\u0000\u0000\u038e\u038f\u0001\u0000\u0000\u0000\u038f\u0391\u0003\u0160"+
		"\u00b0\u0000\u0390\u038d\u0001\u0000\u0000\u0000\u0390\u0391\u0001\u0000"+
		"\u0000\u0000\u0391\u04ab\u0001\u0000\u0000\u0000\u0392\u0393\u0005\u00f8"+
		"\u0000\u0000\u0393\u0394\u0005\u00c6\u0000\u0000\u0394\u0396\u0003\u00d6"+
		"k\u0000\u0395\u0397\u0003*\u0015\u0000\u0396\u0395\u0001\u0000\u0000\u0000"+
		"\u0396\u0397\u0001\u0000\u0000\u0000\u0397\u04ab\u0001\u0000\u0000\u0000"+
		"\u0398\u039a\u0005\u00f8\u0000\u0000\u0399\u039b\u0003\u0154\u00aa\u0000"+
		"\u039a\u0399\u0001\u0000\u0000\u0000\u039a\u039b\u0001\u0000\u0000\u0000"+
		"\u039b\u039c\u0001\u0000\u0000\u0000\u039c\u039f\u0005t\u0000\u0000\u039d"+
		"\u039e\u0007\u0002\u0000\u0000\u039e\u03a0\u0003\u00d6k\u0000\u039f\u039d"+
		"\u0001\u0000\u0000\u0000\u039f\u03a0\u0001\u0000\u0000\u0000\u03a0\u03a8"+
		"\u0001\u0000\u0000\u0000\u03a1\u03a3\u0005\u0094\u0000\u0000\u03a2\u03a1"+
		"\u0001\u0000\u0000\u0000\u03a2\u03a3\u0001\u0000\u0000\u0000\u03a3\u03a6"+
		"\u0001\u0000\u0000\u0000\u03a4\u03a7\u0003\u00d6k\u0000\u03a5\u03a7\u0003"+
		"\u0160\u00b0\u0000\u03a6\u03a4\u0001\u0000\u0000\u0000\u03a6\u03a5\u0001"+
		"\u0000\u0000\u0000\u03a7\u03a9\u0001\u0000\u0000\u0000\u03a8\u03a2\u0001"+
		"\u0000\u0000\u0000\u03a8\u03a9\u0001\u0000\u0000\u0000\u03a9\u04ab\u0001"+
		"\u0000\u0000\u0000\u03aa\u03ab\u0005\u00f8\u0000\u0000\u03ab\u03ac\u0005"+
		";\u0000\u0000\u03ac\u03ad\u0005\u0108\u0000\u0000\u03ad\u03b0\u0003\u00d6"+
		"k\u0000\u03ae\u03af\u0005\u001a\u0000\u0000\u03af\u03b1\u0005\u00f2\u0000"+
		"\u0000\u03b0\u03ae\u0001\u0000\u0000\u0000\u03b0\u03b1\u0001\u0000\u0000"+
		"\u0000\u03b1\u04ab\u0001\u0000\u0000\u0000\u03b2\u03b3\u0005\u00f8\u0000"+
		"\u0000\u03b3\u03b4\u0005>\u0000\u0000\u03b4\u04ab\u0003.\u0017\u0000\u03b5"+
		"\u03b6\u0005\u00f8\u0000\u0000\u03b6\u03bb\u0005(\u0000\u0000\u03b7\u03b9"+
		"\u0005\u0094\u0000\u0000\u03b8\u03b7\u0001\u0000\u0000\u0000\u03b8\u03b9"+
		"\u0001\u0000\u0000\u0000\u03b9\u03ba\u0001\u0000\u0000\u0000\u03ba\u03bc"+
		"\u0003\u0160\u00b0\u0000\u03bb\u03b8\u0001\u0000\u0000\u0000\u03bb\u03bc"+
		"\u0001\u0000\u0000\u0000\u03bc\u04ab\u0001\u0000\u0000\u0000\u03bd\u03be"+
		"\u0007\u0007\u0000\u0000\u03be\u03c0\u0005s\u0000\u0000\u03bf\u03c1\u0005"+
		"c\u0000\u0000\u03c0\u03bf\u0001\u0000\u0000\u0000\u03c0\u03c1\u0001\u0000"+
		"\u0000\u0000\u03c1\u03c2\u0001\u0000\u0000\u0000\u03c2\u04ab\u00032\u0019"+
		"\u0000\u03c3\u03c4\u0007\u0007\u0000\u0000\u03c4\u03c6\u0003.\u0017\u0000"+
		"\u03c5\u03c7\u0005c\u0000\u0000\u03c6\u03c5\u0001\u0000\u0000\u0000\u03c6"+
		"\u03c7\u0001\u0000\u0000\u0000\u03c7\u03c8\u0001\u0000\u0000\u0000\u03c8"+
		"\u03c9\u0003\u00d6k\u0000\u03c9\u04ab\u0001\u0000\u0000\u0000\u03ca\u03cc"+
		"\u0007\u0007\u0000\u0000\u03cb\u03cd\u0005\u0108\u0000\u0000\u03cc\u03cb"+
		"\u0001\u0000\u0000\u0000\u03cc\u03cd\u0001\u0000\u0000\u0000\u03cd\u03cf"+
		"\u0001\u0000\u0000\u0000\u03ce\u03d0\u0007\b\u0000\u0000\u03cf\u03ce\u0001"+
		"\u0000\u0000\u0000\u03cf\u03d0\u0001\u0000\u0000\u0000\u03d0\u03d1\u0001"+
		"\u0000\u0000\u0000\u03d1\u03d3\u0003\u00d6k\u0000\u03d2\u03d4\u0003*\u0015"+
		"\u0000\u03d3\u03d2\u0001\u0000\u0000\u0000\u03d3\u03d4\u0001\u0000\u0000"+
		"\u0000\u03d4\u03d6\u0001\u0000\u0000\u0000\u03d5\u03d7\u00034\u001a\u0000"+
		"\u03d6\u03d5\u0001\u0000\u0000\u0000\u03d6\u03d7\u0001\u0000\u0000\u0000"+
		"\u03d7\u04ab\u0001\u0000\u0000\u0000\u03d8\u03da\u0007\u0007\u0000\u0000"+
		"\u03d9\u03db\u0005\u00d3\u0000\u0000\u03da\u03d9\u0001\u0000\u0000\u0000"+
		"\u03da\u03db\u0001\u0000\u0000\u0000\u03db\u03dc\u0001\u0000\u0000\u0000"+
		"\u03dc\u04ab\u0003$\u0012\u0000\u03dd\u03de\u00053\u0000\u0000\u03de\u03df"+
		"\u0005\u00b7\u0000\u0000\u03df\u03e0\u0003.\u0017\u0000\u03e0\u03e1\u0003"+
		"\u00d6k\u0000\u03e1\u03e2\u0005\u008b\u0000\u0000\u03e2\u03e3\u0003\u0162"+
		"\u00b1\u0000\u03e3\u04ab\u0001\u0000\u0000\u0000\u03e4\u03e5\u00053\u0000"+
		"\u0000\u03e5\u03e6\u0005\u00b7\u0000\u0000\u03e6\u03e7\u0005\u0108\u0000"+
		"\u0000\u03e7\u03e8\u0003\u00d6k\u0000\u03e8\u03e9\u0005\u008b\u0000\u0000"+
		"\u03e9\u03ea\u0003\u0162\u00b1\u0000\u03ea\u04ab\u0001\u0000\u0000\u0000"+
		"\u03eb\u03ec\u0005\u00da\u0000\u0000\u03ec\u03ed\u0005\u0108\u0000\u0000"+
		"\u03ed\u04ab\u0003\u00d6k\u0000\u03ee\u03ef\u0005\u00da\u0000\u0000\u03ef"+
		"\u03f0\u0005s\u0000\u0000\u03f0\u04ab\u0003\u00d6k\u0000\u03f1\u03f9\u0005"+
		"\u00da\u0000\u0000\u03f2\u03fa\u0003\u0160\u00b0\u0000\u03f3\u03f5\t\u0000"+
		"\u0000\u0000\u03f4\u03f3\u0001\u0000\u0000\u0000\u03f5\u03f8\u0001\u0000"+
		"\u0000\u0000\u03f6\u03f7\u0001\u0000\u0000\u0000\u03f6\u03f4\u0001\u0000"+
		"\u0000\u0000\u03f7\u03fa\u0001\u0000\u0000\u0000\u03f8\u03f6\u0001\u0000"+
		"\u0000\u0000\u03f9\u03f2\u0001\u0000\u0000\u0000\u03f9\u03f6\u0001\u0000"+
		"\u0000\u0000\u03fa\u04ab\u0001\u0000\u0000\u0000\u03fb\u03fd\u0005#\u0000"+
		"\u0000\u03fc\u03fe\u0005\u0091\u0000\u0000\u03fd\u03fc\u0001\u0000\u0000"+
		"\u0000\u03fd\u03fe\u0001\u0000\u0000\u0000\u03fe\u03ff\u0001\u0000\u0000"+
		"\u0000\u03ff\u0400\u0005\u0108\u0000\u0000\u0400\u0403\u0003\u00d6k\u0000"+
		"\u0401\u0402\u0005\u00ba\u0000\u0000\u0402\u0404\u0003>\u001f\u0000\u0403"+
		"\u0401\u0001\u0000\u0000\u0000\u0403\u0404\u0001\u0000\u0000\u0000\u0404"+
		"\u0409\u0001\u0000\u0000\u0000\u0405\u0407\u0005\u001a\u0000\u0000\u0406"+
		"\u0405\u0001\u0000\u0000\u0000\u0406\u0407\u0001\u0000\u0000\u0000\u0407"+
		"\u0408\u0001\u0000\u0000\u0000\u0408\u040a\u0003$\u0012\u0000\u0409\u0406"+
		"\u0001\u0000\u0000\u0000\u0409\u040a\u0001\u0000\u0000\u0000\u040a\u04ab"+
		"\u0001\u0000\u0000\u0000\u040b\u040c\u0005\u0121\u0000\u0000\u040c\u040f"+
		"\u0005\u0108\u0000\u0000\u040d\u040e\u0005}\u0000\u0000\u040e\u0410\u0005"+
		"`\u0000\u0000\u040f\u040d\u0001\u0000\u0000\u0000\u040f\u0410\u0001\u0000"+
		"\u0000\u0000\u0410\u0411\u0001\u0000\u0000\u0000\u0411\u04ab\u0003\u00d6"+
		"k\u0000\u0412\u0413\u0005+\u0000\u0000\u0413\u04ab\u0005#\u0000\u0000"+
		"\u0414\u0415\u0005\u0099\u0000\u0000\u0415\u0417\u0005F\u0000\u0000\u0416"+
		"\u0418\u0005\u009a\u0000\u0000\u0417\u0416\u0001\u0000\u0000\u0000\u0417"+
		"\u0418\u0001\u0000\u0000\u0000\u0418\u0419\u0001\u0000\u0000\u0000\u0419"+
		"\u041a\u0005\u0085\u0000\u0000\u041a\u041c\u0003\u0160\u00b0\u0000\u041b"+
		"\u041d\u0005\u00c3\u0000\u0000\u041c\u041b\u0001\u0000\u0000\u0000\u041c"+
		"\u041d\u0001\u0000\u0000\u0000\u041d\u041e\u0001\u0000\u0000\u0000\u041e"+
		"\u041f\u0005\u008a\u0000\u0000\u041f\u0420\u0005\u0108\u0000\u0000\u0420"+
		"\u0422\u0003\u00d6k\u0000\u0421\u0423\u0003*\u0015\u0000\u0422\u0421\u0001"+
		"\u0000\u0000\u0000\u0422\u0423\u0001\u0000\u0000\u0000\u0423\u04ab\u0001"+
		"\u0000\u0000\u0000\u0424\u0425\u0005\u011c\u0000\u0000\u0425\u0426\u0005"+
		"\u0108\u0000\u0000\u0426\u0428\u0003\u00d6k\u0000\u0427\u0429\u0003*\u0015"+
		"\u0000\u0428\u0427\u0001\u0000\u0000\u0000\u0428\u0429\u0001\u0000\u0000"+
		"\u0000\u0429\u04ab\u0001\u0000\u0000\u0000\u042a\u042c\u0005\u00ab\u0000"+
		"\u0000\u042b\u042a\u0001\u0000\u0000\u0000\u042b\u042c\u0001\u0000\u0000"+
		"\u0000\u042c\u042d\u0001\u0000\u0000\u0000\u042d\u042e\u0005\u00dc\u0000"+
		"\u0000\u042e\u042f\u0005\u0108\u0000\u0000\u042f\u0432\u0003\u00d6k\u0000"+
		"\u0430\u0431\u0007\t\u0000\u0000\u0431\u0433\u0005\u00c6\u0000\u0000\u0432"+
		"\u0430\u0001\u0000\u0000\u0000\u0432\u0433\u0001\u0000\u0000\u0000\u0433"+
		"\u04ab\u0001\u0000\u0000\u0000\u0434\u0435\u0007\n\u0000\u0000\u0435\u0439"+
		"\u0003\u0154\u00aa\u0000\u0436\u0438\t\u0000\u0000\u0000\u0437\u0436\u0001"+
		"\u0000\u0000\u0000\u0438\u043b\u0001\u0000\u0000\u0000\u0439\u043a\u0001"+
		"\u0000\u0000\u0000\u0439\u0437\u0001\u0000\u0000\u0000\u043a\u04ab\u0001"+
		"\u0000\u0000\u0000\u043b\u0439\u0001\u0000\u0000\u0000\u043c\u043d\u0005"+
		"\u00f5\u0000\u0000\u043d\u0441\u0005\u00e5\u0000\u0000\u043e\u0440\t\u0000"+
		"\u0000\u0000\u043f\u043e\u0001\u0000\u0000\u0000\u0440\u0443\u0001\u0000"+
		"\u0000\u0000\u0441\u0442\u0001\u0000\u0000\u0000\u0441\u043f\u0001\u0000"+
		"\u0000\u0000\u0442\u04ab\u0001\u0000\u0000\u0000\u0443\u0441\u0001\u0000"+
		"\u0000\u0000\u0444\u0445\u0005\u00f5\u0000\u0000\u0445\u0446\u0005\u0110"+
		"\u0000\u0000\u0446\u0447\u0005\u0139\u0000\u0000\u0447\u04ab\u0003\u0112"+
		"\u0089\u0000\u0448\u0449\u0005\u00f5\u0000\u0000\u0449\u044a\u0005\u0110"+
		"\u0000\u0000\u044a\u044b\u0005\u0139\u0000\u0000\u044b\u04ab\u0003\u0010"+
		"\b\u0000\u044c\u044d\u0005\u00f5\u0000\u0000\u044d\u044e\u0005\u0110\u0000"+
		"\u0000\u044e\u0452\u0005\u0139\u0000\u0000\u044f\u0451\t\u0000\u0000\u0000"+
		"\u0450\u044f\u0001\u0000\u0000\u0000\u0451\u0454\u0001\u0000\u0000\u0000"+
		"\u0452\u0453\u0001\u0000\u0000\u0000\u0452\u0450\u0001\u0000\u0000\u0000"+
		"\u0453\u04ab\u0001\u0000\u0000\u0000\u0454\u0452\u0001\u0000\u0000\u0000"+
		"\u0455\u0456\u0005\u00f5\u0000\u0000\u0456\u0457\u0003\u0012\t\u0000\u0457"+
		"\u0458\u0005\u013a\u0000\u0000\u0458\u0459\u0003\u0014\n\u0000\u0459\u04ab"+
		"\u0001\u0000\u0000\u0000\u045a\u045b\u0005\u00f5\u0000\u0000\u045b\u0463"+
		"\u0003\u0012\t\u0000\u045c\u0460\u0005\u013a\u0000\u0000\u045d\u045f\t"+
		"\u0000\u0000\u0000\u045e\u045d\u0001\u0000\u0000\u0000\u045f\u0462\u0001"+
		"\u0000\u0000\u0000\u0460\u0461\u0001\u0000\u0000\u0000\u0460\u045e\u0001"+
		"\u0000\u0000\u0000\u0461\u0464\u0001\u0000\u0000\u0000\u0462\u0460\u0001"+
		"\u0000\u0000\u0000\u0463\u045c\u0001\u0000\u0000\u0000\u0463\u0464\u0001"+
		"\u0000\u0000\u0000\u0464\u04ab\u0001\u0000\u0000\u0000\u0465\u0469\u0005"+
		"\u00f5\u0000\u0000\u0466\u0468\t\u0000\u0000\u0000\u0467\u0466\u0001\u0000"+
		"\u0000\u0000\u0468\u046b\u0001\u0000\u0000\u0000\u0469\u046a\u0001\u0000"+
		"\u0000\u0000\u0469\u0467\u0001\u0000\u0000\u0000\u046a\u046c\u0001\u0000"+
		"\u0000\u0000\u046b\u0469\u0001\u0000\u0000\u0000\u046c\u046d\u0005\u013a"+
		"\u0000\u0000\u046d\u04ab\u0003\u0014\n\u0000\u046e\u0472\u0005\u00f5\u0000"+
		"\u0000\u046f\u0471\t\u0000\u0000\u0000\u0470\u046f\u0001\u0000\u0000\u0000"+
		"\u0471\u0474\u0001\u0000\u0000\u0000\u0472\u0473\u0001\u0000\u0000\u0000"+
		"\u0472\u0470\u0001\u0000\u0000\u0000\u0473\u04ab\u0001\u0000\u0000\u0000"+
		"\u0474\u0472\u0001\u0000\u0000\u0000\u0475\u0476\u0005\u00df\u0000\u0000"+
		"\u0476\u04ab\u0003\u0012\t\u0000\u0477\u047b\u0005\u00df\u0000\u0000\u0478"+
		"\u047a\t\u0000\u0000\u0000\u0479\u0478\u0001\u0000\u0000\u0000\u047a\u047d"+
		"\u0001\u0000\u0000\u0000\u047b\u047c\u0001\u0000\u0000\u0000\u047b\u0479"+
		"\u0001\u0000\u0000\u0000\u047c\u04ab\u0001\u0000\u0000\u0000\u047d\u047b"+
		"\u0001\u0000\u0000\u0000\u047e\u047f\u0005;\u0000\u0000\u047f\u0483\u0005"+
		"\u0082\u0000\u0000\u0480\u0481\u0005}\u0000\u0000\u0481\u0482\u0005\u00b2"+
		"\u0000\u0000\u0482\u0484\u0005`\u0000\u0000\u0483\u0480\u0001\u0000\u0000"+
		"\u0000\u0483\u0484\u0001\u0000\u0000\u0000\u0484\u0485\u0001\u0000\u0000"+
		"\u0000\u0485\u0486\u0003\u0154\u00aa\u0000\u0486\u0488\u0005\u00b7\u0000"+
		"\u0000\u0487\u0489\u0005\u0108\u0000\u0000\u0488\u0487\u0001\u0000\u0000"+
		"\u0000\u0488\u0489\u0001\u0000\u0000\u0000\u0489\u048a\u0001\u0000\u0000"+
		"\u0000\u048a\u048d\u0003\u00d6k\u0000\u048b\u048c\u0005\u012b\u0000\u0000"+
		"\u048c\u048e\u0003\u0154\u00aa\u0000\u048d\u048b\u0001\u0000\u0000\u0000"+
		"\u048d\u048e\u0001\u0000\u0000\u0000\u048e\u048f\u0001\u0000\u0000\u0000"+
		"\u048f\u0490\u0005\u0002\u0000\u0000\u0490\u0491\u0003\u00d8l\u0000\u0491"+
		"\u0494\u0005\u0003\u0000\u0000\u0492\u0493\u0005\u00ba\u0000\u0000\u0493"+
		"\u0495\u0003>\u001f\u0000\u0494\u0492\u0001\u0000\u0000\u0000\u0494\u0495"+
		"\u0001\u0000\u0000\u0000\u0495\u04ab\u0001\u0000\u0000\u0000\u0496\u0497"+
		"\u0005X\u0000\u0000\u0497\u049a\u0005\u0082\u0000\u0000\u0498\u0499\u0005"+
		"}\u0000\u0000\u0499\u049b\u0005`\u0000\u0000\u049a\u0498\u0001\u0000\u0000"+
		"\u0000\u049a\u049b\u0001\u0000\u0000\u0000\u049b\u049c\u0001\u0000\u0000"+
		"\u0000\u049c\u049d\u0003\u0154\u00aa\u0000\u049d\u049f\u0005\u00b7\u0000"+
		"\u0000\u049e\u04a0\u0005\u0108\u0000\u0000\u049f\u049e\u0001\u0000\u0000"+
		"\u0000\u049f\u04a0\u0001\u0000\u0000\u0000\u04a0\u04a1\u0001\u0000\u0000"+
		"\u0000\u04a1\u04a2\u0003\u00d6k\u0000\u04a2\u04ab\u0001\u0000\u0000\u0000"+
		"\u04a3\u04a7\u0003\u0016\u000b\u0000\u04a4\u04a6\t\u0000\u0000\u0000\u04a5"+
		"\u04a4\u0001\u0000\u0000\u0000\u04a6\u04a9\u0001\u0000\u0000\u0000\u04a7"+
		"\u04a8\u0001\u0000\u0000\u0000\u04a7\u04a5\u0001\u0000\u0000\u0000\u04a8"+
		"\u04ab\u0001\u0000\u0000\u0000\u04a9\u04a7\u0001\u0000\u0000\u0000\u04aa"+
		"\u0187\u0001\u0000\u0000\u0000\u04aa\u0189\u0001\u0000\u0000\u0000\u04aa"+
		"\u018c\u0001\u0000\u0000\u0000\u04aa\u018e\u0001\u0000\u0000\u0000\u04aa"+
		"\u0192\u0001\u0000\u0000\u0000\u04aa\u0198\u0001\u0000\u0000\u0000\u04aa"+
		"\u01aa\u0001\u0000\u0000\u0000\u04aa\u01b1\u0001\u0000\u0000\u0000\u04aa"+
		"\u01b7\u0001\u0000\u0000\u0000\u04aa\u01c1\u0001\u0000\u0000\u0000\u04aa"+
		"\u01cd\u0001\u0000\u0000\u0000\u04aa\u01de\u0001\u0000\u0000\u0000\u04aa"+
		"\u01f3\u0001\u0000\u0000\u0000\u04aa\u0204\u0001\u0000\u0000\u0000\u04aa"+
		"\u0215\u0001\u0000\u0000\u0000\u04aa\u0220\u0001\u0000\u0000\u0000\u04aa"+
		"\u0227\u0001\u0000\u0000\u0000\u04aa\u0230\u0001\u0000\u0000\u0000\u04aa"+
		"\u0239\u0001\u0000\u0000\u0000\u04aa\u0246\u0001\u0000\u0000\u0000\u04aa"+
		"\u0251\u0001\u0000\u0000\u0000\u04aa\u0258\u0001\u0000\u0000\u0000\u04aa"+
		"\u025f\u0001\u0000\u0000\u0000\u04aa\u026a\u0001\u0000\u0000\u0000\u04aa"+
		"\u0275\u0001\u0000\u0000\u0000\u04aa\u0284\u0001\u0000\u0000\u0000\u04aa"+
		"\u0290\u0001\u0000\u0000\u0000\u04aa\u029e\u0001\u0000\u0000\u0000\u04aa"+
		"\u02a8\u0001\u0000\u0000\u0000\u04aa\u02b6\u0001\u0000\u0000\u0000\u04aa"+
		"\u02be\u0001\u0000\u0000\u0000\u04aa\u02d1\u0001\u0000\u0000\u0000\u04aa"+
		"\u02da\u0001\u0000\u0000\u0000\u04aa\u02e0\u0001\u0000\u0000\u0000\u04aa"+
		"\u02ea\u0001\u0000\u0000\u0000\u04aa\u02f1\u0001\u0000\u0000\u0000\u04aa"+
		"\u0314\u0001\u0000\u0000\u0000\u04aa\u032a\u0001\u0000\u0000\u0000\u04aa"+
		"\u0332\u0001\u0000\u0000\u0000\u04aa\u034e\u0001\u0000\u0000\u0000\u04aa"+
		"\u0358\u0001\u0000\u0000\u0000\u04aa\u035d\u0001\u0000\u0000\u0000\u04aa"+
		"\u0369\u0001\u0000\u0000\u0000\u04aa\u0375\u0001\u0000\u0000\u0000\u04aa"+
		"\u037e\u0001\u0000\u0000\u0000\u04aa\u0386\u0001\u0000\u0000\u0000\u04aa"+
		"\u0392\u0001\u0000\u0000\u0000\u04aa\u0398\u0001\u0000\u0000\u0000\u04aa"+
		"\u03aa\u0001\u0000\u0000\u0000\u04aa\u03b2\u0001\u0000\u0000\u0000\u04aa"+
		"\u03b5\u0001\u0000\u0000\u0000\u04aa\u03bd\u0001\u0000\u0000\u0000\u04aa"+
		"\u03c3\u0001\u0000\u0000\u0000\u04aa\u03ca\u0001\u0000\u0000\u0000\u04aa"+
		"\u03d8\u0001\u0000\u0000\u0000\u04aa\u03dd\u0001\u0000\u0000\u0000\u04aa"+
		"\u03e4\u0001\u0000\u0000\u0000\u04aa\u03eb\u0001\u0000\u0000\u0000\u04aa"+
		"\u03ee\u0001\u0000\u0000\u0000\u04aa\u03f1\u0001\u0000\u0000\u0000\u04aa"+
		"\u03fb\u0001\u0000\u0000\u0000\u04aa\u040b\u0001\u0000\u0000\u0000\u04aa"+
		"\u0412\u0001\u0000\u0000\u0000\u04aa\u0414\u0001\u0000\u0000\u0000\u04aa"+
		"\u0424\u0001\u0000\u0000\u0000\u04aa\u042b\u0001\u0000\u0000\u0000\u04aa"+
		"\u0434\u0001\u0000\u0000\u0000\u04aa\u043c\u0001\u0000\u0000\u0000\u04aa"+
		"\u0444\u0001\u0000\u0000\u0000\u04aa\u0448\u0001\u0000\u0000\u0000\u04aa"+
		"\u044c\u0001\u0000\u0000\u0000\u04aa\u0455\u0001\u0000\u0000\u0000\u04aa"+
		"\u045a\u0001\u0000\u0000\u0000\u04aa\u0465\u0001\u0000\u0000\u0000\u04aa"+
		"\u046e\u0001\u0000\u0000\u0000\u04aa\u0475\u0001\u0000\u0000\u0000\u04aa"+
		"\u0477\u0001\u0000\u0000\u0000\u04aa\u047e\u0001\u0000\u0000\u0000\u04aa"+
		"\u0496\u0001\u0000\u0000\u0000\u04aa\u04a3\u0001\u0000\u0000\u0000\u04ab"+
		"\u000f\u0001\u0000\u0000\u0000\u04ac\u04af\u0003\u0160\u00b0\u0000\u04ad"+
		"\u04af\u0005\u009a\u0000\u0000\u04ae\u04ac\u0001\u0000\u0000\u0000\u04ae"+
		"\u04ad\u0001\u0000\u0000\u0000\u04af\u0011\u0001\u0000\u0000\u0000\u04b0"+
		"\u04b1\u0003\u0158\u00ac\u0000\u04b1\u0013\u0001\u0000\u0000\u0000\u04b2"+
		"\u04b3\u0003\u015a\u00ad\u0000\u04b3\u0015\u0001\u0000\u0000\u0000\u04b4"+
		"\u04b5\u0005;\u0000\u0000\u04b5\u055d\u0005\u00e5\u0000\u0000\u04b6\u04b7"+
		"\u0005X\u0000\u0000\u04b7\u055d\u0005\u00e5\u0000\u0000\u04b8\u04ba\u0005"+
		"w\u0000\u0000\u04b9\u04bb\u0005\u00e5\u0000\u0000\u04ba\u04b9\u0001\u0000"+
		"\u0000\u0000\u04ba\u04bb\u0001\u0000\u0000\u0000\u04bb\u055d\u0001\u0000"+
		"\u0000\u0000\u04bc\u04be\u0005\u00e2\u0000\u0000\u04bd\u04bf\u0005\u00e5"+
		"\u0000\u0000\u04be\u04bd\u0001\u0000\u0000\u0000\u04be\u04bf\u0001\u0000"+
		"\u0000\u0000\u04bf\u055d\u0001\u0000\u0000\u0000\u04c0\u04c1\u0005\u00f8"+
		"\u0000\u0000\u04c1\u055d\u0005w\u0000\u0000\u04c2\u04c3\u0005\u00f8\u0000"+
		"\u0000\u04c3\u04c5\u0005\u00e5\u0000\u0000\u04c4\u04c6\u0005w\u0000\u0000"+
		"\u04c5\u04c4\u0001\u0000\u0000\u0000\u04c5\u04c6\u0001\u0000\u0000\u0000"+
		"\u04c6\u055d\u0001\u0000\u0000\u0000\u04c7\u04c8\u0005\u00f8\u0000\u0000"+
		"\u04c8\u055d\u0005\u00cf\u0000\u0000\u04c9\u04ca\u0005\u00f8\u0000\u0000"+
		"\u04ca\u055d\u0005\u00e6\u0000\u0000\u04cb\u04cc\u0005\u00f8\u0000\u0000"+
		"\u04cc\u04cd\u0005>\u0000\u0000\u04cd\u055d\u0005\u00e6\u0000\u0000\u04ce"+
		"\u04cf\u0005b\u0000\u0000\u04cf\u055d\u0005\u0108\u0000\u0000\u04d0\u04d1"+
		"\u0005\u007f\u0000\u0000\u04d1\u055d\u0005\u0108\u0000\u0000\u04d2\u04d3"+
		"\u0005\u00f8\u0000\u0000\u04d3\u055d\u00056\u0000\u0000\u04d4\u04d5\u0005"+
		"\u00f8\u0000\u0000\u04d5\u04d6\u0005;\u0000\u0000\u04d6\u055d\u0005\u0108"+
		"\u0000\u0000\u04d7\u04d8\u0005\u00f8\u0000\u0000\u04d8\u055d\u0005\u0118"+
		"\u0000\u0000\u04d9\u04da\u0005\u00f8\u0000\u0000\u04da\u055d\u0005\u0083"+
		"\u0000\u0000\u04db\u04dc\u0005\u00f8\u0000\u0000\u04dc\u055d\u0005\u009d"+
		"\u0000\u0000\u04dd\u04de\u0005;\u0000\u0000\u04de\u055d\u0005\u0082\u0000"+
		"\u0000\u04df\u04e0\u0005X\u0000\u0000\u04e0\u055d\u0005\u0082\u0000\u0000"+
		"\u04e1\u04e2\u0005\u0011\u0000\u0000\u04e2\u055d\u0005\u0082\u0000\u0000"+
		"\u04e3\u04e4\u0005\u009c\u0000\u0000\u04e4\u055d\u0005\u0108\u0000\u0000"+
		"\u04e5\u04e6\u0005\u009c\u0000\u0000\u04e6\u055d\u0005G\u0000\u0000\u04e7"+
		"\u04e8\u0005\u0125\u0000\u0000\u04e8\u055d\u0005\u0108\u0000\u0000\u04e9"+
		"\u04ea\u0005\u0125\u0000\u0000\u04ea\u055d\u0005G\u0000\u0000\u04eb\u04ec"+
		"\u0005;\u0000\u0000\u04ec\u04ed\u0005\u010d\u0000\u0000\u04ed\u055d\u0005"+
		"\u009f\u0000\u0000\u04ee\u04ef\u0005X\u0000\u0000\u04ef\u04f0\u0005\u010d"+
		"\u0000\u0000\u04f0\u055d\u0005\u009f\u0000\u0000\u04f1\u04f2\u0005\u0011"+
		"\u0000\u0000\u04f2\u04f3\u0005\u0108\u0000\u0000\u04f3\u04f4\u0003\u00dc"+
		"n\u0000\u04f4\u04f5\u0005\u00b2\u0000\u0000\u04f5\u04f6\u0005-\u0000\u0000"+
		"\u04f6\u055d\u0001\u0000\u0000\u0000\u04f7\u04f8\u0005\u0011\u0000\u0000"+
		"\u04f8\u04f9\u0005\u0108\u0000\u0000\u04f9\u04fa\u0003\u00dcn\u0000\u04fa"+
		"\u04fb\u0005-\u0000\u0000\u04fb\u04fc\u0005\"\u0000\u0000\u04fc\u055d"+
		"\u0001\u0000\u0000\u0000\u04fd\u04fe\u0005\u0011\u0000\u0000\u04fe\u04ff"+
		"\u0005\u0108\u0000\u0000\u04ff\u0500\u0003\u00dcn\u0000\u0500\u0501\u0005"+
		"\u00b2\u0000\u0000\u0501\u0502\u0005\u00fc\u0000\u0000\u0502\u055d\u0001"+
		"\u0000\u0000\u0000\u0503\u0504\u0005\u0011\u0000\u0000\u0504\u0505\u0005"+
		"\u0108\u0000\u0000\u0505\u0506\u0003\u00dcn\u0000\u0506\u0507\u0005\u00f9"+
		"\u0000\u0000\u0507\u0508\u0005\"\u0000\u0000\u0508\u055d\u0001\u0000\u0000"+
		"\u0000\u0509\u050a\u0005\u0011\u0000\u0000\u050a\u050b\u0005\u0108\u0000"+
		"\u0000\u050b\u050c\u0003\u00dcn\u0000\u050c\u050d\u0005\u00b2\u0000\u0000"+
		"\u050d\u050e\u0005\u00f9\u0000\u0000\u050e\u055d\u0001\u0000\u0000\u0000"+
		"\u050f\u0510\u0005\u0011\u0000\u0000\u0510\u0511\u0005\u0108\u0000\u0000"+
		"\u0511\u0512\u0003\u00dcn\u0000\u0512\u0513\u0005\u00b2\u0000\u0000\u0513"+
		"\u0514\u0005\u0100\u0000\u0000\u0514\u0515\u0005\u001a\u0000\u0000\u0515"+
		"\u0516\u0005S\u0000\u0000\u0516\u055d\u0001\u0000\u0000\u0000\u0517\u0518"+
		"\u0005\u0011\u0000\u0000\u0518\u0519\u0005\u0108\u0000\u0000\u0519\u051a"+
		"\u0003\u00dcn\u0000\u051a\u051b\u0005\u00f5\u0000\u0000\u051b\u051c\u0005"+
		"\u00f9\u0000\u0000\u051c\u051d\u0005\u009b\u0000\u0000\u051d\u055d\u0001"+
		"\u0000\u0000\u0000\u051e\u051f\u0005\u0011\u0000\u0000\u051f\u0520\u0005"+
		"\u0108\u0000\u0000\u0520\u0521\u0003\u00dcn\u0000\u0521\u0522\u0005^\u0000"+
		"\u0000\u0522\u0523\u0005\u00c4\u0000\u0000\u0523\u055d\u0001\u0000\u0000"+
		"\u0000\u0524\u0525\u0005\u0011\u0000\u0000\u0525\u0526\u0005\u0108\u0000"+
		"\u0000\u0526\u0527\u0003\u00dcn\u0000\u0527\u0528\u0005\u0018\u0000\u0000"+
		"\u0528\u0529\u0005\u00c4\u0000\u0000\u0529\u055d\u0001\u0000\u0000\u0000"+
		"\u052a\u052b\u0005\u0011\u0000\u0000\u052b\u052c\u0005\u0108\u0000\u0000"+
		"\u052c\u052d\u0003\u00dcn\u0000\u052d\u052e\u0005\u011f\u0000\u0000\u052e"+
		"\u052f\u0005\u00c4\u0000\u0000\u052f\u055d\u0001\u0000\u0000\u0000\u0530"+
		"\u0531\u0005\u0011\u0000\u0000\u0531\u0532\u0005\u0108\u0000\u0000\u0532"+
		"\u0533\u0003\u00dcn\u0000\u0533\u0534\u0005\u0115\u0000\u0000\u0534\u055d"+
		"\u0001\u0000\u0000\u0000\u0535\u0536\u0005\u0011\u0000\u0000\u0536\u0537"+
		"\u0005\u0108\u0000\u0000\u0537\u0539\u0003\u00dcn\u0000\u0538\u053a\u0003"+
		"*\u0015\u0000\u0539\u0538\u0001\u0000\u0000\u0000\u0539\u053a\u0001\u0000"+
		"\u0000\u0000\u053a\u053b\u0001\u0000\u0000\u0000\u053b\u053c\u00055\u0000"+
		"\u0000\u053c\u055d\u0001\u0000\u0000\u0000\u053d\u053e\u0005\u0011\u0000"+
		"\u0000\u053e\u053f\u0005\u0108\u0000\u0000\u053f\u0541\u0003\u00dcn\u0000"+
		"\u0540\u0542\u0003*\u0015\u0000\u0541\u0540\u0001\u0000\u0000\u0000\u0541"+
		"\u0542\u0001\u0000\u0000\u0000\u0542\u0543\u0001\u0000\u0000\u0000\u0543"+
		"\u0544\u00058\u0000\u0000\u0544\u055d\u0001\u0000\u0000\u0000\u0545\u0546"+
		"\u0005\u0011\u0000\u0000\u0546\u0547\u0005\u0108\u0000\u0000\u0547\u0549"+
		"\u0003\u00dcn\u0000\u0548\u054a\u0003*\u0015\u0000\u0549\u0548\u0001\u0000"+
		"\u0000\u0000\u0549\u054a\u0001\u0000\u0000\u0000\u054a\u054b\u0001\u0000"+
		"\u0000\u0000\u054b\u054c\u0005\u00f5\u0000\u0000\u054c\u054d\u0005j\u0000"+
		"\u0000\u054d\u055d\u0001\u0000\u0000\u0000\u054e\u054f\u0005\u0011\u0000"+
		"\u0000\u054f\u0550\u0005\u0108\u0000\u0000\u0550\u0552\u0003\u00dcn\u0000"+
		"\u0551\u0553\u0003*\u0015\u0000\u0552\u0551\u0001\u0000\u0000\u0000\u0552"+
		"\u0553\u0001\u0000\u0000\u0000\u0553\u0554\u0001\u0000\u0000\u0000\u0554"+
		"\u0555\u0005\u00de\u0000\u0000\u0555\u0556\u00052\u0000\u0000\u0556\u055d"+
		"\u0001\u0000\u0000\u0000\u0557\u0558\u0005\u00fe\u0000\u0000\u0558\u055d"+
		"\u0005\u0117\u0000\u0000\u0559\u055d\u00054\u0000\u0000\u055a\u055d\u0005"+
		"\u00e7\u0000\u0000\u055b\u055d\u0005R\u0000\u0000\u055c\u04b4\u0001\u0000"+
		"\u0000\u0000\u055c\u04b6\u0001\u0000\u0000\u0000\u055c\u04b8\u0001\u0000"+
		"\u0000\u0000\u055c\u04bc\u0001\u0000\u0000\u0000\u055c\u04c0\u0001\u0000"+
		"\u0000\u0000\u055c\u04c2\u0001\u0000\u0000\u0000\u055c\u04c7\u0001\u0000"+
		"\u0000\u0000\u055c\u04c9\u0001\u0000\u0000\u0000\u055c\u04cb\u0001\u0000"+
		"\u0000\u0000\u055c\u04ce\u0001\u0000\u0000\u0000\u055c\u04d0\u0001\u0000"+
		"\u0000\u0000\u055c\u04d2\u0001\u0000\u0000\u0000\u055c\u04d4\u0001\u0000"+
		"\u0000\u0000\u055c\u04d7\u0001\u0000\u0000\u0000\u055c\u04d9\u0001\u0000"+
		"\u0000\u0000\u055c\u04db\u0001\u0000\u0000\u0000\u055c\u04dd\u0001\u0000"+
		"\u0000\u0000\u055c\u04df\u0001\u0000\u0000\u0000\u055c\u04e1\u0001\u0000"+
		"\u0000\u0000\u055c\u04e3\u0001\u0000\u0000\u0000\u055c\u04e5\u0001\u0000"+
		"\u0000\u0000\u055c\u04e7\u0001\u0000\u0000\u0000\u055c\u04e9\u0001\u0000"+
		"\u0000\u0000\u055c\u04eb\u0001\u0000\u0000\u0000\u055c\u04ee\u0001\u0000"+
		"\u0000\u0000\u055c\u04f1\u0001\u0000\u0000\u0000\u055c\u04f7\u0001\u0000"+
		"\u0000\u0000\u055c\u04fd\u0001\u0000\u0000\u0000\u055c\u0503\u0001\u0000"+
		"\u0000\u0000\u055c\u0509\u0001\u0000\u0000\u0000\u055c\u050f\u0001\u0000"+
		"\u0000\u0000\u055c\u0517\u0001\u0000\u0000\u0000\u055c\u051e\u0001\u0000"+
		"\u0000\u0000\u055c\u0524\u0001\u0000\u0000\u0000\u055c\u052a\u0001\u0000"+
		"\u0000\u0000\u055c\u0530\u0001\u0000\u0000\u0000\u055c\u0535\u0001\u0000"+
		"\u0000\u0000\u055c\u053d\u0001\u0000\u0000\u0000\u055c\u0545\u0001\u0000"+
		"\u0000\u0000\u055c\u054e\u0001\u0000\u0000\u0000\u055c\u0557\u0001\u0000"+
		"\u0000\u0000\u055c\u0559\u0001\u0000\u0000\u0000\u055c\u055a\u0001\u0000"+
		"\u0000\u0000\u055c\u055b\u0001\u0000\u0000\u0000\u055d\u0017\u0001\u0000"+
		"\u0000\u0000\u055e\u0560\u0005;\u0000\u0000\u055f\u0561\u0005\u010d\u0000"+
		"\u0000\u0560\u055f\u0001\u0000\u0000\u0000\u0560\u0561\u0001\u0000\u0000"+
		"\u0000\u0561\u0563\u0001\u0000\u0000\u0000\u0562\u0564\u0005d\u0000\u0000"+
		"\u0563\u0562\u0001\u0000\u0000\u0000\u0563\u0564\u0001\u0000\u0000\u0000"+
		"\u0564\u0565\u0001\u0000\u0000\u0000\u0565\u0569\u0005\u0108\u0000\u0000"+
		"\u0566\u0567\u0005}\u0000\u0000\u0567\u0568\u0005\u00b2\u0000\u0000\u0568"+
		"\u056a\u0005`\u0000\u0000\u0569\u0566\u0001\u0000\u0000\u0000\u0569\u056a"+
		"\u0001\u0000\u0000\u0000\u056a\u056b\u0001\u0000\u0000\u0000\u056b\u056c"+
		"\u0003\u00d6k\u0000\u056c\u0019\u0001\u0000\u0000\u0000\u056d\u056e\u0005"+
		";\u0000\u0000\u056e\u0570\u0005\u00bb\u0000\u0000\u056f\u056d\u0001\u0000"+
		"\u0000\u0000\u056f\u0570\u0001\u0000\u0000\u0000\u0570\u0571\u0001\u0000"+
		"\u0000\u0000\u0571\u0572\u0005\u00de\u0000\u0000\u0572\u0573\u0005\u0108"+
		"\u0000\u0000\u0573\u0574\u0003\u00d6k\u0000\u0574\u001b\u0001\u0000\u0000"+
		"\u0000\u0575\u0576\u0005-\u0000\u0000\u0576\u0577\u0005\"\u0000\u0000"+
		"\u0577\u057b\u0003\u00be_\u0000\u0578\u0579\u0005\u00fc\u0000\u0000\u0579"+
		"\u057a\u0005\"\u0000\u0000\u057a\u057c\u0003\u00c2a\u0000\u057b\u0578"+
		"\u0001\u0000\u0000\u0000\u057b\u057c\u0001\u0000\u0000\u0000\u057c\u057d"+
		"\u0001\u0000\u0000\u0000\u057d\u057e\u0005\u008a\u0000\u0000\u057e\u057f"+
		"\u0005\u0156\u0000\u0000\u057f\u0580\u0005!\u0000\u0000\u0580\u001d\u0001"+
		"\u0000\u0000\u0000\u0581\u0582\u0005\u00f9\u0000\u0000\u0582\u0583\u0005"+
		"\"\u0000\u0000\u0583\u0584\u0003\u00be_\u0000\u0584\u0587\u0005\u00b7"+
		"\u0000\u0000\u0585\u0588\u0003F#\u0000\u0586\u0588\u0003H$\u0000\u0587"+
		"\u0585\u0001\u0000\u0000\u0000\u0587\u0586\u0001\u0000\u0000\u0000\u0588"+
		"\u058c\u0001\u0000\u0000\u0000\u0589\u058a\u0005\u0100\u0000\u0000\u058a"+
		"\u058b\u0005\u001a\u0000\u0000\u058b\u058d\u0005S\u0000\u0000\u058c\u0589"+
		"\u0001\u0000\u0000\u0000\u058c\u058d\u0001\u0000\u0000\u0000\u058d\u001f"+
		"\u0001\u0000\u0000\u0000\u058e\u058f\u0005\u009b\u0000\u0000\u058f\u0590"+
		"\u0003\u0160\u00b0\u0000\u0590!\u0001\u0000\u0000\u0000\u0591\u0592\u0005"+
		"3\u0000\u0000\u0592\u0593\u0003\u0160\u00b0\u0000\u0593#\u0001\u0000\u0000"+
		"\u0000\u0594\u0596\u00036\u001b\u0000\u0595\u0594\u0001\u0000\u0000\u0000"+
		"\u0595\u0596\u0001\u0000\u0000\u0000\u0596\u0597\u0001\u0000\u0000\u0000"+
		"\u0597\u0598\u0003X,\u0000\u0598\u0599\u0003T*\u0000\u0599%\u0001\u0000"+
		"\u0000\u0000\u059a\u059b\u0005\u0087\u0000\u0000\u059b\u059d\u0005\u00c3"+
		"\u0000\u0000\u059c\u059e\u0005\u0108\u0000\u0000\u059d\u059c\u0001\u0000"+
		"\u0000\u0000\u059d\u059e\u0001\u0000\u0000\u0000\u059e\u059f\u0001\u0000"+
		"\u0000\u0000\u059f\u05a6\u0003\u00d6k\u0000\u05a0\u05a4\u0003*\u0015\u0000"+
		"\u05a1\u05a2\u0005}\u0000\u0000\u05a2\u05a3\u0005\u00b2\u0000\u0000\u05a3"+
		"\u05a5\u0005`\u0000\u0000\u05a4\u05a1\u0001\u0000\u0000\u0000\u05a4\u05a5"+
		"\u0001\u0000\u0000\u0000\u05a5\u05a7\u0001\u0000\u0000\u0000\u05a6\u05a0"+
		"\u0001\u0000\u0000\u0000\u05a6\u05a7\u0001\u0000\u0000\u0000\u05a7\u05a9"+
		"\u0001\u0000\u0000\u0000\u05a8\u05aa\u0003\u00be_\u0000\u05a9\u05a8\u0001"+
		"\u0000\u0000\u0000\u05a9\u05aa\u0001\u0000\u0000\u0000\u05aa\u05e1\u0001"+
		"\u0000\u0000\u0000\u05ab\u05ac\u0005\u0087\u0000\u0000\u05ac\u05ae\u0005"+
		"\u008a\u0000\u0000\u05ad\u05af\u0005\u0108\u0000\u0000\u05ae\u05ad\u0001"+
		"\u0000\u0000\u0000\u05ae\u05af\u0001\u0000\u0000\u0000\u05af\u05b0\u0001"+
		"\u0000\u0000\u0000\u05b0\u05b2\u0003\u00d6k\u0000\u05b1\u05b3\u0003*\u0015"+
		"\u0000\u05b2\u05b1\u0001\u0000\u0000\u0000\u05b2\u05b3\u0001\u0000\u0000"+
		"\u0000\u05b3\u05b7\u0001\u0000\u0000\u0000\u05b4\u05b5\u0005}\u0000\u0000"+
		"\u05b5\u05b6\u0005\u00b2\u0000\u0000\u05b6\u05b8\u0005`\u0000\u0000\u05b7"+
		"\u05b4\u0001\u0000\u0000\u0000\u05b7\u05b8\u0001\u0000\u0000\u0000\u05b8"+
		"\u05ba\u0001\u0000\u0000\u0000\u05b9\u05bb\u0003\u00be_\u0000\u05ba\u05b9"+
		"\u0001\u0000\u0000\u0000\u05ba\u05bb\u0001\u0000\u0000\u0000\u05bb\u05e1"+
		"\u0001\u0000\u0000\u0000\u05bc\u05bd\u0005\u0087\u0000\u0000\u05bd\u05bf"+
		"\u0005\u008a\u0000\u0000\u05be\u05c0\u0005\u0108\u0000\u0000\u05bf\u05be"+
		"\u0001\u0000\u0000\u0000\u05bf\u05c0\u0001\u0000\u0000\u0000\u05c0\u05c1"+
		"\u0001\u0000\u0000\u0000\u05c1\u05c2\u0003\u00d6k\u0000\u05c2\u05c3\u0005"+
		"\u00de\u0000\u0000\u05c3\u05c4\u0003z=\u0000\u05c4\u05e1\u0001\u0000\u0000"+
		"\u0000\u05c5\u05c6\u0005\u0087\u0000\u0000\u05c6\u05c8\u0005\u00c3\u0000"+
		"\u0000\u05c7\u05c9\u0005\u009a\u0000\u0000\u05c8\u05c7\u0001\u0000\u0000"+
		"\u0000\u05c8\u05c9\u0001\u0000\u0000\u0000\u05c9\u05ca\u0001\u0000\u0000"+
		"\u0000\u05ca\u05cb\u0005T\u0000\u0000\u05cb\u05cd\u0003\u0160\u00b0\u0000"+
		"\u05cc\u05ce\u0003\u00d2i\u0000\u05cd\u05cc\u0001\u0000\u0000\u0000\u05cd"+
		"\u05ce\u0001\u0000\u0000\u0000\u05ce\u05d0\u0001\u0000\u0000\u0000\u05cf"+
		"\u05d1\u0003J%\u0000\u05d0\u05cf\u0001\u0000\u0000\u0000\u05d0\u05d1\u0001"+
		"\u0000\u0000\u0000\u05d1\u05e1\u0001\u0000\u0000\u0000\u05d2\u05d3\u0005"+
		"\u0087\u0000\u0000\u05d3\u05d5\u0005\u00c3\u0000\u0000\u05d4\u05d6\u0005"+
		"\u009a\u0000\u0000\u05d5\u05d4\u0001\u0000\u0000\u0000\u05d5\u05d6\u0001"+
		"\u0000\u0000\u0000\u05d6\u05d7\u0001\u0000\u0000\u0000\u05d7\u05d9\u0005"+
		"T\u0000\u0000\u05d8\u05da\u0003\u0160\u00b0\u0000\u05d9\u05d8\u0001\u0000"+
		"\u0000\u0000\u05d9\u05da\u0001\u0000\u0000\u0000\u05da\u05db\u0001\u0000"+
		"\u0000\u0000\u05db\u05de\u0003:\u001d\u0000\u05dc\u05dd\u0005\u00ba\u0000"+
		"\u0000\u05dd\u05df\u0003>\u001f\u0000\u05de\u05dc\u0001\u0000\u0000\u0000"+
		"\u05de\u05df\u0001\u0000\u0000\u0000\u05df\u05e1\u0001\u0000\u0000\u0000"+
		"\u05e0\u059a\u0001\u0000\u0000\u0000\u05e0\u05ab\u0001\u0000\u0000\u0000"+
		"\u05e0\u05bc\u0001\u0000\u0000\u0000\u05e0\u05c5\u0001\u0000\u0000\u0000"+
		"\u05e0\u05d2\u0001\u0000\u0000\u0000\u05e1\'\u0001\u0000\u0000\u0000\u05e2"+
		"\u05e4\u0003*\u0015\u0000\u05e3\u05e5\u0003 \u0010\u0000\u05e4\u05e3\u0001"+
		"\u0000\u0000\u0000\u05e4\u05e5\u0001\u0000\u0000\u0000\u05e5)\u0001\u0000"+
		"\u0000\u0000\u05e6\u05e7\u0005\u00c4\u0000\u0000\u05e7\u05e8\u0005\u0002"+
		"\u0000\u0000\u05e8\u05ed\u0003,\u0016\u0000\u05e9\u05ea\u0005\u0004\u0000"+
		"\u0000\u05ea\u05ec\u0003,\u0016\u0000\u05eb\u05e9\u0001\u0000\u0000\u0000"+
		"\u05ec\u05ef\u0001\u0000\u0000\u0000\u05ed\u05eb\u0001\u0000\u0000\u0000"+
		"\u05ed\u05ee\u0001\u0000\u0000\u0000\u05ee\u05f0\u0001\u0000\u0000\u0000"+
		"\u05ef\u05ed\u0001\u0000\u0000\u0000\u05f0\u05f1\u0005\u0003\u0000\u0000"+
		"\u05f1+\u0001\u0000\u0000\u0000\u05f2\u05f5\u0003\u0154\u00aa\u0000\u05f3"+
		"\u05f4\u0005\u013a\u0000\u0000\u05f4\u05f6\u0003\u0108\u0084\u0000\u05f5"+
		"\u05f3\u0001\u0000\u0000\u0000\u05f5\u05f6\u0001\u0000\u0000\u0000\u05f6"+
		"\u05fc\u0001\u0000\u0000\u0000\u05f7\u05f8\u0003\u0154\u00aa\u0000\u05f8"+
		"\u05f9\u0005\u013a\u0000\u0000\u05f9\u05fa\u0005L\u0000\u0000\u05fa\u05fc"+
		"\u0001\u0000\u0000\u0000\u05fb\u05f2\u0001\u0000\u0000\u0000\u05fb\u05f7"+
		"\u0001\u0000\u0000\u0000\u05fc-\u0001\u0000\u0000\u0000\u05fd\u05fe\u0007"+
		"\u000b\u0000\u0000\u05fe/\u0001\u0000\u0000\u0000\u05ff\u0600\u0007\f"+
		"\u0000\u0000\u06001\u0001\u0000\u0000\u0000\u0601\u0607\u0003\u014e\u00a7"+
		"\u0000\u0602\u0607\u0003\u0160\u00b0\u0000\u0603\u0607\u0003\u010a\u0085"+
		"\u0000\u0604\u0607\u0003\u010c\u0086\u0000\u0605\u0607\u0003\u010e\u0087"+
		"\u0000\u0606\u0601\u0001\u0000\u0000\u0000\u0606\u0602\u0001\u0000\u0000"+
		"\u0000\u0606\u0603\u0001\u0000\u0000\u0000\u0606\u0604\u0001\u0000\u0000"+
		"\u0000\u0606\u0605\u0001\u0000\u0000\u0000\u06073\u0001\u0000\u0000\u0000"+
		"\u0608\u060d\u0003\u0154\u00aa\u0000\u0609\u060a\u0005\u0005\u0000\u0000"+
		"\u060a\u060c\u0003\u0154\u00aa\u0000\u060b\u0609\u0001\u0000\u0000\u0000"+
		"\u060c\u060f\u0001\u0000\u0000\u0000\u060d\u060b\u0001\u0000\u0000\u0000"+
		"\u060d\u060e\u0001\u0000\u0000\u0000\u060e5\u0001\u0000\u0000\u0000\u060f"+
		"\u060d\u0001\u0000\u0000\u0000\u0610\u0611\u0005\u0135\u0000\u0000\u0611"+
		"\u0616\u00038\u001c\u0000\u0612\u0613\u0005\u0004\u0000\u0000\u0613\u0615"+
		"\u00038\u001c\u0000\u0614\u0612\u0001\u0000\u0000\u0000\u0615\u0618\u0001"+
		"\u0000\u0000\u0000\u0616\u0614\u0001\u0000\u0000\u0000\u0616\u0617\u0001"+
		"\u0000\u0000\u0000\u06177\u0001\u0000\u0000\u0000\u0618\u0616\u0001\u0000"+
		"\u0000\u0000\u0619\u061b\u0003\u0150\u00a8\u0000\u061a\u061c\u0003\u00be"+
		"_\u0000\u061b\u061a\u0001\u0000\u0000\u0000\u061b\u061c\u0001\u0000\u0000"+
		"\u0000\u061c\u061e\u0001\u0000\u0000\u0000\u061d\u061f\u0005\u001a\u0000"+
		"\u0000\u061e\u061d\u0001\u0000\u0000\u0000\u061e\u061f\u0001\u0000\u0000"+
		"\u0000\u061f\u0620\u0001\u0000\u0000\u0000\u0620\u0621\u0005\u0002\u0000"+
		"\u0000\u0621\u0622\u0003$\u0012\u0000\u0622\u0623\u0005\u0003\u0000\u0000"+
		"\u06239\u0001\u0000\u0000\u0000\u0624\u0625\u0005\u012b\u0000\u0000\u0625"+
		"\u0626\u0003\u00d6k\u0000\u0626;\u0001\u0000\u0000\u0000\u0627\u0628\u0005"+
		"\u00ba\u0000\u0000\u0628\u0635\u0003>\u001f\u0000\u0629\u062a\u0005\u00c5"+
		"\u0000\u0000\u062a\u062b\u0005\"\u0000\u0000\u062b\u0635\u0003\u00f0x"+
		"\u0000\u062c\u0635\u0003\u001e\u000f\u0000\u062d\u0635\u0003\u001c\u000e"+
		"\u0000\u062e\u0635\u0003\u00d2i\u0000\u062f\u0635\u0003J%\u0000\u0630"+
		"\u0635\u0003 \u0010\u0000\u0631\u0635\u0003\"\u0011\u0000\u0632\u0633"+
		"\u0005\u010c\u0000\u0000\u0633\u0635\u0003>\u001f\u0000\u0634\u0627\u0001"+
		"\u0000\u0000\u0000\u0634\u0629\u0001\u0000\u0000\u0000\u0634\u062c\u0001"+
		"\u0000\u0000\u0000\u0634\u062d\u0001\u0000\u0000\u0000\u0634\u062e\u0001"+
		"\u0000\u0000\u0000\u0634\u062f\u0001\u0000\u0000\u0000\u0634\u0630\u0001"+
		"\u0000\u0000\u0000\u0634\u0631\u0001\u0000\u0000\u0000\u0634\u0632\u0001"+
		"\u0000\u0000\u0000\u0635\u0638\u0001\u0000\u0000\u0000\u0636\u0634\u0001"+
		"\u0000\u0000\u0000\u0636\u0637\u0001\u0000\u0000\u0000\u0637=\u0001\u0000"+
		"\u0000\u0000\u0638\u0636\u0001\u0000\u0000\u0000\u0639\u063a\u0005\u0002"+
		"\u0000\u0000\u063a\u063f\u0003@ \u0000\u063b\u063c\u0005\u0004\u0000\u0000"+
		"\u063c\u063e\u0003@ \u0000\u063d\u063b\u0001\u0000\u0000\u0000\u063e\u0641"+
		"\u0001\u0000\u0000\u0000\u063f\u063d\u0001\u0000\u0000\u0000\u063f\u0640"+
		"\u0001\u0000\u0000\u0000\u0640\u0642\u0001\u0000\u0000\u0000\u0641\u063f"+
		"\u0001\u0000\u0000\u0000\u0642\u0643\u0005\u0003\u0000\u0000\u0643?\u0001"+
		"\u0000\u0000\u0000\u0644\u0649\u0003B!\u0000\u0645\u0647\u0005\u013a\u0000"+
		"\u0000\u0646\u0645\u0001\u0000\u0000\u0000\u0646\u0647\u0001\u0000\u0000"+
		"\u0000\u0647\u0648\u0001\u0000\u0000\u0000\u0648\u064a\u0003D\"\u0000"+
		"\u0649\u0646\u0001\u0000\u0000\u0000\u0649\u064a\u0001\u0000\u0000\u0000"+
		"\u064aA\u0001\u0000\u0000\u0000\u064b\u0650\u0003\u0154\u00aa\u0000\u064c"+
		"\u064d\u0005\u0005\u0000\u0000\u064d\u064f\u0003\u0154\u00aa\u0000\u064e"+
		"\u064c\u0001\u0000\u0000\u0000\u064f\u0652\u0001\u0000\u0000\u0000\u0650"+
		"\u064e\u0001\u0000\u0000\u0000\u0650\u0651\u0001\u0000\u0000\u0000\u0651"+
		"\u0655\u0001\u0000\u0000\u0000\u0652\u0650\u0001\u0000\u0000\u0000\u0653"+
		"\u0655\u0003\u0160\u00b0\u0000\u0654\u064b\u0001\u0000\u0000\u0000\u0654"+
		"\u0653\u0001\u0000\u0000\u0000\u0655C\u0001\u0000\u0000\u0000\u0656\u065b"+
		"\u0005\u0156\u0000\u0000\u0657\u065b\u0005\u0158\u0000\u0000\u0658\u065b"+
		"\u0003\u0110\u0088\u0000\u0659\u065b\u0003\u0160\u00b0\u0000\u065a\u0656"+
		"\u0001\u0000\u0000\u0000\u065a\u0657\u0001\u0000\u0000\u0000\u065a\u0658"+
		"\u0001\u0000\u0000\u0000\u065a\u0659\u0001\u0000\u0000\u0000\u065bE\u0001"+
		"\u0000\u0000\u0000\u065c\u065d\u0005\u0002\u0000\u0000\u065d\u0662\u0003"+
		"\u0108\u0084\u0000\u065e\u065f\u0005\u0004\u0000\u0000\u065f\u0661\u0003"+
		"\u0108\u0084\u0000\u0660\u065e\u0001\u0000\u0000\u0000\u0661\u0664\u0001"+
		"\u0000\u0000\u0000\u0662\u0660\u0001\u0000\u0000\u0000\u0662\u0663\u0001"+
		"\u0000\u0000\u0000\u0663\u0665\u0001\u0000\u0000\u0000\u0664\u0662\u0001"+
		"\u0000\u0000\u0000\u0665\u0666\u0005\u0003\u0000\u0000\u0666G\u0001\u0000"+
		"\u0000\u0000\u0667\u0668\u0005\u0002\u0000\u0000\u0668\u066d\u0003F#\u0000"+
		"\u0669\u066a\u0005\u0004\u0000\u0000\u066a\u066c\u0003F#\u0000\u066b\u0669"+
		"\u0001\u0000\u0000\u0000\u066c\u066f\u0001\u0000\u0000\u0000\u066d\u066b"+
		"\u0001\u0000\u0000\u0000\u066d\u066e\u0001\u0000\u0000\u0000\u066e\u0670"+
		"\u0001\u0000\u0000\u0000\u066f\u066d\u0001\u0000\u0000\u0000\u0670\u0671"+
		"\u0005\u0003\u0000\u0000\u0671I\u0001\u0000\u0000\u0000\u0672\u0673\u0005"+
		"\u0100\u0000\u0000\u0673\u0674\u0005\u001a\u0000\u0000\u0674\u0679\u0003"+
		"L&\u0000\u0675\u0676\u0005\u0100\u0000\u0000\u0676\u0677\u0005\"\u0000"+
		"\u0000\u0677\u0679\u0003N\'\u0000\u0678\u0672\u0001\u0000\u0000\u0000"+
		"\u0678\u0675\u0001\u0000\u0000\u0000\u0679K\u0001\u0000\u0000\u0000\u067a"+
		"\u067b\u0005\u0086\u0000\u0000\u067b\u067c\u0003\u0160\u00b0\u0000\u067c"+
		"\u067d\u0005\u00bf\u0000\u0000\u067d\u067e\u0003\u0160\u00b0\u0000\u067e"+
		"\u0681\u0001\u0000\u0000\u0000\u067f\u0681\u0003\u0154\u00aa\u0000\u0680"+
		"\u067a\u0001\u0000\u0000\u0000\u0680\u067f\u0001\u0000\u0000\u0000\u0681"+
		"M\u0001\u0000\u0000\u0000\u0682\u0686\u0003\u0160\u00b0\u0000\u0683\u0684"+
		"\u0005\u0135\u0000\u0000\u0684\u0685\u0005\u00f3\u0000\u0000\u0685\u0687"+
		"\u0003>\u001f\u0000\u0686\u0683\u0001\u0000\u0000\u0000\u0686\u0687\u0001"+
		"\u0000\u0000\u0000\u0687O\u0001\u0000\u0000\u0000\u0688\u0689\u0003\u0154"+
		"\u00aa\u0000\u0689\u068a\u0003\u0160\u00b0\u0000\u068aQ\u0001\u0000\u0000"+
		"\u0000\u068b\u068c\u0003&\u0013\u0000\u068c\u068d\u0003$\u0012\u0000\u068d"+
		"\u06c4\u0001\u0000\u0000\u0000\u068e\u0690\u0003\u0082A\u0000\u068f\u0691"+
		"\u0003V+\u0000\u0690\u068f\u0001\u0000\u0000\u0000\u0691\u0692\u0001\u0000"+
		"\u0000\u0000\u0692\u0690\u0001\u0000\u0000\u0000\u0692\u0693\u0001\u0000"+
		"\u0000\u0000\u0693\u06c4\u0001\u0000\u0000\u0000\u0694\u0695\u0005N\u0000"+
		"\u0000\u0695\u0696\u0005q\u0000\u0000\u0696\u0697\u0003\u00d6k\u0000\u0697"+
		"\u0699\u0003\u00d0h\u0000\u0698\u069a\u0003z=\u0000\u0699\u0698\u0001"+
		"\u0000\u0000\u0000\u0699\u069a\u0001\u0000\u0000\u0000\u069a\u06c4\u0001"+
		"\u0000\u0000\u0000\u069b\u069c\u0005\u0128\u0000\u0000\u069c\u069d\u0003"+
		"\u00d6k\u0000\u069d\u069e\u0003\u00d0h\u0000\u069e\u06a0\u0003h4\u0000"+
		"\u069f\u06a1\u0003z=\u0000\u06a0\u069f\u0001\u0000\u0000\u0000\u06a0\u06a1"+
		"\u0001\u0000\u0000\u0000\u06a1\u06c4\u0001\u0000\u0000\u0000\u06a2\u06a3"+
		"\u0005\u00a2\u0000\u0000\u06a3\u06a4\u0005\u008a\u0000\u0000\u06a4\u06a5"+
		"\u0003\u00d6k\u0000\u06a5\u06a6\u0003\u00d0h\u0000\u06a6\u06ac\u0005\u012b"+
		"\u0000\u0000\u06a7\u06ad\u0003\u00d6k\u0000\u06a8\u06a9\u0005\u0002\u0000"+
		"\u0000\u06a9\u06aa\u0003$\u0012\u0000\u06aa\u06ab\u0005\u0003\u0000\u0000"+
		"\u06ab\u06ad\u0001\u0000\u0000\u0000\u06ac\u06a7\u0001\u0000\u0000\u0000"+
		"\u06ac\u06a8\u0001\u0000\u0000\u0000\u06ad\u06ae\u0001\u0000\u0000\u0000"+
		"\u06ae\u06af\u0003\u00d0h\u0000\u06af\u06b0\u0005\u00b7\u0000\u0000\u06b0"+
		"\u06b4\u0003\u00fc~\u0000\u06b1\u06b3\u0003j5\u0000\u06b2\u06b1\u0001"+
		"\u0000\u0000\u0000\u06b3\u06b6\u0001\u0000\u0000\u0000\u06b4\u06b2\u0001"+
		"\u0000\u0000\u0000\u06b4\u06b5\u0001\u0000\u0000\u0000\u06b5\u06ba\u0001"+
		"\u0000\u0000\u0000\u06b6\u06b4\u0001\u0000\u0000\u0000\u06b7\u06b9\u0003"+
		"l6\u0000\u06b8\u06b7\u0001\u0000\u0000\u0000\u06b9\u06bc\u0001\u0000\u0000"+
		"\u0000\u06ba\u06b8\u0001\u0000\u0000\u0000\u06ba\u06bb\u0001\u0000\u0000"+
		"\u0000\u06bb\u06c0\u0001\u0000\u0000\u0000\u06bc\u06ba\u0001\u0000\u0000"+
		"\u0000\u06bd\u06bf\u0003n7\u0000\u06be\u06bd\u0001\u0000\u0000\u0000\u06bf"+
		"\u06c2\u0001\u0000\u0000\u0000\u06c0\u06be\u0001\u0000\u0000\u0000\u06c0"+
		"\u06c1\u0001\u0000\u0000\u0000\u06c1\u06c4\u0001\u0000\u0000\u0000\u06c2"+
		"\u06c0\u0001\u0000\u0000\u0000\u06c3\u068b\u0001\u0000\u0000\u0000\u06c3"+
		"\u068e\u0001\u0000\u0000\u0000\u06c3\u0694\u0001\u0000\u0000\u0000\u06c3"+
		"\u069b\u0001\u0000\u0000\u0000\u06c3\u06a2\u0001\u0000\u0000\u0000\u06c4"+
		"S\u0001\u0000\u0000\u0000\u06c5\u06c6\u0005\u00bc\u0000\u0000\u06c6\u06c7"+
		"\u0005\"\u0000\u0000\u06c7\u06cc\u0003\\.\u0000\u06c8\u06c9\u0005\u0004"+
		"\u0000\u0000\u06c9\u06cb\u0003\\.\u0000\u06ca\u06c8\u0001\u0000\u0000"+
		"\u0000\u06cb\u06ce\u0001\u0000\u0000\u0000\u06cc\u06ca\u0001\u0000\u0000"+
		"\u0000\u06cc\u06cd\u0001\u0000\u0000\u0000\u06cd\u06d0\u0001\u0000\u0000"+
		"\u0000\u06ce\u06cc\u0001\u0000\u0000\u0000\u06cf\u06c5\u0001\u0000\u0000"+
		"\u0000\u06cf\u06d0\u0001\u0000\u0000\u0000\u06d0\u06db\u0001\u0000\u0000"+
		"\u0000\u06d1\u06d2\u0005,\u0000\u0000\u06d2\u06d3\u0005\"\u0000\u0000"+
		"\u06d3\u06d8\u0003\u00f8|\u0000\u06d4\u06d5\u0005\u0004\u0000\u0000\u06d5"+
		"\u06d7\u0003\u00f8|\u0000\u06d6\u06d4\u0001\u0000\u0000\u0000\u06d7\u06da"+
		"\u0001\u0000\u0000\u0000\u06d8\u06d6\u0001\u0000\u0000\u0000\u06d8\u06d9"+
		"\u0001\u0000\u0000\u0000\u06d9\u06dc\u0001\u0000\u0000\u0000\u06da\u06d8"+
		"\u0001\u0000\u0000\u0000\u06db\u06d1\u0001\u0000\u0000\u0000\u06db\u06dc"+
		"\u0001\u0000\u0000\u0000\u06dc\u06e7\u0001\u0000\u0000\u0000\u06dd\u06de"+
		"\u0005V\u0000\u0000\u06de\u06df\u0005\"\u0000\u0000\u06df\u06e4\u0003"+
		"\u00f8|\u0000\u06e0\u06e1\u0005\u0004\u0000\u0000\u06e1\u06e3\u0003\u00f8"+
		"|\u0000\u06e2\u06e0\u0001\u0000\u0000\u0000\u06e3\u06e6\u0001\u0000\u0000"+
		"\u0000\u06e4\u06e2\u0001\u0000\u0000\u0000\u06e4\u06e5\u0001\u0000\u0000"+
		"\u0000\u06e5\u06e8\u0001\u0000\u0000\u0000\u06e6\u06e4\u0001\u0000\u0000"+
		"\u0000\u06e7\u06dd\u0001\u0000\u0000\u0000\u06e7\u06e8\u0001\u0000\u0000"+
		"\u0000\u06e8\u06f3\u0001\u0000\u0000\u0000\u06e9\u06ea\u0005\u00fb\u0000"+
		"\u0000\u06ea\u06eb\u0005\"\u0000\u0000\u06eb\u06f0\u0003\\.\u0000\u06ec"+
		"\u06ed\u0005\u0004\u0000\u0000\u06ed\u06ef\u0003\\.\u0000\u06ee\u06ec"+
		"\u0001\u0000\u0000\u0000\u06ef\u06f2\u0001\u0000\u0000\u0000\u06f0\u06ee"+
		"\u0001\u0000\u0000\u0000\u06f0\u06f1\u0001\u0000\u0000\u0000\u06f1\u06f4"+
		"\u0001\u0000\u0000\u0000\u06f2\u06f0\u0001\u0000\u0000\u0000\u06f3\u06e9"+
		"\u0001\u0000\u0000\u0000\u06f3\u06f4\u0001\u0000\u0000\u0000\u06f4\u06f6"+
		"\u0001\u0000\u0000\u0000\u06f5\u06f7\u0003\u0140\u00a0\u0000\u06f6\u06f5"+
		"\u0001\u0000\u0000\u0000\u06f6\u06f7\u0001\u0000\u0000\u0000\u06f7\u06fd"+
		"\u0001\u0000\u0000\u0000\u06f8\u06fb\u0005\u0096\u0000\u0000\u06f9\u06fc"+
		"\u0005\u0010\u0000\u0000\u06fa\u06fc\u0003\u00f8|\u0000\u06fb\u06f9\u0001"+
		"\u0000\u0000\u0000\u06fb\u06fa\u0001\u0000\u0000\u0000\u06fc\u06fe\u0001"+
		"\u0000\u0000\u0000\u06fd\u06f8\u0001\u0000\u0000\u0000\u06fd\u06fe\u0001"+
		"\u0000\u0000\u0000\u06fe\u0701\u0001\u0000\u0000\u0000\u06ff\u0700\u0005"+
		"\u00b6\u0000\u0000\u0700\u0702\u0003\u00f8|\u0000\u0701\u06ff\u0001\u0000"+
		"\u0000\u0000\u0701\u0702\u0001\u0000\u0000\u0000\u0702U\u0001\u0000\u0000"+
		"\u0000\u0703\u0704\u0003&\u0013\u0000\u0704\u0705\u0003`0\u0000\u0705"+
		"W\u0001\u0000\u0000\u0000\u0706\u0707\u0006,\uffff\uffff\u0000\u0707\u0708"+
		"\u0003Z-\u0000\u0708\u0720\u0001\u0000\u0000\u0000\u0709\u070a\n\u0003"+
		"\u0000\u0000\u070a\u070b\u0004,\u0001\u0000\u070b\u070d\u0007\r\u0000"+
		"\u0000\u070c\u070e\u0003\u00aeW\u0000\u070d\u070c\u0001\u0000\u0000\u0000"+
		"\u070d\u070e\u0001\u0000\u0000\u0000\u070e\u070f\u0001\u0000\u0000\u0000"+
		"\u070f\u071f\u0003X,\u0004\u0710\u0711\n\u0002\u0000\u0000\u0711\u0712"+
		"\u0004,\u0003\u0000\u0712\u0714\u0005\u0088\u0000\u0000\u0713\u0715\u0003"+
		"\u00aeW\u0000\u0714\u0713\u0001\u0000\u0000\u0000\u0714\u0715\u0001\u0000"+
		"\u0000\u0000\u0715\u0716\u0001\u0000\u0000\u0000\u0716\u071f\u0003X,\u0003"+
		"\u0717\u0718\n\u0001\u0000\u0000\u0718\u0719\u0004,\u0005\u0000\u0719"+
		"\u071b\u0007\u000e\u0000\u0000\u071a\u071c\u0003\u00aeW\u0000\u071b\u071a"+
		"\u0001\u0000\u0000\u0000\u071b\u071c\u0001\u0000\u0000\u0000\u071c\u071d"+
		"\u0001\u0000\u0000\u0000\u071d\u071f\u0003X,\u0002\u071e\u0709\u0001\u0000"+
		"\u0000\u0000\u071e\u0710\u0001\u0000\u0000\u0000\u071e\u0717\u0001\u0000"+
		"\u0000\u0000\u071f\u0722\u0001\u0000\u0000\u0000\u0720\u071e\u0001\u0000"+
		"\u0000\u0000\u0720\u0721\u0001\u0000\u0000\u0000\u0721Y\u0001\u0000\u0000"+
		"\u0000\u0722\u0720\u0001\u0000\u0000\u0000\u0723\u072d\u0003b1\u0000\u0724"+
		"\u072d\u0003^/\u0000\u0725\u0726\u0005\u0108\u0000\u0000\u0726\u072d\u0003"+
		"\u00d6k\u0000\u0727\u072d\u0003\u00ccf\u0000\u0728\u0729\u0005\u0002\u0000"+
		"\u0000\u0729\u072a\u0003$\u0012\u0000\u072a\u072b\u0005\u0003\u0000\u0000"+
		"\u072b\u072d\u0001\u0000\u0000\u0000\u072c\u0723\u0001\u0000\u0000\u0000"+
		"\u072c\u0724\u0001\u0000\u0000\u0000\u072c\u0725\u0001\u0000\u0000\u0000"+
		"\u072c\u0727\u0001\u0000\u0000\u0000\u072c\u0728\u0001\u0000\u0000\u0000"+
		"\u072d[\u0001\u0000\u0000\u0000\u072e\u0730\u0003\u00f8|\u0000\u072f\u0731"+
		"\u0007\u000f\u0000\u0000\u0730\u072f\u0001\u0000\u0000\u0000\u0730\u0731"+
		"\u0001\u0000\u0000\u0000\u0731\u0734\u0001\u0000\u0000\u0000\u0732\u0733"+
		"\u0005\u00b4\u0000\u0000\u0733\u0735\u0007\u0010\u0000\u0000\u0734\u0732"+
		"\u0001\u0000\u0000\u0000\u0734\u0735\u0001\u0000\u0000\u0000\u0735]\u0001"+
		"\u0000\u0000\u0000\u0736\u0738\u0003\u0082A\u0000\u0737\u0739\u0003`0"+
		"\u0000\u0738\u0737\u0001\u0000\u0000\u0000\u0739\u073a\u0001\u0000\u0000"+
		"\u0000\u073a\u0738\u0001\u0000\u0000\u0000\u073a\u073b\u0001\u0000\u0000"+
		"\u0000\u073b_\u0001\u0000\u0000\u0000\u073c\u073e\u0003d2\u0000\u073d"+
		"\u073f\u0003z=\u0000\u073e\u073d\u0001\u0000\u0000\u0000\u073e\u073f\u0001"+
		"\u0000\u0000\u0000\u073f\u0740\u0001\u0000\u0000\u0000\u0740\u0741\u0003"+
		"T*\u0000\u0741\u0758\u0001\u0000\u0000\u0000\u0742\u0746\u0003f3\u0000"+
		"\u0743\u0745\u0003\u00acV\u0000\u0744\u0743\u0001\u0000\u0000\u0000\u0745"+
		"\u0748\u0001\u0000\u0000\u0000\u0746\u0744\u0001\u0000\u0000\u0000\u0746"+
		"\u0747\u0001\u0000\u0000\u0000\u0747\u074a\u0001\u0000\u0000\u0000\u0748"+
		"\u0746\u0001\u0000\u0000\u0000\u0749\u074b\u0003z=\u0000\u074a\u0749\u0001"+
		"\u0000\u0000\u0000\u074a\u074b\u0001\u0000\u0000\u0000\u074b\u074d\u0001"+
		"\u0000\u0000\u0000\u074c\u074e\u0003\u0086C\u0000\u074d\u074c\u0001\u0000"+
		"\u0000\u0000\u074d\u074e\u0001\u0000\u0000\u0000\u074e\u0750\u0001\u0000"+
		"\u0000\u0000\u074f\u0751\u0003|>\u0000\u0750\u074f\u0001\u0000\u0000\u0000"+
		"\u0750\u0751\u0001\u0000\u0000\u0000\u0751\u0753\u0001\u0000\u0000\u0000"+
		"\u0752\u0754\u0003\u0140\u00a0\u0000\u0753\u0752\u0001\u0000\u0000\u0000"+
		"\u0753\u0754\u0001\u0000\u0000\u0000\u0754\u0755\u0001\u0000\u0000\u0000"+
		"\u0755\u0756\u0003T*\u0000\u0756\u0758\u0001\u0000\u0000\u0000\u0757\u073c"+
		"\u0001\u0000\u0000\u0000\u0757\u0742\u0001\u0000\u0000\u0000\u0758a\u0001"+
		"\u0000\u0000\u0000\u0759\u075b\u0003d2\u0000\u075a\u075c\u0003\u0082A"+
		"\u0000\u075b\u075a\u0001\u0000\u0000\u0000\u075b\u075c\u0001\u0000\u0000"+
		"\u0000\u075c\u0760\u0001\u0000\u0000\u0000\u075d\u075f\u0003\u00acV\u0000"+
		"\u075e\u075d\u0001\u0000\u0000\u0000\u075f\u0762\u0001\u0000\u0000\u0000"+
		"\u0760\u075e\u0001\u0000\u0000\u0000\u0760\u0761\u0001\u0000\u0000\u0000"+
		"\u0761\u0764\u0001\u0000\u0000\u0000\u0762\u0760\u0001\u0000\u0000\u0000"+
		"\u0763\u0765\u0003z=\u0000\u0764\u0763\u0001\u0000\u0000\u0000\u0764\u0765"+
		"\u0001\u0000\u0000\u0000\u0765\u0767\u0001\u0000\u0000\u0000\u0766\u0768"+
		"\u0003\u0086C\u0000\u0767\u0766\u0001\u0000\u0000\u0000\u0767\u0768\u0001"+
		"\u0000\u0000\u0000\u0768\u076a\u0001\u0000\u0000\u0000\u0769\u076b\u0003"+
		"|>\u0000\u076a\u0769\u0001\u0000\u0000\u0000\u076a\u076b\u0001\u0000\u0000"+
		"\u0000\u076b\u076d\u0001\u0000\u0000\u0000\u076c\u076e\u0003\u0140\u00a0"+
		"\u0000\u076d\u076c\u0001\u0000\u0000\u0000\u076d\u076e\u0001\u0000\u0000"+
		"\u0000\u076e\u0786\u0001\u0000\u0000\u0000\u076f\u0771\u0003f3\u0000\u0770"+
		"\u0772\u0003\u0082A\u0000\u0771\u0770\u0001\u0000\u0000\u0000\u0771\u0772"+
		"\u0001\u0000\u0000\u0000\u0772\u0776\u0001\u0000\u0000\u0000\u0773\u0775"+
		"\u0003\u00acV\u0000\u0774\u0773\u0001\u0000\u0000\u0000\u0775\u0778\u0001"+
		"\u0000\u0000\u0000\u0776\u0774\u0001\u0000\u0000\u0000\u0776\u0777\u0001"+
		"\u0000\u0000\u0000\u0777\u077a\u0001\u0000\u0000\u0000\u0778\u0776\u0001"+
		"\u0000\u0000\u0000\u0779\u077b\u0003z=\u0000\u077a\u0779\u0001\u0000\u0000"+
		"\u0000\u077a\u077b\u0001\u0000\u0000\u0000\u077b\u077d\u0001\u0000\u0000"+
		"\u0000\u077c\u077e\u0003\u0086C\u0000\u077d\u077c\u0001\u0000\u0000\u0000"+
		"\u077d\u077e\u0001\u0000\u0000\u0000\u077e\u0780\u0001\u0000\u0000\u0000"+
		"\u077f\u0781\u0003|>\u0000\u0780\u077f\u0001\u0000\u0000\u0000\u0780\u0781"+
		"\u0001\u0000\u0000\u0000\u0781\u0783\u0001\u0000\u0000\u0000\u0782\u0784"+
		"\u0003\u0140\u00a0\u0000\u0783\u0782\u0001\u0000\u0000\u0000\u0783\u0784"+
		"\u0001\u0000\u0000\u0000\u0784\u0786\u0001\u0000\u0000\u0000\u0785\u0759"+
		"\u0001\u0000\u0000\u0000\u0785\u076f\u0001\u0000\u0000\u0000\u0786c\u0001"+
		"\u0000\u0000\u0000\u0787\u0788\u0005\u00ef\u0000\u0000\u0788\u0789\u0005"+
		"\u0119\u0000\u0000\u0789\u078b\u0005\u0002\u0000\u0000\u078a\u078c\u0003"+
		"\u00aeW\u0000\u078b\u078a\u0001\u0000\u0000\u0000\u078b\u078c\u0001\u0000"+
		"\u0000\u0000\u078c\u078d\u0001\u0000\u0000\u0000\u078d\u078e\u0003\u00fa"+
		"}\u0000\u078e\u078f\u0005\u0003\u0000\u0000\u078f\u079b\u0001\u0000\u0000"+
		"\u0000\u0790\u0792\u0005\u00a0\u0000\u0000\u0791\u0793\u0003\u00aeW\u0000"+
		"\u0792\u0791\u0001\u0000\u0000\u0000\u0792\u0793\u0001\u0000\u0000\u0000"+
		"\u0793\u0794\u0001\u0000\u0000\u0000\u0794\u079b\u0003\u00fa}\u0000\u0795"+
		"\u0797\u0005\u00d8\u0000\u0000\u0796\u0798\u0003\u00aeW\u0000\u0797\u0796"+
		"\u0001\u0000\u0000\u0000\u0797\u0798\u0001\u0000\u0000\u0000\u0798\u0799"+
		"\u0001\u0000\u0000\u0000\u0799\u079b\u0003\u00fa}\u0000\u079a\u0787\u0001"+
		"\u0000\u0000\u0000\u079a\u0790\u0001\u0000\u0000\u0000\u079a\u0795\u0001"+
		"\u0000\u0000\u0000\u079b\u079d\u0001\u0000\u0000\u0000\u079c\u079e\u0003"+
		"\u00d2i\u0000\u079d\u079c\u0001\u0000\u0000\u0000\u079d\u079e\u0001\u0000"+
		"\u0000\u0000\u079e\u07a1\u0001\u0000\u0000\u0000\u079f\u07a0\u0005\u00d6"+
		"\u0000\u0000\u07a0\u07a2\u0003\u0160\u00b0\u0000\u07a1\u079f\u0001\u0000"+
		"\u0000\u0000\u07a1\u07a2\u0001\u0000\u0000\u0000\u07a2\u07a3\u0001\u0000"+
		"\u0000\u0000\u07a3\u07a4\u0005\u012b\u0000\u0000\u07a4\u07b1\u0003\u0160"+
		"\u00b0\u0000\u07a5\u07af\u0005\u001a\u0000\u0000\u07a6\u07b0\u0003\u00c0"+
		"`\u0000\u07a7\u07b0\u0003\u012e\u0097\u0000\u07a8\u07ab\u0005\u0002\u0000"+
		"\u0000\u07a9\u07ac\u0003\u00c0`\u0000\u07aa\u07ac\u0003\u012e\u0097\u0000"+
		"\u07ab\u07a9\u0001\u0000\u0000\u0000\u07ab\u07aa\u0001\u0000\u0000\u0000"+
		"\u07ac\u07ad\u0001\u0000\u0000\u0000\u07ad\u07ae\u0005\u0003\u0000\u0000"+
		"\u07ae\u07b0\u0001\u0000\u0000\u0000\u07af\u07a6\u0001\u0000\u0000\u0000"+
		"\u07af\u07a7\u0001\u0000\u0000\u0000\u07af\u07a8\u0001\u0000\u0000\u0000"+
		"\u07b0\u07b2\u0001\u0000\u0000\u0000\u07b1\u07a5\u0001\u0000\u0000\u0000"+
		"\u07b1\u07b2\u0001\u0000\u0000\u0000\u07b2\u07b4\u0001\u0000\u0000\u0000"+
		"\u07b3\u07b5\u0003\u00d2i\u0000\u07b4\u07b3\u0001\u0000\u0000\u0000\u07b4"+
		"\u07b5\u0001\u0000\u0000\u0000\u07b5\u07b8\u0001\u0000\u0000\u0000\u07b6"+
		"\u07b7\u0005\u00d5\u0000\u0000\u07b7\u07b9\u0003\u0160\u00b0\u0000\u07b8"+
		"\u07b6\u0001\u0000\u0000\u0000\u07b8\u07b9\u0001\u0000\u0000\u0000\u07b9"+
		"e\u0001\u0000\u0000\u0000\u07ba\u07be\u0005\u00ef\u0000\u0000\u07bb\u07bd"+
		"\u0003~?\u0000\u07bc\u07bb\u0001\u0000\u0000\u0000\u07bd\u07c0\u0001\u0000"+
		"\u0000\u0000\u07be\u07bc\u0001\u0000\u0000\u0000\u07be\u07bf\u0001\u0000"+
		"\u0000\u0000\u07bf\u07c2\u0001\u0000\u0000\u0000\u07c0\u07be\u0001\u0000"+
		"\u0000\u0000\u07c1\u07c3\u0003\u00aeW\u0000\u07c2\u07c1\u0001\u0000\u0000"+
		"\u0000\u07c2\u07c3\u0001\u0000\u0000\u0000\u07c3\u07c4\u0001\u0000\u0000"+
		"\u0000\u07c4\u07c5\u0003\u00e2q\u0000\u07c5g\u0001\u0000\u0000\u0000\u07c6"+
		"\u07c7\u0005\u00f5\u0000\u0000\u07c7\u07c8\u0003v;\u0000\u07c8i\u0001"+
		"\u0000\u0000\u0000\u07c9\u07ca\u0005\u0132\u0000\u0000\u07ca\u07cd\u0005"+
		"\u00a1\u0000\u0000\u07cb\u07cc\u0005\u0014\u0000\u0000\u07cc\u07ce\u0003";
	private static final String _serializedATNSegment1 =
		"\u00fc~\u0000\u07cd\u07cb\u0001\u0000\u0000\u0000\u07cd\u07ce\u0001\u0000"+
		"\u0000\u0000\u07ce\u07cf\u0001\u0000\u0000\u0000\u07cf\u07d0\u0005\u010f"+
		"\u0000\u0000\u07d0\u07d1\u0003p8\u0000\u07d1k\u0001\u0000\u0000\u0000"+
		"\u07d2\u07d3\u0005\u0132\u0000\u0000\u07d3\u07d4\u0005\u00b2\u0000\u0000"+
		"\u07d4\u07d7\u0005\u00a1\u0000\u0000\u07d5\u07d6\u0005\"\u0000\u0000\u07d6"+
		"\u07d8\u0005\u010b\u0000\u0000\u07d7\u07d5\u0001\u0000\u0000\u0000\u07d7"+
		"\u07d8\u0001\u0000\u0000\u0000\u07d8\u07db\u0001\u0000\u0000\u0000\u07d9"+
		"\u07da\u0005\u0014\u0000\u0000\u07da\u07dc\u0003\u00fc~\u0000\u07db\u07d9"+
		"\u0001\u0000\u0000\u0000\u07db\u07dc\u0001\u0000\u0000\u0000\u07dc\u07dd"+
		"\u0001\u0000\u0000\u0000\u07dd\u07de\u0005\u010f\u0000\u0000\u07de\u07df"+
		"\u0003r9\u0000\u07dfm\u0001\u0000\u0000\u0000\u07e0\u07e1\u0005\u0132"+
		"\u0000\u0000\u07e1\u07e2\u0005\u00b2\u0000\u0000\u07e2\u07e3\u0005\u00a1"+
		"\u0000\u0000\u07e3\u07e4\u0005\"\u0000\u0000\u07e4\u07e7\u0005\u00fd\u0000"+
		"\u0000\u07e5\u07e6\u0005\u0014\u0000\u0000\u07e6\u07e8\u0003\u00fc~\u0000"+
		"\u07e7\u07e5\u0001\u0000\u0000\u0000\u07e7\u07e8\u0001\u0000\u0000\u0000"+
		"\u07e8\u07e9\u0001\u0000\u0000\u0000\u07e9\u07ea\u0005\u010f\u0000\u0000"+
		"\u07ea\u07eb\u0003t:\u0000\u07ebo\u0001\u0000\u0000\u0000\u07ec\u07f4"+
		"\u0005N\u0000\u0000\u07ed\u07ee\u0005\u0128\u0000\u0000\u07ee\u07ef\u0005"+
		"\u00f5\u0000\u0000\u07ef\u07f4\u0005\u0144\u0000\u0000\u07f0\u07f1\u0005"+
		"\u0128\u0000\u0000\u07f1\u07f2\u0005\u00f5\u0000\u0000\u07f2\u07f4\u0003"+
		"v;\u0000\u07f3\u07ec\u0001\u0000\u0000\u0000\u07f3\u07ed\u0001\u0000\u0000"+
		"\u0000\u07f3\u07f0\u0001\u0000\u0000\u0000\u07f4q\u0001\u0000\u0000\u0000"+
		"\u07f5\u07f6\u0005\u0087\u0000\u0000\u07f6\u0808\u0005\u0144\u0000\u0000"+
		"\u07f7\u07f8\u0005\u0087\u0000\u0000\u07f8\u07f9\u0005\u0002\u0000\u0000"+
		"\u07f9\u07fa\u0003\u00d4j\u0000\u07fa\u07fb\u0005\u0003\u0000\u0000\u07fb"+
		"\u07fc\u0005\u012c\u0000\u0000\u07fc\u07fd\u0005\u0002\u0000\u0000\u07fd"+
		"\u0802\u0003\u00f8|\u0000\u07fe\u07ff\u0005\u0004\u0000\u0000\u07ff\u0801"+
		"\u0003\u00f8|\u0000\u0800\u07fe\u0001\u0000\u0000\u0000\u0801\u0804\u0001"+
		"\u0000\u0000\u0000\u0802\u0800\u0001\u0000\u0000\u0000\u0802\u0803\u0001"+
		"\u0000\u0000\u0000\u0803\u0805\u0001\u0000\u0000\u0000\u0804\u0802\u0001"+
		"\u0000\u0000\u0000\u0805\u0806\u0005\u0003\u0000\u0000\u0806\u0808\u0001"+
		"\u0000\u0000\u0000\u0807\u07f5\u0001\u0000\u0000\u0000\u0807\u07f7\u0001"+
		"\u0000\u0000\u0000\u0808s\u0001\u0000\u0000\u0000\u0809\u080e\u0005N\u0000"+
		"\u0000\u080a\u080b\u0005\u0128\u0000\u0000\u080b\u080c\u0005\u00f5\u0000"+
		"\u0000\u080c\u080e\u0003v;\u0000\u080d\u0809\u0001\u0000\u0000\u0000\u080d"+
		"\u080a\u0001\u0000\u0000\u0000\u080eu\u0001\u0000\u0000\u0000\u080f\u0814"+
		"\u0003x<\u0000\u0810\u0811\u0005\u0004\u0000\u0000\u0811\u0813\u0003x"+
		"<\u0000\u0812\u0810\u0001\u0000\u0000\u0000\u0813\u0816\u0001\u0000\u0000"+
		"\u0000\u0814\u0812\u0001\u0000\u0000\u0000\u0814\u0815\u0001\u0000\u0000"+
		"\u0000\u0815w\u0001\u0000\u0000\u0000\u0816\u0814\u0001\u0000\u0000\u0000"+
		"\u0817\u0818\u0003\u00d6k\u0000\u0818\u0819\u0005\u013a\u0000\u0000\u0819"+
		"\u081a\u0003\u00f8|\u0000\u081ay\u0001\u0000\u0000\u0000\u081b\u081c\u0005"+
		"\u0133\u0000\u0000\u081c\u081d\u0003\u00fc~\u0000\u081d{\u0001\u0000\u0000"+
		"\u0000\u081e\u081f\u0005z\u0000\u0000\u081f\u0820\u0003\u00fc~\u0000\u0820"+
		"}\u0001\u0000\u0000\u0000\u0821\u0822\u0005\u014f\u0000\u0000\u0822\u0829"+
		"\u0003\u0080@\u0000\u0823\u0825\u0005\u0004\u0000\u0000\u0824\u0823\u0001"+
		"\u0000\u0000\u0000\u0824\u0825\u0001\u0000\u0000\u0000\u0825\u0826\u0001"+
		"\u0000\u0000\u0000\u0826\u0828\u0003\u0080@\u0000\u0827\u0824\u0001\u0000"+
		"\u0000\u0000\u0828\u082b\u0001\u0000\u0000\u0000\u0829\u0827\u0001\u0000"+
		"\u0000\u0000\u0829\u082a\u0001\u0000\u0000\u0000\u082a\u082c\u0001\u0000"+
		"\u0000\u0000\u082b\u0829\u0001\u0000\u0000\u0000\u082c\u082d\u0005\u0150"+
		"\u0000\u0000\u082d\u007f\u0001\u0000\u0000\u0000\u082e\u083c\u0003\u0154"+
		"\u00aa\u0000\u082f\u0830\u0003\u0154\u00aa\u0000\u0830\u0831\u0005\u0002"+
		"\u0000\u0000\u0831\u0836\u0003\u0104\u0082\u0000\u0832\u0833\u0005\u0004"+
		"\u0000\u0000\u0833\u0835\u0003\u0104\u0082\u0000\u0834\u0832\u0001\u0000"+
		"\u0000\u0000\u0835\u0838\u0001\u0000\u0000\u0000\u0836\u0834\u0001\u0000"+
		"\u0000\u0000\u0836\u0837\u0001\u0000\u0000\u0000\u0837\u0839\u0001\u0000"+
		"\u0000\u0000\u0838\u0836\u0001\u0000\u0000\u0000\u0839\u083a\u0005\u0003"+
		"\u0000\u0000\u083a\u083c\u0001\u0000\u0000\u0000\u083b\u082e\u0001\u0000"+
		"\u0000\u0000\u083b\u082f\u0001\u0000\u0000\u0000\u083c\u0081\u0001\u0000"+
		"\u0000\u0000\u083d\u083e\u0005q\u0000\u0000\u083e\u0843\u0003\u00b0X\u0000"+
		"\u083f\u0840\u0005\u0004\u0000\u0000\u0840\u0842\u0003\u00b0X\u0000\u0841"+
		"\u083f\u0001\u0000\u0000\u0000\u0842\u0845\u0001\u0000\u0000\u0000\u0843"+
		"\u0841\u0001\u0000\u0000\u0000\u0843\u0844\u0001\u0000\u0000\u0000\u0844"+
		"\u0849\u0001\u0000\u0000\u0000\u0845\u0843\u0001\u0000\u0000\u0000\u0846"+
		"\u0848\u0003\u00acV\u0000\u0847\u0846\u0001\u0000\u0000\u0000\u0848\u084b"+
		"\u0001\u0000\u0000\u0000\u0849\u0847\u0001\u0000\u0000\u0000\u0849\u084a"+
		"\u0001\u0000\u0000\u0000\u084a\u084d\u0001\u0000\u0000\u0000\u084b\u0849"+
		"\u0001\u0000\u0000\u0000\u084c\u084e\u0003\u0090H\u0000\u084d\u084c\u0001"+
		"\u0000\u0000\u0000\u084d\u084e\u0001\u0000\u0000\u0000\u084e\u0850\u0001"+
		"\u0000\u0000\u0000\u084f\u0851\u0003\u0096K\u0000\u0850\u084f\u0001\u0000"+
		"\u0000\u0000\u0850\u0851\u0001\u0000\u0000\u0000\u0851\u0083\u0001\u0000"+
		"\u0000\u0000\u0852\u0854\u0005m\u0000\u0000\u0853\u0852\u0001\u0000\u0000"+
		"\u0000\u0853\u0854\u0001\u0000\u0000\u0000\u0854\u0855\u0001\u0000\u0000"+
		"\u0000\u0855\u0856\u0007\u0011\u0000\u0000\u0856\u0857\u0005\u001a\u0000"+
		"\u0000\u0857\u0858\u0005\u00b5\u0000\u0000\u0858\u0861\u0003\u0164\u00b2"+
		"\u0000\u0859\u085b\u0005m\u0000\u0000\u085a\u0859\u0001\u0000\u0000\u0000"+
		"\u085a\u085b\u0001\u0000\u0000\u0000\u085b\u085c\u0001\u0000\u0000\u0000"+
		"\u085c\u085d\u0007\u0012\u0000\u0000\u085d\u085e\u0005\u001a\u0000\u0000"+
		"\u085e\u085f\u0005\u00b5\u0000\u0000\u085f\u0861\u0003\u0100\u0080\u0000"+
		"\u0860\u0853\u0001\u0000\u0000\u0000\u0860\u085a\u0001\u0000\u0000\u0000"+
		"\u0861\u0085\u0001\u0000\u0000\u0000\u0862\u0863\u0005x\u0000\u0000\u0863"+
		"\u0864\u0005\"\u0000\u0000\u0864\u0869\u0003\u0088D\u0000\u0865\u0866"+
		"\u0005\u0004\u0000\u0000\u0866\u0868\u0003\u0088D\u0000\u0867\u0865\u0001"+
		"\u0000\u0000\u0000\u0868\u086b\u0001\u0000\u0000\u0000\u0869\u0867\u0001"+
		"\u0000\u0000\u0000\u0869\u086a\u0001\u0000\u0000\u0000\u086a\u088a\u0001"+
		"\u0000\u0000\u0000\u086b\u0869\u0001\u0000\u0000\u0000\u086c\u086d\u0005"+
		"x\u0000\u0000\u086d\u086e\u0005\"\u0000\u0000\u086e\u0873\u0003\u00f8"+
		"|\u0000\u086f\u0870\u0005\u0004\u0000\u0000\u0870\u0872\u0003\u00f8|\u0000"+
		"\u0871\u086f\u0001\u0000\u0000\u0000\u0872\u0875\u0001\u0000\u0000\u0000"+
		"\u0873\u0871\u0001\u0000\u0000\u0000\u0873\u0874\u0001\u0000\u0000\u0000"+
		"\u0874\u0887\u0001\u0000\u0000\u0000\u0875\u0873\u0001\u0000\u0000\u0000"+
		"\u0876\u0877\u0005\u0135\u0000\u0000\u0877\u0888\u0005\u00e8\u0000\u0000"+
		"\u0878\u0879\u0005\u0135\u0000\u0000\u0879\u0888\u0005=\u0000\u0000\u087a"+
		"\u087b\u0005y\u0000\u0000\u087b\u087c\u0005\u00f7\u0000\u0000\u087c\u087d"+
		"\u0005\u0002\u0000\u0000\u087d\u0882\u0003\u008eG\u0000\u087e\u087f\u0005"+
		"\u0004\u0000\u0000\u087f\u0881\u0003\u008eG\u0000\u0880\u087e\u0001\u0000"+
		"\u0000\u0000\u0881\u0884\u0001\u0000\u0000\u0000\u0882\u0880\u0001\u0000"+
		"\u0000\u0000\u0882\u0883\u0001\u0000\u0000\u0000\u0883\u0885\u0001\u0000"+
		"\u0000\u0000\u0884\u0882\u0001\u0000\u0000\u0000\u0885\u0886\u0005\u0003"+
		"\u0000\u0000\u0886\u0888\u0001\u0000\u0000\u0000\u0887\u0876\u0001\u0000"+
		"\u0000\u0000\u0887\u0878\u0001\u0000\u0000\u0000\u0887\u087a\u0001\u0000"+
		"\u0000\u0000\u0887\u0888\u0001\u0000\u0000\u0000\u0888\u088a\u0001\u0000"+
		"\u0000\u0000\u0889\u0862\u0001\u0000\u0000\u0000\u0889\u086c\u0001\u0000"+
		"\u0000\u0000\u088a\u0087\u0001\u0000\u0000\u0000\u088b\u088e\u0003\u008a"+
		"E\u0000\u088c\u088e\u0003\u00f8|\u0000\u088d\u088b\u0001\u0000\u0000\u0000"+
		"\u088d\u088c\u0001\u0000\u0000\u0000\u088e\u0089\u0001\u0000\u0000\u0000"+
		"\u088f\u0890\u0007\u0013\u0000\u0000\u0890\u0891\u0005\u0002\u0000\u0000"+
		"\u0891\u0896\u0003\u008eG\u0000\u0892\u0893\u0005\u0004\u0000\u0000\u0893"+
		"\u0895\u0003\u008eG\u0000\u0894\u0892\u0001\u0000\u0000\u0000\u0895\u0898"+
		"\u0001\u0000\u0000\u0000\u0896\u0894\u0001\u0000\u0000\u0000\u0896\u0897"+
		"\u0001\u0000\u0000\u0000\u0897\u0899\u0001\u0000\u0000\u0000\u0898\u0896"+
		"\u0001\u0000\u0000\u0000\u0899\u089a\u0005\u0003\u0000\u0000\u089a\u08a9"+
		"\u0001\u0000\u0000\u0000\u089b\u089c\u0005y\u0000\u0000\u089c\u089d\u0005"+
		"\u00f7\u0000\u0000\u089d\u089e\u0005\u0002\u0000\u0000\u089e\u08a3\u0003"+
		"\u008cF\u0000\u089f\u08a0\u0005\u0004\u0000\u0000\u08a0\u08a2\u0003\u008c"+
		"F\u0000\u08a1\u089f\u0001\u0000\u0000\u0000\u08a2\u08a5\u0001\u0000\u0000"+
		"\u0000\u08a3\u08a1\u0001\u0000\u0000\u0000\u08a3\u08a4\u0001\u0000\u0000"+
		"\u0000\u08a4\u08a6\u0001\u0000\u0000\u0000\u08a5\u08a3\u0001\u0000\u0000"+
		"\u0000\u08a6\u08a7\u0005\u0003\u0000\u0000\u08a7\u08a9\u0001\u0000\u0000"+
		"\u0000\u08a8\u088f\u0001\u0000\u0000\u0000\u08a8\u089b\u0001\u0000\u0000"+
		"\u0000\u08a9\u008b\u0001\u0000\u0000\u0000\u08aa\u08ad\u0003\u008aE\u0000"+
		"\u08ab\u08ad\u0003\u008eG\u0000\u08ac\u08aa\u0001\u0000\u0000\u0000\u08ac"+
		"\u08ab\u0001\u0000\u0000\u0000\u08ad\u008d\u0001\u0000\u0000\u0000\u08ae"+
		"\u08b7\u0005\u0002\u0000\u0000\u08af\u08b4\u0003\u00f8|\u0000\u08b0\u08b1"+
		"\u0005\u0004\u0000\u0000\u08b1\u08b3\u0003\u00f8|\u0000\u08b2\u08b0\u0001"+
		"\u0000\u0000\u0000\u08b3\u08b6\u0001\u0000\u0000\u0000\u08b4\u08b2\u0001"+
		"\u0000\u0000\u0000\u08b4\u08b5\u0001\u0000\u0000\u0000\u08b5\u08b8\u0001"+
		"\u0000\u0000\u0000\u08b6\u08b4\u0001\u0000\u0000\u0000\u08b7\u08af\u0001"+
		"\u0000\u0000\u0000\u08b7\u08b8\u0001\u0000\u0000\u0000\u08b8\u08b9\u0001"+
		"\u0000\u0000\u0000\u08b9\u08bc\u0005\u0003\u0000\u0000\u08ba\u08bc\u0003"+
		"\u00f8|\u0000\u08bb\u08ae\u0001\u0000\u0000\u0000\u08bb\u08ba\u0001\u0000"+
		"\u0000\u0000\u08bc\u008f\u0001\u0000\u0000\u0000\u08bd\u08be\u0005\u00ca"+
		"\u0000\u0000\u08be\u08bf\u0005\u0002\u0000\u0000\u08bf\u08c0\u0003\u00e2"+
		"q\u0000\u08c0\u08c1\u0005m\u0000\u0000\u08c1\u08c2\u0003\u0092I\u0000"+
		"\u08c2\u08c3\u0005\u0080\u0000\u0000\u08c3\u08c4\u0005\u0002\u0000\u0000"+
		"\u08c4\u08c9\u0003\u0094J\u0000\u08c5\u08c6\u0005\u0004\u0000\u0000\u08c6"+
		"\u08c8\u0003\u0094J\u0000\u08c7\u08c5\u0001\u0000\u0000\u0000\u08c8\u08cb"+
		"\u0001\u0000\u0000\u0000\u08c9\u08c7\u0001\u0000\u0000\u0000\u08c9\u08ca"+
		"\u0001\u0000\u0000\u0000\u08ca\u08cc\u0001\u0000\u0000\u0000\u08cb\u08c9"+
		"\u0001\u0000\u0000\u0000\u08cc\u08cd\u0005\u0003\u0000\u0000\u08cd\u08ce"+
		"\u0005\u0003\u0000\u0000\u08ce\u0091\u0001\u0000\u0000\u0000\u08cf\u08dc"+
		"\u0003\u0154\u00aa\u0000\u08d0\u08d1\u0005\u0002\u0000\u0000\u08d1\u08d6"+
		"\u0003\u0154\u00aa\u0000\u08d2\u08d3\u0005\u0004\u0000\u0000\u08d3\u08d5"+
		"\u0003\u0154\u00aa\u0000\u08d4\u08d2\u0001\u0000\u0000\u0000\u08d5\u08d8"+
		"\u0001\u0000\u0000\u0000\u08d6\u08d4\u0001\u0000\u0000\u0000\u08d6\u08d7"+
		"\u0001\u0000\u0000\u0000\u08d7\u08d9\u0001\u0000\u0000\u0000\u08d8\u08d6"+
		"\u0001\u0000\u0000\u0000\u08d9\u08da\u0005\u0003\u0000\u0000\u08da\u08dc"+
		"\u0001\u0000\u0000\u0000\u08db\u08cf\u0001\u0000\u0000\u0000\u08db\u08d0"+
		"\u0001\u0000\u0000\u0000\u08dc\u0093\u0001\u0000\u0000\u0000\u08dd\u08e2"+
		"\u0003\u00f8|\u0000\u08de\u08e0\u0005\u001a\u0000\u0000\u08df\u08de\u0001"+
		"\u0000\u0000\u0000\u08df\u08e0\u0001\u0000\u0000\u0000\u08e0\u08e1\u0001"+
		"\u0000\u0000\u0000\u08e1\u08e3\u0003\u0154\u00aa\u0000\u08e2\u08df\u0001"+
		"\u0000\u0000\u0000\u08e2\u08e3\u0001\u0000\u0000\u0000\u08e3\u0095\u0001"+
		"\u0000\u0000\u0000\u08e4\u08e6\u0005\u0126\u0000\u0000\u08e5\u08e7\u0003"+
		"\u0098L\u0000\u08e6\u08e5\u0001\u0000\u0000\u0000\u08e6\u08e7\u0001\u0000"+
		"\u0000\u0000\u08e7\u08e8\u0001\u0000\u0000\u0000\u08e8\u08e9\u0005\u0002"+
		"\u0000\u0000\u08e9\u08ea\u0003\u009aM\u0000\u08ea\u08ef\u0005\u0003\u0000"+
		"\u0000\u08eb\u08ed\u0005\u001a\u0000\u0000\u08ec\u08eb\u0001\u0000\u0000"+
		"\u0000\u08ec\u08ed\u0001\u0000\u0000\u0000\u08ed\u08ee\u0001\u0000\u0000"+
		"\u0000\u08ee\u08f0\u0003\u0154\u00aa\u0000\u08ef\u08ec\u0001\u0000\u0000"+
		"\u0000\u08ef\u08f0\u0001\u0000\u0000\u0000\u08f0\u0097\u0001\u0000\u0000"+
		"\u0000\u08f1\u08f2\u0007\u0014\u0000\u0000\u08f2\u08f3\u0005\u00b4\u0000"+
		"\u0000\u08f3\u0099\u0001\u0000\u0000\u0000\u08f4\u08f7\u0003\u009cN\u0000"+
		"\u08f5\u08f7\u0003\u009eO\u0000\u08f6\u08f4\u0001\u0000\u0000\u0000\u08f6"+
		"\u08f5\u0001\u0000\u0000\u0000\u08f7\u009b\u0001\u0000\u0000\u0000\u08f8"+
		"\u08f9\u0003\u00a2Q\u0000\u08f9\u08fa\u0005m\u0000\u0000\u08fa\u08fb\u0003"+
		"\u00a4R\u0000\u08fb\u08fc\u0005\u0080\u0000\u0000\u08fc\u08fd\u0005\u0002"+
		"\u0000\u0000\u08fd\u0902\u0003\u00a6S\u0000\u08fe\u08ff\u0005\u0004\u0000"+
		"\u0000\u08ff\u0901\u0003\u00a6S\u0000\u0900\u08fe\u0001\u0000\u0000\u0000"+
		"\u0901\u0904\u0001\u0000\u0000\u0000\u0902\u0900\u0001\u0000\u0000\u0000"+
		"\u0902\u0903\u0001\u0000\u0000\u0000\u0903\u0905\u0001\u0000\u0000\u0000"+
		"\u0904\u0902\u0001\u0000\u0000\u0000\u0905\u0906\u0005\u0003\u0000\u0000"+
		"\u0906\u009d\u0001\u0000\u0000\u0000\u0907\u0908\u0005\u0002\u0000\u0000"+
		"\u0908\u090d\u0003\u00a2Q\u0000\u0909\u090a\u0005\u0004\u0000\u0000\u090a"+
		"\u090c\u0003\u00a2Q\u0000\u090b\u0909\u0001\u0000\u0000\u0000\u090c\u090f"+
		"\u0001\u0000\u0000\u0000\u090d\u090b\u0001\u0000\u0000\u0000\u090d\u090e"+
		"\u0001\u0000\u0000\u0000\u090e\u0910\u0001\u0000\u0000\u0000\u090f\u090d"+
		"\u0001\u0000\u0000\u0000\u0910\u0911\u0005\u0003\u0000\u0000\u0911\u0912"+
		"\u0005m\u0000\u0000\u0912\u0913\u0003\u00a4R\u0000\u0913\u0914\u0005\u0080"+
		"\u0000\u0000\u0914\u0915\u0005\u0002\u0000\u0000\u0915\u091a\u0003\u00a0"+
		"P\u0000\u0916\u0917\u0005\u0004\u0000\u0000\u0917\u0919\u0003\u00a0P\u0000"+
		"\u0918\u0916\u0001\u0000\u0000\u0000\u0919\u091c\u0001\u0000\u0000\u0000"+
		"\u091a\u0918\u0001\u0000\u0000\u0000\u091a\u091b\u0001\u0000\u0000\u0000"+
		"\u091b\u091d\u0001\u0000\u0000\u0000\u091c\u091a\u0001\u0000\u0000\u0000"+
		"\u091d\u091e\u0005\u0003\u0000\u0000\u091e\u009f\u0001\u0000\u0000\u0000"+
		"\u091f\u0920\u0005\u0002\u0000\u0000\u0920\u0925\u0003\u00a8T\u0000\u0921"+
		"\u0922\u0005\u0004\u0000\u0000\u0922\u0924\u0003\u00a8T\u0000\u0923\u0921"+
		"\u0001\u0000\u0000\u0000\u0924\u0927\u0001\u0000\u0000\u0000\u0925\u0923"+
		"\u0001\u0000\u0000\u0000\u0925\u0926\u0001\u0000\u0000\u0000\u0926\u0928"+
		"\u0001\u0000\u0000\u0000\u0927\u0925\u0001\u0000\u0000\u0000\u0928\u092a"+
		"\u0005\u0003\u0000\u0000\u0929\u092b\u0003\u00aaU\u0000\u092a\u0929\u0001"+
		"\u0000\u0000\u0000\u092a\u092b\u0001\u0000\u0000\u0000\u092b\u00a1\u0001"+
		"\u0000\u0000\u0000\u092c\u092d\u0003\u0154\u00aa\u0000\u092d\u00a3\u0001"+
		"\u0000\u0000\u0000\u092e\u092f\u0003\u0154\u00aa\u0000\u092f\u00a5\u0001"+
		"\u0000\u0000\u0000\u0930\u0932\u0003\u00a8T\u0000\u0931\u0933\u0003\u00aa"+
		"U\u0000\u0932\u0931\u0001\u0000\u0000\u0000\u0932\u0933\u0001\u0000\u0000"+
		"\u0000\u0933\u00a7\u0001\u0000\u0000\u0000\u0934\u0935\u0003\u00d6k\u0000"+
		"\u0935\u00a9\u0001\u0000\u0000\u0000\u0936\u0938\u0005\u001a\u0000\u0000"+
		"\u0937\u0936\u0001\u0000\u0000\u0000\u0937\u0938\u0001\u0000\u0000\u0000"+
		"\u0938\u0939\u0001\u0000\u0000\u0000\u0939\u093a\u0003\u0154\u00aa\u0000"+
		"\u093a\u00ab\u0001\u0000\u0000\u0000\u093b\u093c\u0005\u0090\u0000\u0000"+
		"\u093c\u093e\u0005\u012e\u0000\u0000\u093d\u093f\u0005\u00be\u0000\u0000"+
		"\u093e\u093d\u0001\u0000\u0000\u0000\u093e\u093f\u0001\u0000\u0000\u0000"+
		"\u093f\u0940\u0001\u0000\u0000\u0000\u0940\u0941\u0003\u014e\u00a7\u0000"+
		"\u0941\u094a\u0005\u0002\u0000\u0000\u0942\u0947\u0003\u00f8|\u0000\u0943"+
		"\u0944\u0005\u0004\u0000\u0000\u0944\u0946\u0003\u00f8|\u0000\u0945\u0943"+
		"\u0001\u0000\u0000\u0000\u0946\u0949\u0001\u0000\u0000\u0000\u0947\u0945"+
		"\u0001\u0000\u0000\u0000\u0947\u0948\u0001\u0000\u0000\u0000\u0948\u094b"+
		"\u0001\u0000\u0000\u0000\u0949\u0947\u0001\u0000\u0000\u0000\u094a\u0942"+
		"\u0001\u0000\u0000\u0000\u094a\u094b\u0001\u0000\u0000\u0000\u094b\u094c"+
		"\u0001\u0000\u0000\u0000\u094c\u094d\u0005\u0003\u0000\u0000\u094d\u0959"+
		"\u0003\u0154\u00aa\u0000\u094e\u0950\u0005\u001a\u0000\u0000\u094f\u094e"+
		"\u0001\u0000\u0000\u0000\u094f\u0950\u0001\u0000\u0000\u0000\u0950\u0951"+
		"\u0001\u0000\u0000\u0000\u0951\u0956\u0003\u0154\u00aa\u0000\u0952\u0953"+
		"\u0005\u0004\u0000\u0000\u0953\u0955\u0003\u0154\u00aa\u0000\u0954\u0952"+
		"\u0001\u0000\u0000\u0000\u0955\u0958\u0001\u0000\u0000\u0000\u0956\u0954"+
		"\u0001\u0000\u0000\u0000\u0956\u0957\u0001\u0000\u0000\u0000\u0957\u095a"+
		"\u0001\u0000\u0000\u0000\u0958\u0956\u0001\u0000\u0000\u0000\u0959\u094f"+
		"\u0001\u0000\u0000\u0000\u0959\u095a\u0001\u0000\u0000\u0000\u095a\u00ad"+
		"\u0001\u0000\u0000\u0000\u095b\u095c\u0007\u0015\u0000\u0000\u095c\u00af"+
		"\u0001\u0000\u0000\u0000\u095d\u095f\u0005\u0090\u0000\u0000\u095e\u095d"+
		"\u0001\u0000\u0000\u0000\u095e\u095f\u0001\u0000\u0000\u0000\u095f\u0960"+
		"\u0001\u0000\u0000\u0000\u0960\u0964\u0003\u00cae\u0000\u0961\u0963\u0003"+
		"\u00b2Y\u0000\u0962\u0961\u0001\u0000\u0000\u0000\u0963\u0966\u0001\u0000"+
		"\u0000\u0000\u0964\u0962\u0001\u0000\u0000\u0000\u0964\u0965\u0001\u0000"+
		"\u0000\u0000\u0965\u00b1\u0001\u0000\u0000\u0000\u0966\u0964\u0001\u0000"+
		"\u0000\u0000\u0967\u096b\u0003\u00b4Z\u0000\u0968\u096b\u0003\u0090H\u0000"+
		"\u0969\u096b\u0003\u0096K\u0000\u096a\u0967\u0001\u0000\u0000\u0000\u096a"+
		"\u0968\u0001\u0000\u0000\u0000\u096a\u0969\u0001\u0000\u0000\u0000\u096b"+
		"\u00b3\u0001\u0000\u0000\u0000\u096c\u096d\u0003\u00b6[\u0000\u096d\u096f"+
		"\u0005\u008d\u0000\u0000\u096e\u0970\u0005\u0090\u0000\u0000\u096f\u096e"+
		"\u0001\u0000\u0000\u0000\u096f\u0970\u0001\u0000\u0000\u0000\u0970\u0971"+
		"\u0001\u0000\u0000\u0000\u0971\u0973\u0003\u00cae\u0000\u0972\u0974\u0003"+
		"\u00b8\\\u0000\u0973\u0972\u0001\u0000\u0000\u0000\u0973\u0974\u0001\u0000"+
		"\u0000\u0000\u0974\u097e\u0001\u0000\u0000\u0000\u0975\u0976\u0005\u00b0"+
		"\u0000\u0000\u0976\u0977\u0003\u00b6[\u0000\u0977\u0979\u0005\u008d\u0000"+
		"\u0000\u0978\u097a\u0005\u0090\u0000\u0000\u0979\u0978\u0001\u0000\u0000"+
		"\u0000\u0979\u097a\u0001\u0000\u0000\u0000\u097a\u097b\u0001\u0000\u0000"+
		"\u0000\u097b\u097c\u0003\u00cae\u0000\u097c\u097e\u0001\u0000\u0000\u0000"+
		"\u097d\u096c\u0001\u0000\u0000\u0000\u097d\u0975\u0001\u0000\u0000\u0000"+
		"\u097e\u00b5\u0001\u0000\u0000\u0000\u097f\u0981\u0005\u0084\u0000\u0000"+
		"\u0980\u097f\u0001\u0000\u0000\u0000\u0980\u0981\u0001\u0000\u0000\u0000"+
		"\u0981\u0998\u0001\u0000\u0000\u0000\u0982\u0998\u0005<\u0000\u0000\u0983"+
		"\u0985\u0005\u0093\u0000\u0000\u0984\u0986\u0005\u00be\u0000\u0000\u0985"+
		"\u0984\u0001\u0000\u0000\u0000\u0985\u0986\u0001\u0000\u0000\u0000\u0986"+
		"\u0998\u0001\u0000\u0000\u0000\u0987\u0989\u0005\u0093\u0000\u0000\u0988"+
		"\u0987\u0001\u0000\u0000\u0000\u0988\u0989\u0001\u0000\u0000\u0000\u0989"+
		"\u098a\u0001\u0000\u0000\u0000\u098a\u0998\u0005\u00f0\u0000\u0000\u098b"+
		"\u098d\u0005\u00e3\u0000\u0000\u098c\u098e\u0005\u00be\u0000\u0000\u098d"+
		"\u098c\u0001\u0000\u0000\u0000\u098d\u098e\u0001\u0000\u0000\u0000\u098e"+
		"\u0998\u0001\u0000\u0000\u0000\u098f\u0991\u0005r\u0000\u0000\u0990\u0992"+
		"\u0005\u00be\u0000\u0000\u0991\u0990\u0001\u0000\u0000\u0000\u0991\u0992"+
		"\u0001\u0000\u0000\u0000\u0992\u0998\u0001\u0000\u0000\u0000\u0993\u0995"+
		"\u0005\u0093\u0000\u0000\u0994\u0993\u0001\u0000\u0000\u0000\u0994\u0995"+
		"\u0001\u0000\u0000\u0000\u0995\u0996\u0001\u0000\u0000\u0000\u0996\u0998"+
		"\u0005\u0015\u0000\u0000\u0997\u0980\u0001\u0000\u0000\u0000\u0997\u0982"+
		"\u0001\u0000\u0000\u0000\u0997\u0983\u0001\u0000\u0000\u0000\u0997\u0988"+
		"\u0001\u0000\u0000\u0000\u0997\u098b\u0001\u0000\u0000\u0000\u0997\u098f"+
		"\u0001\u0000\u0000\u0000\u0997\u0994\u0001\u0000\u0000\u0000\u0998\u00b7"+
		"\u0001\u0000\u0000\u0000\u0999\u099a\u0005\u00b7\u0000\u0000\u099a\u099e"+
		"\u0003\u00fc~\u0000\u099b\u099c\u0005\u012b\u0000\u0000\u099c\u099e\u0003"+
		"\u00be_\u0000\u099d\u0999\u0001\u0000\u0000\u0000\u099d\u099b\u0001\u0000"+
		"\u0000\u0000\u099e\u00b9\u0001\u0000\u0000\u0000\u099f\u09a0\u0005\u010a"+
		"\u0000\u0000\u09a0\u09a2\u0005\u0002\u0000\u0000\u09a1\u09a3\u0003\u00bc"+
		"^\u0000\u09a2\u09a1\u0001\u0000\u0000\u0000\u09a2\u09a3\u0001\u0000\u0000"+
		"\u0000\u09a3\u09a4\u0001\u0000\u0000\u0000\u09a4\u09a9\u0005\u0003\u0000"+
		"\u0000\u09a5\u09a6\u0005\u00dd\u0000\u0000\u09a6\u09a7\u0005\u0002\u0000"+
		"\u0000\u09a7\u09a8\u0005\u0156\u0000\u0000\u09a8\u09aa\u0005\u0003\u0000"+
		"\u0000\u09a9\u09a5\u0001\u0000\u0000\u0000\u09a9\u09aa\u0001\u0000\u0000"+
		"\u0000\u09aa\u00bb\u0001\u0000\u0000\u0000\u09ab\u09ad\u0005\u0143\u0000"+
		"\u0000\u09ac\u09ab\u0001\u0000\u0000\u0000\u09ac\u09ad\u0001\u0000\u0000"+
		"\u0000\u09ad\u09ae\u0001\u0000\u0000\u0000\u09ae\u09af\u0007\u0016\u0000"+
		"\u0000\u09af\u09c4\u0005\u00c9\u0000\u0000\u09b0\u09b1\u0003\u00f8|\u0000"+
		"\u09b1\u09b2\u0005\u00ea\u0000\u0000\u09b2\u09c4\u0001\u0000\u0000\u0000"+
		"\u09b3\u09b4\u0005 \u0000\u0000\u09b4\u09b5\u0005\u0156\u0000\u0000\u09b5"+
		"\u09b6\u0005\u00bd\u0000\u0000\u09b6\u09b7\u0005\u00b5\u0000\u0000\u09b7"+
		"\u09c0\u0005\u0156\u0000\u0000\u09b8\u09be\u0005\u00b7\u0000\u0000\u09b9"+
		"\u09bf\u0003\u0154\u00aa\u0000\u09ba\u09bb\u0003\u014e\u00a7\u0000\u09bb"+
		"\u09bc\u0005\u0002\u0000\u0000\u09bc\u09bd\u0005\u0003\u0000\u0000\u09bd"+
		"\u09bf\u0001\u0000\u0000\u0000\u09be\u09b9\u0001\u0000\u0000\u0000\u09be"+
		"\u09ba\u0001\u0000\u0000\u0000\u09bf\u09c1\u0001\u0000\u0000\u0000\u09c0"+
		"\u09b8\u0001\u0000\u0000\u0000\u09c0\u09c1\u0001\u0000\u0000\u0000\u09c1"+
		"\u09c4\u0001\u0000\u0000\u0000\u09c2\u09c4\u0003\u00f8|\u0000\u09c3\u09ac"+
		"\u0001\u0000\u0000\u0000\u09c3\u09b0\u0001\u0000\u0000\u0000\u09c3\u09b3"+
		"\u0001\u0000\u0000\u0000\u09c3\u09c2\u0001\u0000\u0000\u0000\u09c4\u00bd"+
		"\u0001\u0000\u0000\u0000\u09c5\u09c6\u0005\u0002\u0000\u0000\u09c6\u09c7"+
		"\u0003\u00c0`\u0000\u09c7\u09c8\u0005\u0003\u0000\u0000\u09c8\u00bf\u0001"+
		"\u0000\u0000\u0000\u09c9\u09ce\u0003\u0150\u00a8\u0000\u09ca\u09cb\u0005"+
		"\u0004\u0000\u0000\u09cb\u09cd\u0003\u0150\u00a8\u0000\u09cc\u09ca\u0001"+
		"\u0000\u0000\u0000\u09cd\u09d0\u0001\u0000\u0000\u0000\u09ce\u09cc\u0001"+
		"\u0000\u0000\u0000\u09ce\u09cf\u0001\u0000\u0000\u0000\u09cf\u00c1\u0001"+
		"\u0000\u0000\u0000\u09d0\u09ce\u0001\u0000\u0000\u0000\u09d1\u09d2\u0005"+
		"\u0002\u0000\u0000\u09d2\u09d7\u0003\u00c4b\u0000\u09d3\u09d4\u0005\u0004"+
		"\u0000\u0000\u09d4\u09d6\u0003\u00c4b\u0000\u09d5\u09d3\u0001\u0000\u0000"+
		"\u0000\u09d6\u09d9\u0001\u0000\u0000\u0000\u09d7\u09d5\u0001\u0000\u0000"+
		"\u0000\u09d7\u09d8\u0001\u0000\u0000\u0000\u09d8\u09da\u0001\u0000\u0000"+
		"\u0000\u09d9\u09d7\u0001\u0000\u0000\u0000\u09da\u09db\u0005\u0003\u0000"+
		"\u0000\u09db\u00c3\u0001\u0000\u0000\u0000\u09dc\u09de\u0003\u0150\u00a8"+
		"\u0000\u09dd\u09df\u0007\u000f\u0000\u0000\u09de\u09dd\u0001\u0000\u0000"+
		"\u0000\u09de\u09df\u0001\u0000\u0000\u0000\u09df\u00c5\u0001\u0000\u0000"+
		"\u0000\u09e0\u09e1\u0005\u0002\u0000\u0000\u09e1\u09e6\u0003\u00c8d\u0000"+
		"\u09e2\u09e3\u0005\u0004\u0000\u0000\u09e3\u09e5\u0003\u00c8d\u0000\u09e4"+
		"\u09e2\u0001\u0000\u0000\u0000\u09e5\u09e8\u0001\u0000\u0000\u0000\u09e6"+
		"\u09e4\u0001\u0000\u0000\u0000\u09e6\u09e7\u0001\u0000\u0000\u0000\u09e7"+
		"\u09e9\u0001\u0000\u0000\u0000\u09e8\u09e6\u0001\u0000\u0000\u0000\u09e9"+
		"\u09ea\u0005\u0003\u0000\u0000\u09ea\u00c7\u0001\u0000\u0000\u0000\u09eb"+
		"\u09ed\u0003\u0154\u00aa\u0000\u09ec\u09ee\u0003\"\u0011\u0000\u09ed\u09ec"+
		"\u0001\u0000\u0000\u0000\u09ed\u09ee\u0001\u0000\u0000\u0000\u09ee\u00c9"+
		"\u0001\u0000\u0000\u0000\u09ef\u09f1\u0003\u00d6k\u0000\u09f0\u09f2\u0003"+
		"\u0084B\u0000\u09f1\u09f0\u0001\u0000\u0000\u0000\u09f1\u09f2\u0001\u0000"+
		"\u0000\u0000\u09f2\u09f4\u0001\u0000\u0000\u0000\u09f3\u09f5\u0003\u00ba"+
		"]\u0000\u09f4\u09f3\u0001\u0000\u0000\u0000\u09f4\u09f5\u0001\u0000\u0000"+
		"\u0000\u09f5\u09f6\u0001\u0000\u0000\u0000\u09f6\u09f7\u0003\u00d0h\u0000"+
		"\u09f7\u0a0b\u0001\u0000\u0000\u0000\u09f8\u09f9\u0005\u0002\u0000\u0000"+
		"\u09f9\u09fa\u0003$\u0012\u0000\u09fa\u09fc\u0005\u0003\u0000\u0000\u09fb"+
		"\u09fd\u0003\u00ba]\u0000\u09fc\u09fb\u0001\u0000\u0000\u0000\u09fc\u09fd"+
		"\u0001\u0000\u0000\u0000\u09fd\u09fe\u0001\u0000\u0000\u0000\u09fe\u09ff"+
		"\u0003\u00d0h\u0000\u09ff\u0a0b\u0001\u0000\u0000\u0000\u0a00\u0a01\u0005"+
		"\u0002\u0000\u0000\u0a01\u0a02\u0003\u00b0X\u0000\u0a02\u0a04\u0005\u0003"+
		"\u0000\u0000\u0a03\u0a05\u0003\u00ba]\u0000\u0a04\u0a03\u0001\u0000\u0000"+
		"\u0000\u0a04\u0a05\u0001\u0000\u0000\u0000\u0a05\u0a06\u0001\u0000\u0000"+
		"\u0000\u0a06\u0a07\u0003\u00d0h\u0000\u0a07\u0a0b\u0001\u0000\u0000\u0000"+
		"\u0a08\u0a0b\u0003\u00ccf\u0000\u0a09\u0a0b\u0003\u00ceg\u0000\u0a0a\u09ef"+
		"\u0001\u0000\u0000\u0000\u0a0a\u09f8\u0001\u0000\u0000\u0000\u0a0a\u0a00"+
		"\u0001\u0000\u0000\u0000\u0a0a\u0a08\u0001\u0000\u0000\u0000\u0a0a\u0a09"+
		"\u0001\u0000\u0000\u0000\u0a0b\u00cb\u0001\u0000\u0000\u0000\u0a0c\u0a0d"+
		"\u0005\u012c\u0000\u0000\u0a0d\u0a12\u0003\u00f8|\u0000\u0a0e\u0a0f\u0005"+
		"\u0004\u0000\u0000\u0a0f\u0a11\u0003\u00f8|\u0000\u0a10\u0a0e\u0001\u0000"+
		"\u0000\u0000\u0a11\u0a14\u0001\u0000\u0000\u0000\u0a12\u0a10\u0001\u0000"+
		"\u0000\u0000\u0a12\u0a13\u0001\u0000\u0000\u0000\u0a13\u0a15\u0001\u0000"+
		"\u0000\u0000\u0a14\u0a12\u0001\u0000\u0000\u0000\u0a15\u0a16\u0003\u00d0"+
		"h\u0000\u0a16\u00cd\u0001\u0000\u0000\u0000\u0a17\u0a18\u0003\u014c\u00a6"+
		"\u0000\u0a18\u0a21\u0005\u0002\u0000\u0000\u0a19\u0a1e\u0003\u00f8|\u0000"+
		"\u0a1a\u0a1b\u0005\u0004\u0000\u0000\u0a1b\u0a1d\u0003\u00f8|\u0000\u0a1c"+
		"\u0a1a\u0001\u0000\u0000\u0000\u0a1d\u0a20\u0001\u0000\u0000\u0000\u0a1e"+
		"\u0a1c\u0001\u0000\u0000\u0000\u0a1e\u0a1f\u0001\u0000\u0000\u0000\u0a1f"+
		"\u0a22\u0001\u0000\u0000\u0000\u0a20\u0a1e\u0001\u0000\u0000\u0000\u0a21"+
		"\u0a19\u0001\u0000\u0000\u0000\u0a21\u0a22\u0001\u0000\u0000\u0000\u0a22"+
		"\u0a23\u0001\u0000\u0000\u0000\u0a23\u0a24\u0005\u0003\u0000\u0000\u0a24"+
		"\u0a25\u0003\u00d0h\u0000\u0a25\u00cf\u0001\u0000\u0000\u0000\u0a26\u0a28"+
		"\u0005\u001a\u0000\u0000\u0a27\u0a26\u0001\u0000\u0000\u0000\u0a27\u0a28"+
		"\u0001\u0000\u0000\u0000\u0a28\u0a29\u0001\u0000\u0000\u0000\u0a29\u0a2b"+
		"\u0003\u0156\u00ab\u0000\u0a2a\u0a2c\u0003\u00be_\u0000\u0a2b\u0a2a\u0001"+
		"\u0000\u0000\u0000\u0a2b\u0a2c\u0001\u0000\u0000\u0000\u0a2c\u0a2e\u0001"+
		"\u0000\u0000\u0000\u0a2d\u0a27\u0001\u0000\u0000\u0000\u0a2d\u0a2e\u0001"+
		"\u0000\u0000\u0000\u0a2e\u00d1\u0001\u0000\u0000\u0000\u0a2f\u0a30\u0005"+
		"\u00e9\u0000\u0000\u0a30\u0a31\u0005o\u0000\u0000\u0a31\u0a32\u0005\u00f2"+
		"\u0000\u0000\u0a32\u0a36\u0003\u0160\u00b0\u0000\u0a33\u0a34\u0005\u0135"+
		"\u0000\u0000\u0a34\u0a35\u0005\u00f3\u0000\u0000\u0a35\u0a37\u0003>\u001f"+
		"\u0000\u0a36\u0a33\u0001\u0000\u0000\u0000\u0a36\u0a37\u0001\u0000\u0000"+
		"\u0000\u0a37\u0a61\u0001\u0000\u0000\u0000\u0a38\u0a39\u0005\u00e9\u0000"+
		"\u0000\u0a39\u0a3a\u0005o\u0000\u0000\u0a3a\u0a44\u0005O\u0000\u0000\u0a3b"+
		"\u0a3c\u0005h\u0000\u0000\u0a3c\u0a3d\u0005\u010e\u0000\u0000\u0a3d\u0a3e"+
		"\u0005\"\u0000\u0000\u0a3e\u0a42\u0003\u0160\u00b0\u0000\u0a3f\u0a40\u0005"+
		"\\\u0000\u0000\u0a40\u0a41\u0005\"\u0000\u0000\u0a41\u0a43\u0003\u0160"+
		"\u00b0\u0000\u0a42\u0a3f\u0001\u0000\u0000\u0000\u0a42\u0a43\u0001\u0000"+
		"\u0000\u0000\u0a43\u0a45\u0001\u0000\u0000\u0000\u0a44\u0a3b\u0001\u0000"+
		"\u0000\u0000\u0a44\u0a45\u0001\u0000\u0000\u0000\u0a45\u0a4b\u0001\u0000"+
		"\u0000\u0000\u0a46\u0a47\u00050\u0000\u0000\u0a47\u0a48\u0005\u008c\u0000"+
		"\u0000\u0a48\u0a49\u0005\u010e\u0000\u0000\u0a49\u0a4a\u0005\"\u0000\u0000"+
		"\u0a4a\u0a4c\u0003\u0160\u00b0\u0000\u0a4b\u0a46\u0001\u0000\u0000\u0000"+
		"\u0a4b\u0a4c\u0001\u0000\u0000\u0000\u0a4c\u0a52\u0001\u0000\u0000\u0000"+
		"\u0a4d\u0a4e\u0005\u00a0\u0000\u0000\u0a4e\u0a4f\u0005\u008e\u0000\u0000"+
		"\u0a4f\u0a50\u0005\u010e\u0000\u0000\u0a50\u0a51\u0005\"\u0000\u0000\u0a51"+
		"\u0a53\u0003\u0160\u00b0\u0000\u0a52\u0a4d\u0001\u0000\u0000\u0000\u0a52"+
		"\u0a53\u0001\u0000\u0000\u0000\u0a53\u0a58\u0001\u0000\u0000\u0000\u0a54"+
		"\u0a55\u0005\u0097\u0000\u0000\u0a55\u0a56\u0005\u010e\u0000\u0000\u0a56"+
		"\u0a57\u0005\"\u0000\u0000\u0a57\u0a59\u0003\u0160\u00b0\u0000\u0a58\u0a54"+
		"\u0001\u0000\u0000\u0000\u0a58\u0a59\u0001\u0000\u0000\u0000\u0a59\u0a5e"+
		"\u0001\u0000\u0000\u0000\u0a5a\u0a5b\u0005\u00b3\u0000\u0000\u0a5b\u0a5c"+
		"\u0005M\u0000\u0000\u0a5c\u0a5d\u0005\u001a\u0000\u0000\u0a5d\u0a5f\u0003"+
		"\u0160\u00b0\u0000\u0a5e\u0a5a\u0001\u0000\u0000\u0000\u0a5e\u0a5f\u0001"+
		"\u0000\u0000\u0000\u0a5f\u0a61\u0001\u0000\u0000\u0000\u0a60\u0a2f\u0001"+
		"\u0000\u0000\u0000\u0a60\u0a38\u0001\u0000\u0000\u0000\u0a61\u00d3\u0001"+
		"\u0000\u0000\u0000\u0a62\u0a67\u0003\u00d6k\u0000\u0a63\u0a64\u0005\u0004"+
		"\u0000\u0000\u0a64\u0a66\u0003\u00d6k\u0000\u0a65\u0a63\u0001\u0000\u0000"+
		"\u0000\u0a66\u0a69\u0001\u0000\u0000\u0000\u0a67\u0a65\u0001\u0000\u0000"+
		"\u0000\u0a67\u0a68\u0001\u0000\u0000\u0000\u0a68\u00d5\u0001\u0000\u0000"+
		"\u0000\u0a69\u0a67\u0001\u0000\u0000\u0000\u0a6a\u0a6f\u0003\u0150\u00a8"+
		"\u0000\u0a6b\u0a6c\u0005\u0005\u0000\u0000\u0a6c\u0a6e\u0003\u0150\u00a8"+
		"\u0000\u0a6d\u0a6b\u0001\u0000\u0000\u0000\u0a6e\u0a71\u0001\u0000\u0000"+
		"\u0000\u0a6f\u0a6d\u0001\u0000\u0000\u0000\u0a6f\u0a70\u0001\u0000\u0000"+
		"\u0000\u0a70\u00d7\u0001\u0000\u0000\u0000\u0a71\u0a6f\u0001\u0000\u0000"+
		"\u0000\u0a72\u0a77\u0003\u00dam\u0000\u0a73\u0a74\u0005\u0004\u0000\u0000"+
		"\u0a74\u0a76\u0003\u00dam\u0000\u0a75\u0a73\u0001\u0000\u0000\u0000\u0a76"+
		"\u0a79\u0001\u0000\u0000\u0000\u0a77\u0a75\u0001\u0000\u0000\u0000\u0a77"+
		"\u0a78\u0001\u0000\u0000\u0000\u0a78\u00d9\u0001\u0000\u0000\u0000\u0a79"+
		"\u0a77\u0001\u0000\u0000\u0000\u0a7a\u0a7d\u0003\u00d6k\u0000\u0a7b\u0a7c"+
		"\u0005\u00ba\u0000\u0000\u0a7c\u0a7e\u0003>\u001f\u0000\u0a7d\u0a7b\u0001"+
		"\u0000\u0000\u0000\u0a7d\u0a7e\u0001\u0000\u0000\u0000\u0a7e\u00db\u0001"+
		"\u0000\u0000\u0000\u0a7f\u0a80\u0003\u0150\u00a8\u0000\u0a80\u0a81\u0005"+
		"\u0005\u0000\u0000\u0a81\u0a83\u0001\u0000\u0000\u0000\u0a82\u0a7f\u0001"+
		"\u0000\u0000\u0000\u0a82\u0a83\u0001\u0000\u0000\u0000\u0a83\u0a84\u0001"+
		"\u0000\u0000\u0000\u0a84\u0a85\u0003\u0150\u00a8\u0000\u0a85\u00dd\u0001"+
		"\u0000\u0000\u0000\u0a86\u0a87\u0003\u0150\u00a8\u0000\u0a87\u0a88\u0005"+
		"\u0005\u0000\u0000\u0a88\u0a8a\u0001\u0000\u0000\u0000\u0a89\u0a86\u0001"+
		"\u0000\u0000\u0000\u0a89\u0a8a\u0001\u0000\u0000\u0000\u0a8a\u0a8b\u0001"+
		"\u0000\u0000\u0000\u0a8b\u0a8c\u0003\u0150\u00a8\u0000\u0a8c\u00df\u0001"+
		"\u0000\u0000\u0000\u0a8d\u0a95\u0003\u00f8|\u0000\u0a8e\u0a90\u0005\u001a"+
		"\u0000\u0000\u0a8f\u0a8e\u0001\u0000\u0000\u0000\u0a8f\u0a90\u0001\u0000"+
		"\u0000\u0000\u0a90\u0a93\u0001\u0000\u0000\u0000\u0a91\u0a94\u0003\u0150"+
		"\u00a8\u0000\u0a92\u0a94\u0003\u00be_\u0000\u0a93\u0a91\u0001\u0000\u0000"+
		"\u0000\u0a93\u0a92\u0001\u0000\u0000\u0000\u0a94\u0a96\u0001\u0000\u0000"+
		"\u0000\u0a95\u0a8f\u0001\u0000\u0000\u0000\u0a95\u0a96\u0001\u0000\u0000"+
		"\u0000\u0a96\u00e1\u0001\u0000\u0000\u0000\u0a97\u0a9c\u0003\u00e0p\u0000"+
		"\u0a98\u0a99\u0005\u0004\u0000\u0000\u0a99\u0a9b\u0003\u00e0p\u0000\u0a9a"+
		"\u0a98\u0001\u0000\u0000\u0000\u0a9b\u0a9e\u0001\u0000\u0000\u0000\u0a9c"+
		"\u0a9a\u0001\u0000\u0000\u0000\u0a9c\u0a9d\u0001\u0000\u0000\u0000\u0a9d"+
		"\u0aa6\u0001\u0000\u0000\u0000\u0a9e\u0a9c\u0001\u0000\u0000\u0000\u0a9f"+
		"\u0aa6\u0003\u00e8t\u0000\u0aa0\u0aa1\u0003\u00e4r\u0000\u0aa1\u0aa2\u0005"+
		"\u0002\u0000\u0000\u0aa2\u0aa3\u0003\u00e6s\u0000\u0aa3\u0aa4\u0005\u0003"+
		"\u0000\u0000\u0aa4\u0aa6\u0001\u0000\u0000\u0000\u0aa5\u0a97\u0001\u0000"+
		"\u0000\u0000\u0aa5\u0a9f\u0001\u0000\u0000\u0000\u0aa5\u0aa0\u0001\u0000"+
		"\u0000\u0000\u0aa6\u00e3\u0001\u0000\u0000\u0000\u0aa7\u0aa8\u0005\b\u0000"+
		"\u0000\u0aa8\u00e5\u0001\u0000\u0000\u0000\u0aa9\u0aae\u0003\u00e8t\u0000"+
		"\u0aaa\u0aab\u0005\u0004\u0000\u0000\u0aab\u0aad\u0003\u00e8t\u0000\u0aac"+
		"\u0aaa\u0001\u0000\u0000\u0000\u0aad\u0ab0\u0001\u0000\u0000\u0000\u0aae"+
		"\u0aac\u0001\u0000\u0000\u0000\u0aae\u0aaf\u0001\u0000\u0000\u0000\u0aaf"+
		"\u00e7\u0001\u0000\u0000\u0000\u0ab0\u0aae\u0001\u0000\u0000\u0000\u0ab1"+
		"\u0ab2\u0007\u0017\u0000\u0000\u0ab2\u0ab3\u0005\u0002\u0000\u0000\u0ab3"+
		"\u0ab4\u0003\u00eau\u0000\u0ab4\u0ab5\u0005\u0003\u0000\u0000\u0ab5\u00e9"+
		"\u0001\u0000\u0000\u0000\u0ab6\u0abb\u0003\u00ecv\u0000\u0ab7\u0ab8\u0005"+
		"\u0004\u0000\u0000\u0ab8\u0aba\u0003\u00ecv\u0000\u0ab9\u0ab7\u0001\u0000"+
		"\u0000\u0000\u0aba\u0abd\u0001\u0000\u0000\u0000\u0abb\u0ab9\u0001\u0000"+
		"\u0000\u0000\u0abb\u0abc\u0001\u0000\u0000\u0000\u0abc\u00eb\u0001\u0000"+
		"\u0000\u0000\u0abd\u0abb\u0001\u0000\u0000\u0000\u0abe\u0abf\u0003\u0100"+
		"\u0080\u0000\u0abf\u0ac0\u0003\u00eew\u0000\u0ac0\u0ac1\u0003\u0100\u0080"+
		"\u0000\u0ac1\u00ed\u0001\u0000\u0000\u0000\u0ac2\u0ac3\u0005\u013a\u0000"+
		"\u0000\u0ac3\u00ef\u0001\u0000\u0000\u0000\u0ac4\u0ac5\u0005\u0002\u0000"+
		"\u0000\u0ac5\u0aca\u0003\u00f2y\u0000\u0ac6\u0ac7\u0005\u0004\u0000\u0000"+
		"\u0ac7\u0ac9\u0003\u00f2y\u0000\u0ac8\u0ac6\u0001\u0000\u0000\u0000\u0ac9"+
		"\u0acc\u0001\u0000\u0000\u0000\u0aca\u0ac8\u0001\u0000\u0000\u0000\u0aca"+
		"\u0acb\u0001\u0000\u0000\u0000\u0acb\u0acd\u0001\u0000\u0000\u0000\u0acc"+
		"\u0aca\u0001\u0000\u0000\u0000\u0acd\u0ace\u0005\u0003\u0000\u0000\u0ace"+
		"\u00f1\u0001\u0000\u0000\u0000\u0acf\u0ad2\u0003\u00f4z\u0000\u0ad0\u0ad2"+
		"\u0003\u0130\u0098\u0000\u0ad1\u0acf\u0001\u0000\u0000\u0000\u0ad1\u0ad0"+
		"\u0001\u0000\u0000\u0000\u0ad2\u00f3\u0001\u0000\u0000\u0000\u0ad3\u0ae1"+
		"\u0003\u014e\u00a7\u0000\u0ad4\u0ad5\u0003\u0154\u00aa\u0000\u0ad5\u0ad6"+
		"\u0005\u0002\u0000\u0000\u0ad6\u0adb\u0003\u00f6{\u0000\u0ad7\u0ad8\u0005"+
		"\u0004\u0000\u0000\u0ad8\u0ada\u0003\u00f6{\u0000\u0ad9\u0ad7\u0001\u0000"+
		"\u0000\u0000\u0ada\u0add\u0001\u0000\u0000\u0000\u0adb\u0ad9\u0001\u0000"+
		"\u0000\u0000\u0adb\u0adc\u0001\u0000\u0000\u0000\u0adc\u0ade\u0001\u0000"+
		"\u0000\u0000\u0add\u0adb\u0001\u0000\u0000\u0000\u0ade\u0adf\u0005\u0003"+
		"\u0000\u0000\u0adf\u0ae1\u0001\u0000\u0000\u0000\u0ae0\u0ad3\u0001\u0000"+
		"\u0000\u0000\u0ae0\u0ad4\u0001\u0000\u0000\u0000\u0ae1\u00f5\u0001\u0000"+
		"\u0000\u0000\u0ae2\u0ae5\u0003\u014e\u00a7\u0000\u0ae3\u0ae5\u0003\u0108"+
		"\u0084\u0000\u0ae4\u0ae2\u0001\u0000\u0000\u0000\u0ae4\u0ae3\u0001\u0000"+
		"\u0000\u0000\u0ae5\u00f7\u0001\u0000\u0000\u0000\u0ae6\u0ae7\u0003\u00fc"+
		"~\u0000\u0ae7\u00f9\u0001\u0000\u0000\u0000\u0ae8\u0aed\u0003\u00f8|\u0000"+
		"\u0ae9\u0aea\u0005\u0004\u0000\u0000\u0aea\u0aec\u0003\u00f8|\u0000\u0aeb"+
		"\u0ae9\u0001\u0000\u0000\u0000\u0aec\u0aef\u0001\u0000\u0000\u0000\u0aed"+
		"\u0aeb\u0001\u0000\u0000\u0000\u0aed\u0aee\u0001\u0000\u0000\u0000\u0aee"+
		"\u00fb\u0001\u0000\u0000\u0000\u0aef\u0aed\u0001\u0000\u0000\u0000\u0af0"+
		"\u0af1\u0006~\uffff\uffff\u0000\u0af1\u0af2\u0005\u00b2\u0000\u0000\u0af2"+
		"\u0afd\u0003\u00fc~\u0005\u0af3\u0af4\u0005`\u0000\u0000\u0af4\u0af5\u0005"+
		"\u0002\u0000\u0000\u0af5\u0af6\u0003$\u0012\u0000\u0af6\u0af7\u0005\u0003"+
		"\u0000\u0000\u0af7\u0afd\u0001\u0000\u0000\u0000\u0af8\u0afa\u0003\u0100"+
		"\u0080\u0000\u0af9\u0afb\u0003\u00fe\u007f\u0000\u0afa\u0af9\u0001\u0000"+
		"\u0000\u0000\u0afa\u0afb\u0001\u0000\u0000\u0000\u0afb\u0afd\u0001\u0000"+
		"\u0000\u0000\u0afc\u0af0\u0001\u0000\u0000\u0000\u0afc\u0af3\u0001\u0000"+
		"\u0000\u0000\u0afc\u0af8\u0001\u0000\u0000\u0000\u0afd\u0b06\u0001\u0000"+
		"\u0000\u0000\u0afe\u0aff\n\u0002\u0000\u0000\u0aff\u0b00\u0005\u0014\u0000"+
		"\u0000\u0b00\u0b05\u0003\u00fc~\u0003\u0b01\u0b02\n\u0001\u0000\u0000"+
		"\u0b02\u0b03\u0005\u00bb\u0000\u0000\u0b03\u0b05\u0003\u00fc~\u0002\u0b04"+
		"\u0afe\u0001\u0000\u0000\u0000\u0b04\u0b01\u0001\u0000\u0000\u0000\u0b05"+
		"\u0b08\u0001\u0000\u0000\u0000\u0b06\u0b04\u0001\u0000\u0000\u0000\u0b06"+
		"\u0b07\u0001\u0000\u0000\u0000\u0b07\u00fd\u0001\u0000\u0000\u0000\u0b08"+
		"\u0b06\u0001\u0000\u0000\u0000\u0b09\u0b0b\u0005\u00b2\u0000\u0000\u0b0a"+
		"\u0b09\u0001\u0000\u0000\u0000\u0b0a\u0b0b\u0001\u0000\u0000\u0000\u0b0b"+
		"\u0b0c\u0001\u0000\u0000\u0000\u0b0c\u0b0d\u0005\u001e\u0000\u0000\u0b0d"+
		"\u0b0e\u0003\u0100\u0080\u0000\u0b0e\u0b0f\u0005\u0014\u0000\u0000\u0b0f"+
		"\u0b10\u0003\u0100\u0080\u0000\u0b10\u0b5c\u0001\u0000\u0000\u0000\u0b11"+
		"\u0b13\u0005\u00b2\u0000\u0000\u0b12\u0b11\u0001\u0000\u0000\u0000\u0b12"+
		"\u0b13\u0001\u0000\u0000\u0000\u0b13\u0b14\u0001\u0000\u0000\u0000\u0b14"+
		"\u0b15\u0005\u0080\u0000\u0000\u0b15\u0b16\u0005\u0002\u0000\u0000\u0b16"+
		"\u0b1b\u0003\u00f8|\u0000\u0b17\u0b18\u0005\u0004\u0000\u0000\u0b18\u0b1a"+
		"\u0003\u00f8|\u0000\u0b19\u0b17\u0001\u0000\u0000\u0000\u0b1a\u0b1d\u0001"+
		"\u0000\u0000\u0000\u0b1b\u0b19\u0001\u0000\u0000\u0000\u0b1b\u0b1c\u0001"+
		"\u0000\u0000\u0000\u0b1c\u0b1e\u0001\u0000\u0000\u0000\u0b1d\u0b1b\u0001"+
		"\u0000\u0000\u0000\u0b1e\u0b1f\u0005\u0003\u0000\u0000\u0b1f\u0b5c\u0001"+
		"\u0000\u0000\u0000\u0b20\u0b22\u0005\u00b2\u0000\u0000\u0b21\u0b20\u0001"+
		"\u0000\u0000\u0000\u0b21\u0b22\u0001\u0000\u0000\u0000\u0b22\u0b23\u0001"+
		"\u0000\u0000\u0000\u0b23\u0b24\u0005\u0080\u0000\u0000\u0b24\u0b25\u0005"+
		"\u0002\u0000\u0000\u0b25\u0b26\u0003$\u0012\u0000\u0b26\u0b27\u0005\u0003"+
		"\u0000\u0000\u0b27\u0b5c\u0001\u0000\u0000\u0000\u0b28\u0b2a\u0005\u00b2"+
		"\u0000\u0000\u0b29\u0b28\u0001\u0000\u0000\u0000\u0b29\u0b2a\u0001\u0000"+
		"\u0000\u0000\u0b2a\u0b2b\u0001\u0000\u0000\u0000\u0b2b\u0b2c\u0005\u00e4"+
		"\u0000\u0000\u0b2c\u0b5c\u0003\u0100\u0080\u0000\u0b2d\u0b2f\u0005\u00b2"+
		"\u0000\u0000\u0b2e\u0b2d\u0001\u0000\u0000\u0000\u0b2e\u0b2f\u0001\u0000"+
		"\u0000\u0000\u0b2f\u0b30\u0001\u0000\u0000\u0000\u0b30\u0b31\u0007\u0018"+
		"\u0000\u0000\u0b31\u0b3f\u0007\u0019\u0000\u0000\u0b32\u0b33\u0005\u0002"+
		"\u0000\u0000\u0b33\u0b40\u0005\u0003\u0000\u0000\u0b34\u0b35\u0005\u0002"+
		"\u0000\u0000\u0b35\u0b3a\u0003\u00f8|\u0000\u0b36\u0b37\u0005\u0004\u0000"+
		"\u0000\u0b37\u0b39\u0003\u00f8|\u0000\u0b38\u0b36\u0001\u0000\u0000\u0000"+
		"\u0b39\u0b3c\u0001\u0000\u0000\u0000\u0b3a\u0b38\u0001\u0000\u0000\u0000"+
		"\u0b3a\u0b3b\u0001\u0000\u0000\u0000\u0b3b\u0b3d\u0001\u0000\u0000\u0000"+
		"\u0b3c\u0b3a\u0001\u0000\u0000\u0000\u0b3d\u0b3e\u0005\u0003\u0000\u0000"+
		"\u0b3e\u0b40\u0001\u0000\u0000\u0000\u0b3f\u0b32\u0001\u0000\u0000\u0000"+
		"\u0b3f\u0b34\u0001\u0000\u0000\u0000\u0b40\u0b5c\u0001\u0000\u0000\u0000"+
		"\u0b41\u0b43\u0005\u00b2\u0000\u0000\u0b42\u0b41\u0001\u0000\u0000\u0000"+
		"\u0b42\u0b43\u0001\u0000\u0000\u0000\u0b43\u0b44\u0001\u0000\u0000\u0000"+
		"\u0b44\u0b45\u0007\u0018\u0000\u0000\u0b45\u0b48\u0003\u0100\u0080\u0000"+
		"\u0b46\u0b47\u0005[\u0000\u0000\u0b47\u0b49\u0003\u0160\u00b0\u0000\u0b48"+
		"\u0b46\u0001\u0000\u0000\u0000\u0b48\u0b49\u0001\u0000\u0000\u0000\u0b49"+
		"\u0b5c\u0001\u0000\u0000\u0000\u0b4a\u0b4c\u0005\u008b\u0000\u0000\u0b4b"+
		"\u0b4d\u0005\u00b2\u0000\u0000\u0b4c\u0b4b\u0001\u0000\u0000\u0000\u0b4c"+
		"\u0b4d\u0001\u0000\u0000\u0000\u0b4d\u0b4e\u0001\u0000\u0000\u0000\u0b4e"+
		"\u0b5c\u0005\u00b3\u0000\u0000\u0b4f\u0b51\u0005\u008b\u0000\u0000\u0b50"+
		"\u0b52\u0005\u00b2\u0000\u0000\u0b51\u0b50\u0001\u0000\u0000\u0000\u0b51"+
		"\u0b52\u0001\u0000\u0000\u0000\u0b52\u0b53\u0001\u0000\u0000\u0000\u0b53"+
		"\u0b5c\u0007\u001a\u0000\u0000\u0b54\u0b56\u0005\u008b\u0000\u0000\u0b55"+
		"\u0b57\u0005\u00b2\u0000\u0000\u0b56\u0b55\u0001\u0000\u0000\u0000\u0b56"+
		"\u0b57\u0001\u0000\u0000\u0000\u0b57\u0b58\u0001\u0000\u0000\u0000\u0b58"+
		"\u0b59\u0005U\u0000\u0000\u0b59\u0b5a\u0005q\u0000\u0000\u0b5a\u0b5c\u0003"+
		"\u0100\u0080\u0000\u0b5b\u0b0a\u0001\u0000\u0000\u0000\u0b5b\u0b12\u0001"+
		"\u0000\u0000\u0000\u0b5b\u0b21\u0001\u0000\u0000\u0000\u0b5b\u0b29\u0001"+
		"\u0000\u0000\u0000\u0b5b\u0b2e\u0001\u0000\u0000\u0000\u0b5b\u0b42\u0001"+
		"\u0000\u0000\u0000\u0b5b\u0b4a\u0001\u0000\u0000\u0000\u0b5b\u0b4f\u0001"+
		"\u0000\u0000\u0000\u0b5b\u0b54\u0001\u0000\u0000\u0000\u0b5c\u00ff\u0001"+
		"\u0000\u0000\u0000\u0b5d\u0b5e\u0006\u0080\uffff\uffff\u0000\u0b5e\u0b62"+
		"\u0003\u0104\u0082\u0000\u0b5f\u0b60\u0007\u001b\u0000\u0000\u0b60\u0b62"+
		"\u0003\u0100\u0080\u0007\u0b61\u0b5d\u0001\u0000\u0000\u0000\u0b61\u0b5f"+
		"\u0001\u0000\u0000\u0000\u0b62\u0b78\u0001\u0000\u0000\u0000\u0b63\u0b64"+
		"\n\u0006\u0000\u0000\u0b64\u0b65\u0007\u001c\u0000\u0000\u0b65\u0b77\u0003"+
		"\u0100\u0080\u0007\u0b66\u0b67\n\u0005\u0000\u0000\u0b67\u0b68\u0007\u001d"+
		"\u0000\u0000\u0b68\u0b77\u0003\u0100\u0080\u0006\u0b69\u0b6a\n\u0004\u0000"+
		"\u0000\u0b6a\u0b6b\u0005\u0149\u0000\u0000\u0b6b\u0b77\u0003\u0100\u0080"+
		"\u0005\u0b6c\u0b6d\n\u0003\u0000\u0000\u0b6d\u0b6e\u0005\u014c\u0000\u0000"+
		"\u0b6e\u0b77\u0003\u0100\u0080\u0004\u0b6f\u0b70\n\u0002\u0000\u0000\u0b70"+
		"\u0b71\u0005\u014a\u0000\u0000\u0b71\u0b77\u0003\u0100\u0080\u0003\u0b72"+
		"\u0b73\n\u0001\u0000\u0000\u0b73\u0b74\u0003\u010a\u0085\u0000\u0b74\u0b75"+
		"\u0003\u0100\u0080\u0002\u0b75\u0b77\u0001\u0000\u0000\u0000\u0b76\u0b63"+
		"\u0001\u0000\u0000\u0000\u0b76\u0b66\u0001\u0000\u0000\u0000\u0b76\u0b69"+
		"\u0001\u0000\u0000\u0000\u0b76\u0b6c\u0001\u0000\u0000\u0000\u0b76\u0b6f"+
		"\u0001\u0000\u0000\u0000\u0b76\u0b72\u0001\u0000\u0000\u0000\u0b77\u0b7a"+
		"\u0001\u0000\u0000\u0000\u0b78\u0b76\u0001\u0000\u0000\u0000\u0b78\u0b79"+
		"\u0001\u0000\u0000\u0000\u0b79\u0101\u0001\u0000\u0000\u0000\u0b7a\u0b78"+
		"\u0001\u0000\u0000\u0000\u0b7b\u0b7c\u0007\u001e\u0000\u0000\u0b7c\u0103"+
		"\u0001\u0000\u0000\u0000\u0b7d\u0b7e\u0006\u0082\uffff\uffff\u0000\u0b7e"+
		"\u0c71\u0007\u001f\u0000\u0000\u0b7f\u0b80\u0007 \u0000\u0000\u0b80\u0b81"+
		"\u0005\u0002\u0000\u0000\u0b81\u0b82\u0003\u0102\u0081\u0000\u0b82\u0b83"+
		"\u0005\u0004\u0000\u0000\u0b83\u0b84\u0003\u0100\u0080\u0000\u0b84\u0b85"+
		"\u0005\u0004\u0000\u0000\u0b85\u0b86\u0003\u0100\u0080\u0000\u0b86\u0b87"+
		"\u0005\u0003\u0000\u0000\u0b87\u0c71\u0001\u0000\u0000\u0000\u0b88\u0b89"+
		"\u0007!\u0000\u0000\u0b89\u0b8a\u0005\u0002\u0000\u0000\u0b8a\u0b8b\u0003"+
		"\u0102\u0081\u0000\u0b8b\u0b8c\u0005\u0004\u0000\u0000\u0b8c\u0b8d\u0003"+
		"\u0100\u0080\u0000\u0b8d\u0b8e\u0005\u0004\u0000\u0000\u0b8e\u0b8f\u0003"+
		"\u0100\u0080\u0000\u0b8f\u0b90\u0005\u0003\u0000\u0000\u0b90\u0c71\u0001"+
		"\u0000\u0000\u0000\u0b91\u0b93\u0005%\u0000\u0000\u0b92\u0b94\u0003\u013e"+
		"\u009f\u0000\u0b93\u0b92\u0001\u0000\u0000\u0000\u0b94\u0b95\u0001\u0000"+
		"\u0000\u0000\u0b95\u0b93\u0001\u0000\u0000\u0000\u0b95\u0b96\u0001\u0000"+
		"\u0000\u0000\u0b96\u0b99\u0001\u0000\u0000\u0000\u0b97\u0b98\u0005Y\u0000"+
		"\u0000\u0b98\u0b9a\u0003\u00f8|\u0000\u0b99\u0b97\u0001\u0000\u0000\u0000"+
		"\u0b99\u0b9a\u0001\u0000\u0000\u0000\u0b9a\u0b9b\u0001\u0000\u0000\u0000"+
		"\u0b9b\u0b9c\u0005Z\u0000\u0000\u0b9c\u0c71\u0001\u0000\u0000\u0000\u0b9d"+
		"\u0b9e\u0005%\u0000\u0000\u0b9e\u0ba0\u0003\u00f8|\u0000\u0b9f\u0ba1\u0003"+
		"\u013e\u009f\u0000\u0ba0\u0b9f\u0001\u0000\u0000\u0000\u0ba1\u0ba2\u0001"+
		"\u0000\u0000\u0000\u0ba2\u0ba0\u0001\u0000\u0000\u0000\u0ba2\u0ba3\u0001"+
		"\u0000\u0000\u0000\u0ba3\u0ba6\u0001\u0000\u0000\u0000\u0ba4\u0ba5\u0005"+
		"Y\u0000\u0000\u0ba5\u0ba7\u0003\u00f8|\u0000\u0ba6\u0ba4\u0001\u0000\u0000"+
		"\u0000\u0ba6\u0ba7\u0001\u0000\u0000\u0000\u0ba7\u0ba8\u0001\u0000\u0000"+
		"\u0000\u0ba8\u0ba9\u0005Z\u0000\u0000\u0ba9\u0c71\u0001\u0000\u0000\u0000"+
		"\u0baa\u0bab\u0007\"\u0000\u0000\u0bab\u0bac\u0005\u0002\u0000\u0000\u0bac"+
		"\u0bad\u0003\u00f8|\u0000\u0bad\u0bae\u0005\u001a\u0000\u0000\u0bae\u0baf"+
		"\u0003\u0124\u0092\u0000\u0baf\u0bb0\u0005\u0003\u0000\u0000\u0bb0\u0c71"+
		"\u0001\u0000\u0000\u0000\u0bb1\u0bb2\u0005\u0102\u0000\u0000\u0bb2\u0bbb"+
		"\u0005\u0002\u0000\u0000\u0bb3\u0bb8\u0003\u00e0p\u0000\u0bb4\u0bb5\u0005"+
		"\u0004\u0000\u0000\u0bb5\u0bb7\u0003\u00e0p\u0000\u0bb6\u0bb4\u0001\u0000"+
		"\u0000\u0000\u0bb7\u0bba\u0001\u0000\u0000\u0000\u0bb8\u0bb6\u0001\u0000"+
		"\u0000\u0000\u0bb8\u0bb9\u0001\u0000\u0000\u0000\u0bb9\u0bbc\u0001\u0000"+
		"\u0000\u0000\u0bba\u0bb8\u0001\u0000\u0000\u0000\u0bbb\u0bb3\u0001\u0000"+
		"\u0000\u0000\u0bbb\u0bbc\u0001\u0000\u0000\u0000\u0bbc\u0bbd\u0001\u0000"+
		"\u0000\u0000\u0bbd\u0c71\u0005\u0003\u0000\u0000\u0bbe\u0bbf\u0005k\u0000"+
		"\u0000\u0bbf\u0bc0\u0005\u0002\u0000\u0000\u0bc0\u0bc3\u0003\u00f8|\u0000"+
		"\u0bc1\u0bc2\u0005~\u0000\u0000\u0bc2\u0bc4\u0005\u00b4\u0000\u0000\u0bc3"+
		"\u0bc1\u0001\u0000\u0000\u0000\u0bc3\u0bc4\u0001\u0000\u0000\u0000\u0bc4"+
		"\u0bc5\u0001\u0000\u0000\u0000\u0bc5\u0bc6\u0005\u0003\u0000\u0000\u0bc6"+
		"\u0c71\u0001\u0000\u0000\u0000\u0bc7\u0bc8\u0005\u0017\u0000\u0000\u0bc8"+
		"\u0bc9\u0005\u0002\u0000\u0000\u0bc9\u0bcc\u0003\u00f8|\u0000\u0bca\u0bcb"+
		"\u0005~\u0000\u0000\u0bcb\u0bcd\u0005\u00b4\u0000\u0000\u0bcc\u0bca\u0001"+
		"\u0000\u0000\u0000\u0bcc\u0bcd\u0001\u0000\u0000\u0000\u0bcd\u0bce\u0001"+
		"\u0000\u0000\u0000\u0bce\u0bcf\u0005\u0003\u0000\u0000\u0bcf\u0c71\u0001"+
		"\u0000\u0000\u0000\u0bd0\u0bd1\u0005\u008f\u0000\u0000\u0bd1\u0bd2\u0005"+
		"\u0002\u0000\u0000\u0bd2\u0bd5\u0003\u00f8|\u0000\u0bd3\u0bd4\u0005~\u0000"+
		"\u0000\u0bd4\u0bd6\u0005\u00b4\u0000\u0000\u0bd5\u0bd3\u0001\u0000\u0000"+
		"\u0000\u0bd5\u0bd6\u0001\u0000\u0000\u0000\u0bd6\u0bd7\u0001\u0000\u0000"+
		"\u0000\u0bd7\u0bd8\u0005\u0003\u0000\u0000\u0bd8\u0c71\u0001\u0000\u0000"+
		"\u0000\u0bd9\u0bda\u0005\u00cc\u0000\u0000\u0bda\u0bdb\u0005\u0002\u0000"+
		"\u0000\u0bdb\u0bdc\u0003\u0100\u0080\u0000\u0bdc\u0bdd\u0005\u0080\u0000"+
		"\u0000\u0bdd\u0bde\u0003\u0100\u0080\u0000\u0bde\u0bdf\u0005\u0003\u0000"+
		"\u0000\u0bdf\u0c71\u0001\u0000\u0000\u0000\u0be0\u0c71\u0003\u0108\u0084"+
		"\u0000\u0be1\u0c71\u0005\u0145\u0000\u0000\u0be2\u0c71\u0005\u0144\u0000"+
		"\u0000\u0be3\u0be4\u0003\u014e\u00a7\u0000\u0be4\u0be5\u0005\u0005\u0000"+
		"\u0000\u0be5\u0be6\u0005\u0144\u0000\u0000\u0be6\u0c71\u0001\u0000\u0000"+
		"\u0000\u0be7\u0be8\u0005\u0002\u0000\u0000\u0be8\u0beb\u0003\u00e0p\u0000"+
		"\u0be9\u0bea\u0005\u0004\u0000\u0000\u0bea\u0bec\u0003\u00e0p\u0000\u0beb"+
		"\u0be9\u0001\u0000\u0000\u0000\u0bec\u0bed\u0001\u0000\u0000\u0000\u0bed"+
		"\u0beb\u0001\u0000\u0000\u0000\u0bed\u0bee\u0001\u0000\u0000\u0000\u0bee"+
		"\u0bef\u0001\u0000\u0000\u0000\u0bef\u0bf0\u0005\u0003\u0000\u0000\u0bf0"+
		"\u0c71\u0001\u0000\u0000\u0000\u0bf1\u0bf2\u0005\u0002\u0000\u0000\u0bf2"+
		"\u0bf3\u0003$\u0012\u0000\u0bf3\u0bf4\u0005\u0003\u0000\u0000\u0bf4\u0c71"+
		"\u0001\u0000\u0000\u0000\u0bf5\u0bf6\u0003\u014c\u00a6\u0000\u0bf6\u0c02"+
		"\u0005\u0002\u0000\u0000\u0bf7\u0bf9\u0003\u00aeW\u0000\u0bf8\u0bf7\u0001"+
		"\u0000\u0000\u0000\u0bf8\u0bf9\u0001\u0000\u0000\u0000\u0bf9\u0bfa\u0001"+
		"\u0000\u0000\u0000\u0bfa\u0bff\u0003\u00f8|\u0000\u0bfb\u0bfc\u0005\u0004"+
		"\u0000\u0000\u0bfc\u0bfe\u0003\u00f8|\u0000\u0bfd\u0bfb\u0001\u0000\u0000"+
		"\u0000\u0bfe\u0c01\u0001\u0000\u0000\u0000\u0bff\u0bfd\u0001\u0000\u0000"+
		"\u0000\u0bff\u0c00\u0001\u0000\u0000\u0000\u0c00\u0c03\u0001\u0000\u0000"+
		"\u0000\u0c01\u0bff\u0001\u0000\u0000\u0000\u0c02\u0bf8\u0001\u0000\u0000"+
		"\u0000\u0c02\u0c03\u0001\u0000\u0000\u0000\u0c03\u0c04\u0001\u0000\u0000"+
		"\u0000\u0c04\u0c0b\u0005\u0003\u0000\u0000\u0c05\u0c06\u0005i\u0000\u0000"+
		"\u0c06\u0c07\u0005\u0002\u0000\u0000\u0c07\u0c08\u0005\u0133\u0000\u0000"+
		"\u0c08\u0c09\u0003\u00fc~\u0000\u0c09\u0c0a\u0005\u0003\u0000\u0000\u0c0a"+
		"\u0c0c\u0001\u0000\u0000\u0000\u0c0b\u0c05\u0001\u0000\u0000\u0000\u0c0b"+
		"\u0c0c\u0001\u0000\u0000\u0000\u0c0c\u0c0f\u0001\u0000\u0000\u0000\u0c0d"+
		"\u0c0e\u0007#\u0000\u0000\u0c0e\u0c10\u0005\u00b4\u0000\u0000\u0c0f\u0c0d"+
		"\u0001\u0000\u0000\u0000\u0c0f\u0c10\u0001\u0000\u0000\u0000\u0c10\u0c13"+
		"\u0001\u0000\u0000\u0000\u0c11\u0c12\u0005\u00c0\u0000\u0000\u0c12\u0c14"+
		"\u0003\u0144\u00a2\u0000\u0c13\u0c11\u0001\u0000\u0000\u0000\u0c13\u0c14"+
		"\u0001\u0000\u0000\u0000\u0c14\u0c71\u0001\u0000\u0000\u0000\u0c15\u0c16"+
		"\u0003\u0154\u00aa\u0000\u0c16\u0c17\u0005\u014e\u0000\u0000\u0c17\u0c18"+
		"\u0003\u00f8|\u0000\u0c18\u0c71\u0001\u0000\u0000\u0000\u0c19\u0c1a\u0005"+
		"\u0002\u0000\u0000\u0c1a\u0c1d\u0003\u0154\u00aa\u0000\u0c1b\u0c1c\u0005"+
		"\u0004\u0000\u0000\u0c1c\u0c1e\u0003\u0154\u00aa\u0000\u0c1d\u0c1b\u0001"+
		"\u0000\u0000\u0000\u0c1e\u0c1f\u0001\u0000\u0000\u0000\u0c1f\u0c1d\u0001"+
		"\u0000\u0000\u0000\u0c1f\u0c20\u0001\u0000\u0000\u0000\u0c20\u0c21\u0001"+
		"\u0000\u0000\u0000\u0c21\u0c22\u0005\u0003\u0000\u0000\u0c22\u0c23\u0005"+
		"\u014e\u0000\u0000\u0c23\u0c24\u0003\u00f8|\u0000\u0c24\u0c71\u0001\u0000"+
		"\u0000\u0000\u0c25\u0c71\u0003\u0154\u00aa\u0000\u0c26\u0c27\u0005\u0006"+
		"\u0000\u0000\u0c27\u0c28\u0003\u0106\u0083\u0000\u0c28\u0c29\u0005\u0007"+
		"\u0000\u0000\u0c29\u0c71\u0001\u0000\u0000\u0000\u0c2a\u0c2b\u0005\u0002"+
		"\u0000\u0000\u0c2b\u0c2c\u0003\u00f8|\u0000\u0c2c\u0c2d\u0005\u0003\u0000"+
		"\u0000\u0c2d\u0c71\u0001\u0000\u0000\u0000\u0c2e\u0c2f\u0005e\u0000\u0000"+
		"\u0c2f\u0c30\u0005\u0002\u0000\u0000\u0c30\u0c31\u0003\u0154\u00aa\u0000"+
		"\u0c31\u0c32\u0005q\u0000\u0000\u0c32\u0c33\u0003\u0100\u0080\u0000\u0c33"+
		"\u0c34\u0005\u0003\u0000\u0000\u0c34\u0c71\u0001\u0000\u0000\u0000\u0c35"+
		"\u0c36\u0007$\u0000\u0000\u0c36\u0c37\u0005\u0002\u0000\u0000\u0c37\u0c38"+
		"\u0003\u0100\u0080\u0000\u0c38\u0c39\u0007%\u0000\u0000\u0c39\u0c3c\u0003"+
		"\u0100\u0080\u0000\u0c3a\u0c3b\u0007&\u0000\u0000\u0c3b\u0c3d\u0003\u0100"+
		"\u0080\u0000\u0c3c\u0c3a\u0001\u0000\u0000\u0000\u0c3c\u0c3d\u0001\u0000"+
		"\u0000\u0000\u0c3d\u0c3e\u0001\u0000\u0000\u0000\u0c3e\u0c3f\u0005\u0003"+
		"\u0000\u0000\u0c3f\u0c71\u0001\u0000\u0000\u0000\u0c40\u0c41\u0005\u011a"+
		"\u0000\u0000\u0c41\u0c43\u0005\u0002\u0000\u0000\u0c42\u0c44\u0007\'\u0000"+
		"\u0000\u0c43\u0c42\u0001\u0000\u0000\u0000\u0c43\u0c44\u0001\u0000\u0000"+
		"\u0000\u0c44\u0c46\u0001\u0000\u0000\u0000\u0c45\u0c47\u0003\u0100\u0080"+
		"\u0000\u0c46\u0c45\u0001\u0000\u0000\u0000\u0c46\u0c47\u0001\u0000\u0000"+
		"\u0000\u0c47\u0c48\u0001\u0000\u0000\u0000\u0c48\u0c49\u0005q\u0000\u0000"+
		"\u0c49\u0c4a\u0003\u0100\u0080\u0000\u0c4a\u0c4b\u0005\u0003\u0000\u0000"+
		"\u0c4b\u0c71\u0001\u0000\u0000\u0000\u0c4c\u0c4d\u0005\u00c2\u0000\u0000"+
		"\u0c4d\u0c4e\u0005\u0002\u0000\u0000\u0c4e\u0c4f\u0003\u0100\u0080\u0000"+
		"\u0c4f\u0c50\u0005\u00cb\u0000\u0000\u0c50\u0c51\u0003\u0100\u0080\u0000"+
		"\u0c51\u0c52\u0005q\u0000\u0000\u0c52\u0c55\u0003\u0100\u0080\u0000\u0c53"+
		"\u0c54\u0005m\u0000\u0000\u0c54\u0c56\u0003\u0100\u0080\u0000\u0c55\u0c53"+
		"\u0001\u0000\u0000\u0000\u0c55\u0c56\u0001\u0000\u0000\u0000\u0c56\u0c57"+
		"\u0001\u0000\u0000\u0000\u0c57\u0c58\u0005\u0003\u0000\u0000\u0c58\u0c71"+
		"\u0001\u0000\u0000\u0000\u0c59\u0c5a\u0007(\u0000\u0000\u0c5a\u0c5b\u0005"+
		"\u0002\u0000\u0000\u0c5b\u0c5c\u0003\u0100\u0080\u0000\u0c5c\u0c5d\u0005"+
		"\u0003\u0000\u0000\u0c5d\u0c5e\u0005\u0136\u0000\u0000\u0c5e\u0c5f\u0005"+
		"x\u0000\u0000\u0c5f\u0c60\u0005\u0002\u0000\u0000\u0c60\u0c61\u0005\u00bc"+
		"\u0000\u0000\u0c61\u0c62\u0005\"\u0000\u0000\u0c62\u0c63\u0003\\.\u0000"+
		"\u0c63\u0c6a\u0005\u0003\u0000\u0000\u0c64\u0c65\u0005i\u0000\u0000\u0c65"+
		"\u0c66\u0005\u0002\u0000\u0000\u0c66\u0c67\u0005\u0133\u0000\u0000\u0c67"+
		"\u0c68\u0003\u00fc~\u0000\u0c68\u0c69\u0005\u0003\u0000\u0000\u0c69\u0c6b"+
		"\u0001\u0000\u0000\u0000\u0c6a\u0c64\u0001\u0000\u0000\u0000\u0c6a\u0c6b"+
		"\u0001\u0000\u0000\u0000\u0c6b\u0c6e\u0001\u0000\u0000\u0000\u0c6c\u0c6d"+
		"\u0005\u00c0\u0000\u0000\u0c6d\u0c6f\u0003\u0144\u00a2\u0000\u0c6e\u0c6c"+
		"\u0001\u0000\u0000\u0000\u0c6e\u0c6f\u0001\u0000\u0000\u0000\u0c6f\u0c71"+
		"\u0001\u0000\u0000\u0000\u0c70\u0b7d\u0001\u0000\u0000\u0000\u0c70\u0b7f"+
		"\u0001\u0000\u0000\u0000\u0c70\u0b88\u0001\u0000\u0000\u0000\u0c70\u0b91"+
		"\u0001\u0000\u0000\u0000\u0c70\u0b9d\u0001\u0000\u0000\u0000\u0c70\u0baa"+
		"\u0001\u0000\u0000\u0000\u0c70\u0bb1\u0001\u0000\u0000\u0000\u0c70\u0bbe"+
		"\u0001\u0000\u0000\u0000\u0c70\u0bc7\u0001\u0000\u0000\u0000\u0c70\u0bd0"+
		"\u0001\u0000\u0000\u0000\u0c70\u0bd9\u0001\u0000\u0000\u0000\u0c70\u0be0"+
		"\u0001\u0000\u0000\u0000\u0c70\u0be1\u0001\u0000\u0000\u0000\u0c70\u0be2"+
		"\u0001\u0000\u0000\u0000\u0c70\u0be3\u0001\u0000\u0000\u0000\u0c70\u0be7"+
		"\u0001\u0000\u0000\u0000\u0c70\u0bf1\u0001\u0000\u0000\u0000\u0c70\u0bf5"+
		"\u0001\u0000\u0000\u0000\u0c70\u0c15\u0001\u0000\u0000\u0000\u0c70\u0c19"+
		"\u0001\u0000\u0000\u0000\u0c70\u0c25\u0001\u0000\u0000\u0000\u0c70\u0c26"+
		"\u0001\u0000\u0000\u0000\u0c70\u0c2a\u0001\u0000\u0000\u0000\u0c70\u0c2e"+
		"\u0001\u0000\u0000\u0000\u0c70\u0c35\u0001\u0000\u0000\u0000\u0c70\u0c40"+
		"\u0001\u0000\u0000\u0000\u0c70\u0c4c\u0001\u0000\u0000\u0000\u0c70\u0c59"+
		"\u0001\u0000\u0000\u0000\u0c71\u0c7c\u0001\u0000\u0000\u0000\u0c72\u0c73"+
		"\n\n\u0000\u0000\u0c73\u0c74\u0005\u0006\u0000\u0000\u0c74\u0c75\u0003"+
		"\u0100\u0080\u0000\u0c75\u0c76\u0005\u0007\u0000\u0000\u0c76\u0c7b\u0001"+
		"\u0000\u0000\u0000\u0c77\u0c78\n\u0007\u0000\u0000\u0c78\u0c79\u0005\u0005"+
		"\u0000\u0000\u0c79\u0c7b\u0003\u0154\u00aa\u0000\u0c7a\u0c72\u0001\u0000"+
		"\u0000\u0000\u0c7a\u0c77\u0001\u0000\u0000\u0000\u0c7b\u0c7e\u0001\u0000"+
		"\u0000\u0000\u0c7c\u0c7a\u0001\u0000\u0000\u0000\u0c7c\u0c7d\u0001\u0000"+
		"\u0000\u0000\u0c7d\u0105\u0001\u0000\u0000\u0000\u0c7e\u0c7c\u0001\u0000"+
		"\u0000\u0000\u0c7f\u0c84\u0003\u0104\u0082\u0000\u0c80\u0c81\u0005\u0004"+
		"\u0000\u0000\u0c81\u0c83\u0003\u0104\u0082\u0000\u0c82\u0c80\u0001\u0000"+
		"\u0000\u0000\u0c83\u0c86\u0001\u0000\u0000\u0000\u0c84\u0c82\u0001\u0000"+
		"\u0000\u0000\u0c84\u0c85\u0001\u0000\u0000\u0000\u0c85\u0107\u0001\u0000"+
		"\u0000\u0000\u0c86\u0c84\u0001\u0000\u0000\u0000\u0c87\u0c97\u0005\u00b3"+
		"\u0000\u0000\u0c88\u0c89\u0005\u014d\u0000\u0000\u0c89\u0c97\u0003\u0154"+
		"\u00aa\u0000\u0c8a\u0c97\u0003\u0112\u0089\u0000\u0c8b\u0c8c\u0003\u0154"+
		"\u00aa\u0000\u0c8c\u0c8d\u0003\u0160\u00b0\u0000\u0c8d\u0c97\u0001\u0000"+
		"\u0000\u0000\u0c8e\u0c97\u0003\u015c\u00ae\u0000\u0c8f\u0c97\u0003\u0110"+
		"\u0088\u0000\u0c90\u0c92\u0003\u0160\u00b0\u0000\u0c91\u0c90\u0001\u0000"+
		"\u0000\u0000\u0c92\u0c93\u0001\u0000\u0000\u0000\u0c93\u0c91\u0001\u0000"+
		"\u0000\u0000\u0c93\u0c94\u0001\u0000\u0000\u0000\u0c94\u0c97\u0001\u0000"+
		"\u0000\u0000\u0c95\u0c97\u0005\t\u0000\u0000\u0c96\u0c87\u0001\u0000\u0000"+
		"\u0000\u0c96\u0c88\u0001\u0000\u0000\u0000\u0c96\u0c8a\u0001\u0000\u0000"+
		"\u0000\u0c96\u0c8b\u0001\u0000\u0000\u0000\u0c96\u0c8e\u0001\u0000\u0000"+
		"\u0000\u0c96\u0c8f\u0001\u0000\u0000\u0000\u0c96\u0c91\u0001\u0000\u0000"+
		"\u0000\u0c96\u0c95\u0001\u0000\u0000\u0000\u0c97\u0109\u0001\u0000\u0000"+
		"\u0000\u0c98\u0c99\u0007)\u0000\u0000\u0c99\u010b\u0001\u0000\u0000\u0000"+
		"\u0c9a\u0c9b\u0007*\u0000\u0000\u0c9b\u010d\u0001\u0000\u0000\u0000\u0c9c"+
		"\u0c9d\u0007+\u0000\u0000\u0c9d\u010f\u0001\u0000\u0000\u0000\u0c9e\u0c9f"+
		"\u0007,\u0000\u0000\u0c9f\u0111\u0001\u0000\u0000\u0000\u0ca0\u0ca3\u0005"+
		"\u0089\u0000\u0000\u0ca1\u0ca4\u0003\u0114\u008a\u0000\u0ca2\u0ca4\u0003"+
		"\u0118\u008c\u0000\u0ca3\u0ca1\u0001\u0000\u0000\u0000\u0ca3\u0ca2\u0001"+
		"\u0000\u0000\u0000\u0ca4\u0113\u0001\u0000\u0000\u0000\u0ca5\u0ca7\u0003"+
		"\u0116\u008b\u0000\u0ca6\u0ca8\u0003\u011a\u008d\u0000\u0ca7\u0ca6\u0001"+
		"\u0000\u0000\u0000\u0ca7\u0ca8\u0001\u0000\u0000\u0000\u0ca8\u0115\u0001"+
		"\u0000\u0000\u0000\u0ca9\u0caa\u0003\u011c\u008e\u0000\u0caa\u0cab\u0003"+
		"\u011e\u008f\u0000\u0cab\u0cad\u0001\u0000\u0000\u0000\u0cac\u0ca9\u0001"+
		"\u0000\u0000\u0000\u0cad\u0cae\u0001\u0000\u0000\u0000\u0cae\u0cac\u0001"+
		"\u0000\u0000\u0000\u0cae\u0caf\u0001\u0000\u0000\u0000\u0caf\u0117\u0001"+
		"\u0000\u0000\u0000\u0cb0\u0cb3\u0003\u011a\u008d\u0000\u0cb1\u0cb4\u0003"+
		"\u0116\u008b\u0000\u0cb2\u0cb4\u0003\u011a\u008d\u0000\u0cb3\u0cb1\u0001"+
		"\u0000\u0000\u0000\u0cb3\u0cb2\u0001\u0000\u0000\u0000\u0cb3\u0cb4\u0001"+
		"\u0000\u0000\u0000\u0cb4\u0119\u0001\u0000\u0000\u0000\u0cb5\u0cb6\u0003"+
		"\u011c\u008e\u0000\u0cb6\u0cb7\u0003\u0120\u0090\u0000\u0cb7\u0cb8\u0005"+
		"\u0114\u0000\u0000\u0cb8\u0cb9\u0003\u0120\u0090\u0000\u0cb9\u011b\u0001"+
		"\u0000\u0000\u0000\u0cba\u0cbc\u0007-\u0000\u0000\u0cbb\u0cba\u0001\u0000"+
		"\u0000\u0000\u0cbb\u0cbc\u0001\u0000\u0000\u0000\u0cbc\u0cc0\u0001\u0000"+
		"\u0000\u0000\u0cbd\u0cc1\u0005\u0156\u0000\u0000\u0cbe\u0cc1\u0005\u0158"+
		"\u0000\u0000\u0cbf\u0cc1\u0003\u0160\u00b0\u0000\u0cc0\u0cbd\u0001\u0000"+
		"\u0000\u0000\u0cc0\u0cbe\u0001\u0000\u0000\u0000\u0cc0\u0cbf\u0001\u0000"+
		"\u0000\u0000\u0cc1\u011d\u0001\u0000\u0000\u0000\u0cc2\u0cc3\u0007.\u0000"+
		"\u0000\u0cc3\u011f\u0001\u0000\u0000\u0000\u0cc4\u0cc5\u0007/\u0000\u0000"+
		"\u0cc5\u0121\u0001\u0000\u0000\u0000\u0cc6\u0cca\u0005k\u0000\u0000\u0cc7"+
		"\u0cc8\u0005\u000f\u0000\u0000\u0cc8\u0cca\u0003\u0150\u00a8\u0000\u0cc9"+
		"\u0cc6\u0001\u0000\u0000\u0000\u0cc9\u0cc7\u0001\u0000\u0000\u0000\u0cca"+
		"\u0123\u0001\u0000\u0000\u0000\u0ccb\u0ccc\u0005\u0019\u0000\u0000\u0ccc"+
		"\u0ccd\u0005\u013e\u0000\u0000\u0ccd\u0cce\u0003\u0124\u0092\u0000\u0cce"+
		"\u0ccf\u0005\u0140\u0000\u0000\u0ccf\u0cfa\u0001\u0000\u0000\u0000\u0cd0"+
		"\u0cd1\u0005\u00a0\u0000\u0000\u0cd1\u0cd2\u0005\u013e\u0000\u0000\u0cd2"+
		"\u0cd3\u0003\u0124\u0092\u0000\u0cd3\u0cd4\u0005\u0004\u0000\u0000\u0cd4"+
		"\u0cd5\u0003\u0124\u0092\u0000\u0cd5\u0cd6\u0005\u0140\u0000\u0000\u0cd6"+
		"\u0cfa\u0001\u0000\u0000\u0000\u0cd7\u0cde\u0005\u0102\u0000\u0000\u0cd8"+
		"\u0cda\u0005\u013e\u0000\u0000\u0cd9\u0cdb\u0003\u013a\u009d\u0000\u0cda"+
		"\u0cd9\u0001\u0000\u0000\u0000\u0cda\u0cdb\u0001\u0000\u0000\u0000\u0cdb"+
		"\u0cdc\u0001\u0000\u0000\u0000\u0cdc\u0cdf\u0005\u0140\u0000\u0000\u0cdd"+
		"\u0cdf\u0005\u013c\u0000\u0000\u0cde\u0cd8\u0001\u0000\u0000\u0000\u0cde"+
		"\u0cdd\u0001\u0000\u0000\u0000\u0cdf\u0cfa\u0001\u0000\u0000\u0000\u0ce0"+
		"\u0ce1\u0005\u0089\u0000\u0000\u0ce1\u0ce4\u00070\u0000\u0000\u0ce2\u0ce3"+
		"\u0005\u0114\u0000\u0000\u0ce3\u0ce5\u0005\u00a9\u0000\u0000\u0ce4\u0ce2"+
		"\u0001\u0000\u0000\u0000\u0ce4\u0ce5\u0001\u0000\u0000\u0000\u0ce5\u0cfa"+
		"\u0001\u0000\u0000\u0000\u0ce6\u0ce7\u0005\u0089\u0000\u0000\u0ce7\u0cea"+
		"\u00071\u0000\u0000\u0ce8\u0ce9\u0005\u0114\u0000\u0000\u0ce9\u0ceb\u0007"+
		"2\u0000\u0000\u0cea\u0ce8\u0001\u0000\u0000\u0000\u0cea\u0ceb\u0001\u0000"+
		"\u0000\u0000\u0ceb\u0cfa\u0001\u0000\u0000\u0000\u0cec\u0cf7\u0003\u0154"+
		"\u00aa\u0000\u0ced\u0cee\u0005\u0002\u0000\u0000\u0cee\u0cf3\u0005\u0156"+
		"\u0000\u0000\u0cef\u0cf0\u0005\u0004\u0000\u0000\u0cf0\u0cf2\u0005\u0156"+
		"\u0000\u0000\u0cf1\u0cef\u0001\u0000\u0000\u0000\u0cf2\u0cf5\u0001\u0000"+
		"\u0000\u0000\u0cf3\u0cf1\u0001\u0000\u0000\u0000\u0cf3\u0cf4\u0001\u0000"+
		"\u0000\u0000\u0cf4\u0cf6\u0001\u0000\u0000\u0000\u0cf5\u0cf3\u0001\u0000"+
		"\u0000\u0000\u0cf6\u0cf8\u0005\u0003\u0000\u0000\u0cf7\u0ced\u0001\u0000"+
		"\u0000\u0000\u0cf7\u0cf8\u0001\u0000\u0000\u0000\u0cf8\u0cfa\u0001\u0000"+
		"\u0000\u0000\u0cf9\u0ccb\u0001\u0000\u0000\u0000\u0cf9\u0cd0\u0001\u0000"+
		"\u0000\u0000\u0cf9\u0cd7\u0001\u0000\u0000\u0000\u0cf9\u0ce0\u0001\u0000"+
		"\u0000\u0000\u0cf9\u0ce6\u0001\u0000\u0000\u0000\u0cf9\u0cec\u0001\u0000"+
		"\u0000\u0000\u0cfa\u0125\u0001\u0000\u0000\u0000\u0cfb\u0d00\u0003\u0128"+
		"\u0094\u0000\u0cfc\u0cfd\u0005\u0004\u0000\u0000\u0cfd\u0cff\u0003\u0128"+
		"\u0094\u0000\u0cfe\u0cfc\u0001\u0000\u0000\u0000\u0cff\u0d02\u0001\u0000"+
		"\u0000\u0000\u0d00\u0cfe\u0001\u0000\u0000\u0000\u0d00\u0d01\u0001\u0000"+
		"\u0000\u0000\u0d01\u0127\u0001\u0000\u0000\u0000\u0d02\u0d00\u0001\u0000"+
		"\u0000\u0000\u0d03\u0d04\u0003\u00d6k\u0000\u0d04\u0d08\u0003\u0124\u0092"+
		"\u0000\u0d05\u0d07\u0003\u012a\u0095\u0000\u0d06\u0d05\u0001\u0000\u0000"+
		"\u0000\u0d07\u0d0a\u0001\u0000\u0000\u0000\u0d08\u0d06\u0001\u0000\u0000"+
		"\u0000\u0d08\u0d09\u0001\u0000\u0000\u0000\u0d09\u0129\u0001\u0000\u0000"+
		"\u0000\u0d0a\u0d08\u0001\u0000\u0000\u0000\u0d0b\u0d0c\u0005\u00b2\u0000"+
		"\u0000\u0d0c\u0d11\u0005\u00b3\u0000\u0000\u0d0d\u0d11\u0003\u012c\u0096"+
		"\u0000\u0d0e\u0d11\u0003\"\u0011\u0000\u0d0f\u0d11\u0003\u0122\u0091\u0000"+
		"\u0d10\u0d0b\u0001\u0000\u0000\u0000\u0d10\u0d0d\u0001\u0000\u0000\u0000"+
		"\u0d10\u0d0e\u0001\u0000\u0000\u0000\u0d10\u0d0f\u0001\u0000\u0000\u0000"+
		"\u0d11\u012b\u0001\u0000\u0000\u0000\u0d12\u0d13\u0005L\u0000\u0000\u0d13"+
		"\u0d14\u0003\u00f8|\u0000\u0d14\u012d\u0001\u0000\u0000\u0000\u0d15\u0d1a"+
		"\u0003\u0130\u0098\u0000\u0d16\u0d17\u0005\u0004\u0000\u0000\u0d17\u0d19"+
		"\u0003\u0130\u0098\u0000\u0d18\u0d16\u0001\u0000\u0000\u0000\u0d19\u0d1c"+
		"\u0001\u0000\u0000\u0000\u0d1a\u0d18\u0001\u0000\u0000\u0000\u0d1a\u0d1b"+
		"\u0001\u0000\u0000\u0000\u0d1b\u012f\u0001\u0000\u0000\u0000\u0d1c\u0d1a"+
		"\u0001\u0000\u0000\u0000\u0d1d\u0d1e\u0003\u0150\u00a8\u0000\u0d1e\u0d21"+
		"\u0003\u0124\u0092\u0000\u0d1f\u0d20\u0005\u00b2\u0000\u0000\u0d20\u0d22"+
		"\u0005\u00b3\u0000\u0000\u0d21\u0d1f\u0001\u0000\u0000\u0000\u0d21\u0d22"+
		"\u0001\u0000\u0000\u0000\u0d22\u0d24\u0001\u0000\u0000\u0000\u0d23\u0d25"+
		"\u0003\"\u0011\u0000\u0d24\u0d23\u0001\u0000\u0000\u0000\u0d24\u0d25\u0001"+
		"\u0000\u0000\u0000\u0d25\u0131\u0001\u0000\u0000\u0000\u0d26\u0d2b\u0003"+
		"\u0134\u009a\u0000\u0d27\u0d28\u0005\u0004\u0000\u0000\u0d28\u0d2a\u0003"+
		"\u0134\u009a\u0000\u0d29\u0d27\u0001\u0000\u0000\u0000\u0d2a\u0d2d\u0001"+
		"\u0000\u0000\u0000\u0d2b\u0d29\u0001\u0000\u0000\u0000\u0d2b\u0d2c\u0001"+
		"\u0000\u0000\u0000\u0d2c\u0133\u0001\u0000\u0000\u0000\u0d2d\u0d2b\u0001"+
		"\u0000\u0000\u0000\u0d2e\u0d2f\u0003\u0150\u00a8\u0000\u0d2f\u0d33\u0003"+
		"\u0124\u0092\u0000\u0d30\u0d32\u0003\u0136\u009b\u0000\u0d31\u0d30\u0001"+
		"\u0000\u0000\u0000\u0d32\u0d35\u0001\u0000\u0000\u0000\u0d33\u0d31\u0001"+
		"\u0000\u0000\u0000\u0d33\u0d34\u0001\u0000\u0000\u0000\u0d34\u0135\u0001"+
		"\u0000\u0000\u0000\u0d35\u0d33\u0001\u0000\u0000\u0000\u0d36\u0d37\u0005"+
		"\u00b2\u0000\u0000\u0d37\u0d3c\u0005\u00b3\u0000\u0000\u0d38\u0d3c\u0003"+
		"\u012c\u0096\u0000\u0d39\u0d3c\u0003\u0138\u009c\u0000\u0d3a\u0d3c\u0003"+
		"\"\u0011\u0000\u0d3b\u0d36\u0001\u0000\u0000\u0000\u0d3b\u0d38\u0001\u0000"+
		"\u0000\u0000\u0d3b\u0d39\u0001\u0000\u0000\u0000\u0d3b\u0d3a\u0001\u0000"+
		"\u0000\u0000\u0d3c\u0137\u0001\u0000\u0000\u0000\u0d3d\u0d3e\u0005u\u0000"+
		"\u0000\u0d3e\u0d3f\u0005\u0012\u0000\u0000\u0d3f\u0d40\u0005\u001a\u0000"+
		"\u0000\u0d40\u0d41\u0005\u0002\u0000\u0000\u0d41\u0d42\u0003\u00f8|\u0000"+
		"\u0d42\u0d43\u0005\u0003\u0000\u0000\u0d43\u0139\u0001\u0000\u0000\u0000"+
		"\u0d44\u0d49\u0003\u013c\u009e\u0000\u0d45\u0d46\u0005\u0004\u0000\u0000"+
		"\u0d46\u0d48\u0003\u013c\u009e\u0000\u0d47\u0d45\u0001\u0000\u0000\u0000"+
		"\u0d48\u0d4b\u0001\u0000\u0000\u0000\u0d49\u0d47\u0001\u0000\u0000\u0000"+
		"\u0d49\u0d4a\u0001\u0000\u0000\u0000\u0d4a\u013b\u0001\u0000\u0000\u0000"+
		"\u0d4b\u0d49\u0001\u0000\u0000\u0000\u0d4c\u0d4e\u0003\u0154\u00aa\u0000"+
		"\u0d4d\u0d4f\u0005\u014d\u0000\u0000\u0d4e\u0d4d\u0001\u0000\u0000\u0000"+
		"\u0d4e\u0d4f\u0001\u0000\u0000\u0000\u0d4f\u0d50\u0001\u0000\u0000\u0000"+
		"\u0d50\u0d53\u0003\u0124\u0092\u0000\u0d51\u0d52\u0005\u00b2\u0000\u0000"+
		"\u0d52\u0d54\u0005\u00b3\u0000\u0000\u0d53\u0d51\u0001\u0000\u0000\u0000"+
		"\u0d53\u0d54\u0001\u0000\u0000\u0000\u0d54\u0d56\u0001\u0000\u0000\u0000"+
		"\u0d55\u0d57\u0003\"\u0011\u0000\u0d56\u0d55\u0001\u0000\u0000\u0000\u0d56"+
		"\u0d57\u0001\u0000\u0000\u0000\u0d57\u013d\u0001\u0000\u0000\u0000\u0d58"+
		"\u0d59\u0005\u0132\u0000\u0000\u0d59\u0d5a\u0003\u00f8|\u0000\u0d5a\u0d5b"+
		"\u0005\u010f\u0000\u0000\u0d5b\u0d5c\u0003\u00f8|\u0000\u0d5c\u013f\u0001"+
		"\u0000\u0000\u0000\u0d5d\u0d5e\u0005\u0134\u0000\u0000\u0d5e\u0d63\u0003"+
		"\u0142\u00a1\u0000\u0d5f\u0d60\u0005\u0004\u0000\u0000\u0d60\u0d62\u0003"+
		"\u0142\u00a1\u0000\u0d61\u0d5f\u0001\u0000\u0000\u0000\u0d62\u0d65\u0001"+
		"\u0000\u0000\u0000\u0d63\u0d61\u0001\u0000\u0000\u0000\u0d63\u0d64\u0001"+
		"\u0000\u0000\u0000\u0d64\u0141\u0001\u0000\u0000\u0000\u0d65\u0d63\u0001"+
		"\u0000\u0000\u0000\u0d66\u0d67\u0003\u0150\u00a8\u0000\u0d67\u0d68\u0005"+
		"\u001a\u0000\u0000\u0d68\u0d69\u0003\u0144\u00a2\u0000\u0d69\u0143\u0001"+
		"\u0000\u0000\u0000\u0d6a\u0d99\u0003\u0150\u00a8\u0000\u0d6b\u0d6c\u0005"+
		"\u0002\u0000\u0000\u0d6c\u0d6d\u0003\u0150\u00a8\u0000\u0d6d\u0d6e\u0005"+
		"\u0003\u0000\u0000\u0d6e\u0d99\u0001\u0000\u0000\u0000\u0d6f\u0d92\u0005"+
		"\u0002\u0000\u0000\u0d70\u0d71\u0005,\u0000\u0000\u0d71\u0d72\u0005\""+
		"\u0000\u0000\u0d72\u0d77\u0003\u00f8|\u0000\u0d73\u0d74\u0005\u0004\u0000"+
		"\u0000\u0d74\u0d76\u0003\u00f8|\u0000\u0d75\u0d73\u0001\u0000\u0000\u0000"+
		"\u0d76\u0d79\u0001\u0000\u0000\u0000\u0d77\u0d75\u0001\u0000\u0000\u0000"+
		"\u0d77\u0d78\u0001\u0000\u0000\u0000\u0d78\u0d93\u0001\u0000\u0000\u0000"+
		"\u0d79\u0d77\u0001\u0000\u0000\u0000\u0d7a\u0d7b\u00073\u0000\u0000\u0d7b"+
		"\u0d7c\u0005\"\u0000\u0000\u0d7c\u0d81\u0003\u00f8|\u0000\u0d7d\u0d7e"+
		"\u0005\u0004\u0000\u0000\u0d7e\u0d80\u0003\u00f8|\u0000\u0d7f\u0d7d\u0001"+
		"\u0000\u0000\u0000\u0d80\u0d83\u0001\u0000\u0000\u0000\u0d81\u0d7f\u0001"+
		"\u0000\u0000\u0000\u0d81\u0d82\u0001\u0000\u0000\u0000\u0d82\u0d85\u0001"+
		"\u0000\u0000\u0000\u0d83\u0d81\u0001\u0000\u0000\u0000\u0d84\u0d7a\u0001"+
		"\u0000\u0000\u0000\u0d84\u0d85\u0001\u0000\u0000\u0000\u0d85\u0d90\u0001"+
		"\u0000\u0000\u0000\u0d86\u0d87\u00074\u0000\u0000\u0d87\u0d88\u0005\""+
		"\u0000\u0000\u0d88\u0d8d\u0003\\.\u0000\u0d89\u0d8a\u0005\u0004\u0000"+
		"\u0000\u0d8a\u0d8c\u0003\\.\u0000\u0d8b\u0d89\u0001\u0000\u0000\u0000"+
		"\u0d8c\u0d8f\u0001\u0000\u0000\u0000\u0d8d\u0d8b\u0001\u0000\u0000\u0000"+
		"\u0d8d\u0d8e\u0001\u0000\u0000\u0000\u0d8e\u0d91\u0001\u0000\u0000\u0000"+
		"\u0d8f\u0d8d\u0001\u0000\u0000\u0000\u0d90\u0d86\u0001\u0000\u0000\u0000"+
		"\u0d90\u0d91\u0001\u0000\u0000\u0000\u0d91\u0d93\u0001\u0000\u0000\u0000"+
		"\u0d92\u0d70\u0001\u0000\u0000\u0000\u0d92\u0d84\u0001\u0000\u0000\u0000"+
		"\u0d93\u0d95\u0001\u0000\u0000\u0000\u0d94\u0d96\u0003\u0146\u00a3\u0000"+
		"\u0d95\u0d94\u0001\u0000\u0000\u0000\u0d95\u0d96\u0001\u0000\u0000\u0000"+
		"\u0d96\u0d97\u0001\u0000\u0000\u0000\u0d97\u0d99\u0005\u0003\u0000\u0000"+
		"\u0d98\u0d6a\u0001\u0000\u0000\u0000\u0d98\u0d6b\u0001\u0000\u0000\u0000"+
		"\u0d98\u0d6f\u0001\u0000\u0000\u0000\u0d99\u0145\u0001\u0000\u0000\u0000"+
		"\u0d9a\u0d9b\u0005\u00d4\u0000\u0000\u0d9b\u0dab\u0003\u0148\u00a4\u0000"+
		"\u0d9c\u0d9d\u0005\u00ea\u0000\u0000\u0d9d\u0dab\u0003\u0148\u00a4\u0000"+
		"\u0d9e\u0d9f\u0005\u00d4\u0000\u0000\u0d9f\u0da0\u0005\u001e\u0000\u0000"+
		"\u0da0\u0da1\u0003\u0148\u00a4\u0000\u0da1\u0da2\u0005\u0014\u0000\u0000"+
		"\u0da2\u0da3\u0003\u0148\u00a4\u0000\u0da3\u0dab\u0001\u0000\u0000\u0000"+
		"\u0da4\u0da5\u0005\u00ea\u0000\u0000\u0da5\u0da6\u0005\u001e\u0000\u0000"+
		"\u0da6\u0da7\u0003\u0148\u00a4\u0000\u0da7\u0da8\u0005\u0014\u0000\u0000"+
		"\u0da8\u0da9\u0003\u0148\u00a4\u0000\u0da9\u0dab\u0001\u0000\u0000\u0000"+
		"\u0daa\u0d9a\u0001\u0000\u0000\u0000\u0daa\u0d9c\u0001\u0000\u0000\u0000"+
		"\u0daa\u0d9e\u0001\u0000\u0000\u0000\u0daa\u0da4\u0001\u0000\u0000\u0000"+
		"\u0dab\u0147\u0001\u0000\u0000\u0000\u0dac\u0dad\u0005\u0120\u0000\u0000"+
		"\u0dad\u0db4\u00075\u0000\u0000\u0dae\u0daf\u0005>\u0000\u0000\u0daf\u0db4"+
		"\u0005\u00e9\u0000\u0000\u0db0\u0db1\u0003\u00f8|\u0000\u0db1\u0db2\u0007"+
		"5\u0000\u0000\u0db2\u0db4\u0001\u0000\u0000\u0000\u0db3\u0dac\u0001\u0000"+
		"\u0000\u0000\u0db3\u0dae\u0001\u0000\u0000\u0000\u0db3\u0db0\u0001\u0000"+
		"\u0000\u0000\u0db4\u0149\u0001\u0000\u0000\u0000\u0db5\u0dba\u0003\u014e"+
		"\u00a7\u0000\u0db6\u0db7\u0005\u0004\u0000\u0000\u0db7\u0db9\u0003\u014e"+
		"\u00a7\u0000\u0db8\u0db6\u0001\u0000\u0000\u0000\u0db9\u0dbc\u0001\u0000"+
		"\u0000\u0000\u0dba\u0db8\u0001\u0000\u0000\u0000\u0dba\u0dbb\u0001\u0000"+
		"\u0000\u0000\u0dbb\u014b\u0001\u0000\u0000\u0000\u0dbc\u0dba\u0001\u0000"+
		"\u0000\u0000\u0dbd\u0dc2\u0003\u014e\u00a7\u0000\u0dbe\u0dc2\u0005i\u0000"+
		"\u0000\u0dbf\u0dc2\u0005\u0093\u0000\u0000\u0dc0\u0dc2\u0005\u00e3\u0000"+
		"\u0000\u0dc1\u0dbd\u0001\u0000\u0000\u0000\u0dc1\u0dbe\u0001\u0000\u0000"+
		"\u0000\u0dc1\u0dbf\u0001\u0000\u0000\u0000\u0dc1\u0dc0\u0001\u0000\u0000"+
		"\u0000\u0dc2\u014d\u0001\u0000\u0000\u0000\u0dc3\u0dc8\u0003\u0154\u00aa"+
		"\u0000\u0dc4\u0dc5\u0005\u0005\u0000\u0000\u0dc5\u0dc7\u0003\u0154\u00aa"+
		"\u0000\u0dc6\u0dc4\u0001\u0000\u0000\u0000\u0dc7\u0dca\u0001\u0000\u0000"+
		"\u0000\u0dc8\u0dc6\u0001\u0000\u0000\u0000\u0dc8\u0dc9\u0001\u0000\u0000"+
		"\u0000\u0dc9\u014f\u0001\u0000\u0000\u0000\u0dca\u0dc8\u0001\u0000\u0000"+
		"\u0000\u0dcb\u0dcc\u0003\u0154\u00aa\u0000\u0dcc\u0dcd\u0003\u0152\u00a9"+
		"\u0000\u0dcd\u0151\u0001\u0000\u0000\u0000\u0dce\u0dcf\u0005\u0143\u0000"+
		"\u0000\u0dcf\u0dd1\u0003\u0154\u00aa\u0000\u0dd0\u0dce\u0001\u0000\u0000"+
		"\u0000\u0dd1\u0dd2\u0001\u0000\u0000\u0000\u0dd2\u0dd0\u0001\u0000\u0000"+
		"\u0000\u0dd2\u0dd3\u0001\u0000\u0000\u0000\u0dd3\u0dd6\u0001\u0000\u0000"+
		"\u0000\u0dd4\u0dd6\u0001\u0000\u0000\u0000\u0dd5\u0dd0\u0001\u0000\u0000"+
		"\u0000\u0dd5\u0dd4\u0001\u0000\u0000\u0000\u0dd6\u0153\u0001\u0000\u0000"+
		"\u0000\u0dd7\u0ddb\u0003\u0156\u00ab\u0000\u0dd8\u0dd9\u0004\u00aa\u0010"+
		"\u0000\u0dd9\u0ddb\u0003\u0168\u00b4\u0000\u0dda\u0dd7\u0001\u0000\u0000"+
		"\u0000\u0dda\u0dd8\u0001\u0000\u0000\u0000\u0ddb\u0155\u0001\u0000\u0000"+
		"\u0000\u0ddc\u0de3\u0005\u015c\u0000\u0000\u0ddd\u0de3\u0003\u0158\u00ac"+
		"\u0000\u0dde\u0ddf\u0004\u00ab\u0011\u0000\u0ddf\u0de3\u0003\u0166\u00b3"+
		"\u0000\u0de0\u0de1\u0004\u00ab\u0012\u0000\u0de1\u0de3\u0003\u016a\u00b5"+
		"\u0000\u0de2\u0ddc\u0001\u0000\u0000\u0000\u0de2\u0ddd\u0001\u0000\u0000"+
		"\u0000\u0de2\u0dde\u0001\u0000\u0000\u0000\u0de2\u0de0\u0001\u0000\u0000"+
		"\u0000\u0de3\u0157\u0001\u0000\u0000\u0000\u0de4\u0de8\u0005\u015d\u0000"+
		"\u0000\u0de5\u0de6\u0004\u00ac\u0013\u0000\u0de6\u0de8\u0005\u0152\u0000"+
		"\u0000\u0de7\u0de4\u0001\u0000\u0000\u0000\u0de7\u0de5\u0001\u0000\u0000"+
		"\u0000\u0de8\u0159\u0001\u0000\u0000\u0000\u0de9\u0dea\u0005\u015d\u0000"+
		"\u0000\u0dea\u015b\u0001\u0000\u0000\u0000\u0deb\u0ded\u0004\u00ae\u0014"+
		"\u0000\u0dec\u0dee\u0005\u0143\u0000\u0000\u0ded\u0dec\u0001\u0000\u0000"+
		"\u0000\u0ded\u0dee\u0001\u0000\u0000\u0000\u0dee\u0def\u0001\u0000\u0000"+
		"\u0000\u0def\u0e17\u0005\u0157\u0000\u0000\u0df0\u0df2\u0004\u00ae\u0015"+
		"\u0000\u0df1\u0df3\u0005\u0143\u0000\u0000\u0df2\u0df1\u0001\u0000\u0000"+
		"\u0000\u0df2\u0df3\u0001\u0000\u0000\u0000\u0df3\u0df4\u0001\u0000\u0000"+
		"\u0000\u0df4\u0e17\u0005\u0158\u0000\u0000\u0df5\u0df7\u0004\u00ae\u0016"+
		"\u0000\u0df6\u0df8\u0005\u0143\u0000\u0000\u0df7\u0df6\u0001\u0000\u0000"+
		"\u0000\u0df7\u0df8\u0001\u0000\u0000\u0000\u0df8\u0df9\u0001\u0000\u0000"+
		"\u0000\u0df9\u0e17\u00076\u0000\u0000\u0dfa\u0dfc\u0005\u0143\u0000\u0000"+
		"\u0dfb\u0dfa\u0001\u0000\u0000\u0000\u0dfb\u0dfc\u0001\u0000\u0000\u0000"+
		"\u0dfc\u0dfd\u0001\u0000\u0000\u0000\u0dfd\u0e17\u0005\u0156\u0000\u0000"+
		"\u0dfe\u0e00\u0005\u0143\u0000\u0000\u0dff\u0dfe\u0001\u0000\u0000\u0000"+
		"\u0dff\u0e00\u0001\u0000\u0000\u0000\u0e00\u0e01\u0001\u0000\u0000\u0000"+
		"\u0e01\u0e17\u0005\u0153\u0000\u0000\u0e02\u0e04\u0005\u0143\u0000\u0000"+
		"\u0e03\u0e02\u0001\u0000\u0000\u0000\u0e03\u0e04\u0001\u0000\u0000\u0000"+
		"\u0e04\u0e05\u0001\u0000\u0000\u0000\u0e05\u0e17\u0005\u0154\u0000\u0000"+
		"\u0e06\u0e08\u0005\u0143\u0000\u0000\u0e07\u0e06\u0001\u0000\u0000\u0000"+
		"\u0e07\u0e08\u0001\u0000\u0000\u0000\u0e08\u0e09\u0001\u0000\u0000\u0000"+
		"\u0e09\u0e17\u0005\u0155\u0000\u0000\u0e0a\u0e0c\u0005\u0143\u0000\u0000"+
		"\u0e0b\u0e0a\u0001\u0000\u0000\u0000\u0e0b\u0e0c\u0001\u0000\u0000\u0000"+
		"\u0e0c\u0e0d\u0001\u0000\u0000\u0000\u0e0d\u0e17\u0005\u015a\u0000\u0000"+
		"\u0e0e\u0e10\u0005\u0143\u0000\u0000\u0e0f\u0e0e\u0001\u0000\u0000\u0000"+
		"\u0e0f\u0e10\u0001\u0000\u0000\u0000\u0e10\u0e11\u0001\u0000\u0000\u0000"+
		"\u0e11\u0e17\u0005\u0159\u0000\u0000\u0e12\u0e14\u0005\u0143\u0000\u0000"+
		"\u0e13\u0e12\u0001\u0000\u0000\u0000\u0e13\u0e14\u0001\u0000\u0000\u0000"+
		"\u0e14\u0e15\u0001\u0000\u0000\u0000\u0e15\u0e17\u0005\u015b\u0000\u0000"+
		"\u0e16\u0deb\u0001\u0000\u0000\u0000\u0e16\u0df0\u0001\u0000\u0000\u0000"+
		"\u0e16\u0df5\u0001\u0000\u0000\u0000\u0e16\u0dfb\u0001\u0000\u0000\u0000"+
		"\u0e16\u0dff\u0001\u0000\u0000\u0000\u0e16\u0e03\u0001\u0000\u0000\u0000"+
		"\u0e16\u0e07\u0001\u0000\u0000\u0000\u0e16\u0e0b\u0001\u0000\u0000\u0000"+
		"\u0e16\u0e0f\u0001\u0000\u0000\u0000\u0e16\u0e13\u0001\u0000\u0000\u0000"+
		"\u0e17\u015d\u0001\u0000\u0000\u0000\u0e18\u0e19\u0005\u011e\u0000\u0000"+
		"\u0e19\u0e24\u0003\u0124\u0092\u0000\u0e1a\u0e24\u0003\"\u0011\u0000\u0e1b"+
		"\u0e24\u0003\u0122\u0091\u0000\u0e1c\u0e1d\u00077\u0000\u0000\u0e1d\u0e1e"+
		"\u0005\u00b2\u0000\u0000\u0e1e\u0e24\u0005\u00b3\u0000\u0000\u0e1f\u0e20"+
		"\u0005\u00f5\u0000\u0000\u0e20\u0e24\u0003\u012c\u0096\u0000\u0e21\u0e22"+
		"\u0005X\u0000\u0000\u0e22\u0e24\u0005L\u0000\u0000\u0e23\u0e18\u0001\u0000"+
		"\u0000\u0000\u0e23\u0e1a\u0001\u0000\u0000\u0000\u0e23\u0e1b\u0001\u0000"+
		"\u0000\u0000\u0e23\u0e1c\u0001\u0000\u0000\u0000\u0e23\u0e1f\u0001\u0000"+
		"\u0000\u0000\u0e23\u0e21\u0001\u0000\u0000\u0000\u0e24\u015f\u0001\u0000"+
		"\u0000\u0000\u0e25\u0e29\u0005\u0151\u0000\u0000\u0e26\u0e27\u0004\u00b0"+
		"\u0017\u0000\u0e27\u0e29\u0005\u0152\u0000\u0000\u0e28\u0e25\u0001\u0000"+
		"\u0000\u0000\u0e28\u0e26\u0001\u0000\u0000\u0000\u0e29\u0161\u0001\u0000"+
		"\u0000\u0000\u0e2a\u0e2d\u0003\u0160\u00b0\u0000\u0e2b\u0e2d\u0005\u00b3"+
		"\u0000\u0000\u0e2c\u0e2a\u0001\u0000\u0000\u0000\u0e2c\u0e2b\u0001\u0000"+
		"\u0000\u0000\u0e2d\u0163\u0001\u0000\u0000\u0000\u0e2e\u0e31\u0005\u0156"+
		"\u0000\u0000\u0e2f\u0e31\u0003\u0160\u00b0\u0000\u0e30\u0e2e\u0001\u0000"+
		"\u0000\u0000\u0e30\u0e2f\u0001\u0000\u0000\u0000\u0e31\u0165\u0001\u0000"+
		"\u0000\u0000\u0e32\u0e33\u00078\u0000\u0000\u0e33\u0167\u0001\u0000\u0000"+
		"\u0000\u0e34\u0e35\u00079\u0000\u0000\u0e35\u0169\u0001\u0000\u0000\u0000"+
		"\u0e36\u0e37\u0007:\u0000\u0000\u0e37\u016b\u0001\u0000\u0000\u0000\u01d5"+
		"\u0170\u0189\u0196\u019d\u01a5\u01a7\u01bb\u01bf\u01c5\u01c8\u01cb\u01d2"+
		"\u01d5\u01d9\u01dc\u01e3\u01ee\u01f0\u01f8\u01fb\u01ff\u0202\u0208\u0213"+
		"\u0219\u021e\u0240\u024d\u0266\u026f\u0273\u0279\u027d\u0282\u0288\u0294"+
		"\u029c\u02a2\u02af\u02b4\u02c4\u02cb\u02cf\u02d5\u02e4\u02e8\u02ee\u02f4"+
		"\u02f7\u02fa\u0300\u0304\u030c\u030e\u0317\u031a\u0323\u0328\u032e\u0335"+
		"\u0338\u033e\u0349\u034c\u0350\u0355\u035a\u0361\u0364\u0367\u036e\u0373"+
		"\u037c\u0384\u038a\u038d\u0390\u0396\u039a\u039f\u03a2\u03a6\u03a8\u03b0"+
		"\u03b8\u03bb\u03c0\u03c6\u03cc\u03cf\u03d3\u03d6\u03da\u03f6\u03f9\u03fd"+
		"\u0403\u0406\u0409\u040f\u0417\u041c\u0422\u0428\u042b\u0432\u0439\u0441"+
		"\u0452\u0460\u0463\u0469\u0472\u047b\u0483\u0488\u048d\u0494\u049a\u049f"+
		"\u04a7\u04aa\u04ae\u04ba\u04be\u04c5\u0539\u0541\u0549\u0552\u055c\u0560"+
		"\u0563\u0569\u056f\u057b\u0587\u058c\u0595\u059d\u05a4\u05a6\u05a9\u05ae"+
		"\u05b2\u05b7\u05ba\u05bf\u05c8\u05cd\u05d0\u05d5\u05d9\u05de\u05e0\u05e4"+
		"\u05ed\u05f5\u05fb\u0606\u060d\u0616\u061b\u061e\u0634\u0636\u063f\u0646"+
		"\u0649\u0650\u0654\u065a\u0662\u066d\u0678\u0680\u0686\u0692\u0699\u06a0"+
		"\u06ac\u06b4\u06ba\u06c0\u06c3\u06cc\u06cf\u06d8\u06db\u06e4\u06e7\u06f0"+
		"\u06f3\u06f6\u06fb\u06fd\u0701\u070d\u0714\u071b\u071e\u0720\u072c\u0730"+
		"\u0734\u073a\u073e\u0746\u074a\u074d\u0750\u0753\u0757\u075b\u0760\u0764"+
		"\u0767\u076a\u076d\u0771\u0776\u077a\u077d\u0780\u0783\u0785\u078b\u0792"+
		"\u0797\u079a\u079d\u07a1\u07ab\u07af\u07b1\u07b4\u07b8\u07be\u07c2\u07cd"+
		"\u07d7\u07db\u07e7\u07f3\u0802\u0807\u080d\u0814\u0824\u0829\u0836\u083b"+
		"\u0843\u0849\u084d\u0850\u0853\u085a\u0860\u0869\u0873\u0882\u0887\u0889"+
		"\u088d\u0896\u08a3\u08a8\u08ac\u08b4\u08b7\u08bb\u08c9\u08d6\u08db\u08df"+
		"\u08e2\u08e6\u08ec\u08ef\u08f6\u0902\u090d\u091a\u0925\u092a\u0932\u0937"+
		"\u093e\u0947\u094a\u094f\u0956\u0959\u095e\u0964\u096a\u096f\u0973\u0979"+
		"\u097d\u0980\u0985\u0988\u098d\u0991\u0994\u0997\u099d\u09a2\u09a9\u09ac"+
		"\u09be\u09c0\u09c3\u09ce\u09d7\u09de\u09e6\u09ed\u09f1\u09f4\u09fc\u0a04"+
		"\u0a0a\u0a12\u0a1e\u0a21\u0a27\u0a2b\u0a2d\u0a36\u0a42\u0a44\u0a4b\u0a52"+
		"\u0a58\u0a5e\u0a60\u0a67\u0a6f\u0a77\u0a7d\u0a82\u0a89\u0a8f\u0a93\u0a95"+
		"\u0a9c\u0aa5\u0aae\u0abb\u0aca\u0ad1\u0adb\u0ae0\u0ae4\u0aed\u0afa\u0afc"+
		"\u0b04\u0b06\u0b0a\u0b12\u0b1b\u0b21\u0b29\u0b2e\u0b3a\u0b3f\u0b42\u0b48"+
		"\u0b4c\u0b51\u0b56\u0b5b\u0b61\u0b76\u0b78\u0b95\u0b99\u0ba2\u0ba6\u0bb8"+
		"\u0bbb\u0bc3\u0bcc\u0bd5\u0bed\u0bf8\u0bff\u0c02\u0c0b\u0c0f\u0c13\u0c1f"+
		"\u0c3c\u0c43\u0c46\u0c55\u0c6a\u0c6e\u0c70\u0c7a\u0c7c\u0c84\u0c93\u0c96"+
		"\u0ca3\u0ca7\u0cae\u0cb3\u0cbb\u0cc0\u0cc9\u0cda\u0cde\u0ce4\u0cea\u0cf3"+
		"\u0cf7\u0cf9\u0d00\u0d08\u0d10\u0d1a\u0d21\u0d24\u0d2b\u0d33\u0d3b\u0d49"+
		"\u0d4e\u0d53\u0d56\u0d63\u0d77\u0d81\u0d84\u0d8d\u0d90\u0d92\u0d95\u0d98"+
		"\u0daa\u0db3\u0dba\u0dc1\u0dc8\u0dd2\u0dd5\u0dda\u0de2\u0de7\u0ded\u0df2"+
		"\u0df7\u0dfb\u0dff\u0e03\u0e07\u0e0b\u0e0f\u0e13\u0e16\u0e23\u0e28\u0e2c"+
		"\u0e30";
	public static final String _serializedATN = Utils.join(
		new String[] {
			_serializedATNSegment0,
			_serializedATNSegment1
		},
		""
	);
	public static final ATN _ATN =
		new ATNDeserializer().deserialize(_serializedATN.toCharArray());
	static {
		_decisionToDFA = new DFA[_ATN.getNumberOfDecisions()];
		for (int i = 0; i < _ATN.getNumberOfDecisions(); i++) {
			_decisionToDFA[i] = new DFA(_ATN.getDecisionState(i), i);
		}
	}
}